
yx_2104_lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c0  08008738  08008738  00018738  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bf8  08008bf8  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08008bf8  08008bf8  00018bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c00  08008c00  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c00  08008c00  00018c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c04  08008c04  00018c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008c08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          00000178  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000358  20000358  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010f3c  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002018  00000000  00000000  0003114c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f40  00000000  00000000  00033168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000eb0  00000000  00000000  000340a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022554  00000000  00000000  00034f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001205e  00000000  00000000  000574ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf9f2  00000000  00000000  0006950a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00138efc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005410  00000000  00000000  00138f4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800871c 	.word	0x0800871c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800871c 	.word	0x0800871c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <IMU_Initialise>:

/*
 * INITIALISATION
 */
uint8_t* IMU_Initialise(IMU_Data *dev, I2C_HandleTypeDef *i2cHandle, UART_HandleTypeDef *uart)
{    // the uart is included in the parameter such that detailed message can be sent directly from within
 8000f4c:	b5b0      	push	{r4, r5, r7, lr}
 8000f4e:	b08c      	sub	sp, #48	; 0x30
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
     // the function here, instead of passing the information back to the main.c to send,  which can be messy.

	 char hex[2];
	 uint8_t uartbuf[20]="  IMU ID =      "; // buffer for data
 8000f58:	4b5d      	ldr	r3, [pc, #372]	; (80010d0 <IMU_Initialise+0x184>)
 8000f5a:	f107 0418 	add.w	r4, r7, #24
 8000f5e:	461d      	mov	r5, r3
 8000f60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f64:	682b      	ldr	r3, [r5, #0]
 8000f66:	7023      	strb	r3, [r4, #0]
 8000f68:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	801a      	strh	r2, [r3, #0]
 8000f70:	709a      	strb	r2, [r3, #2]
     uint8_t regData;

	 dev->i2cHandle = i2cHandle;
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	68ba      	ldr	r2, [r7, #8]
 8000f76:	601a      	str	r2, [r3, #0]
	 dev->uart = uart;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	605a      	str	r2, [r3, #4]

	  //check ID
	  ret = IMU_ReadOneByte(dev, REG_WHO_AM_I, &regData);
 8000f7e:	2175      	movs	r1, #117	; 0x75
 8000f80:	f107 0317 	add.w	r3, r7, #23
 8000f84:	461a      	mov	r2, r3
 8000f86:	68f8      	ldr	r0, [r7, #12]
 8000f88:	f000 f8d4 	bl	8001134 <IMU_ReadOneByte>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	461a      	mov	r2, r3
 8000f90:	4b50      	ldr	r3, [pc, #320]	; (80010d4 <IMU_Initialise+0x188>)
 8000f92:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 8000f94:	4b4f      	ldr	r3, [pc, #316]	; (80010d4 <IMU_Initialise+0x188>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d007      	beq.n	8000fac <IMU_Initialise+0x60>
	       strcpy((char*)uartbuf, "Error 2\r\n");
 8000f9c:	f107 0318 	add.w	r3, r7, #24
 8000fa0:	4a4d      	ldr	r2, [pc, #308]	; (80010d8 <IMU_Initialise+0x18c>)
 8000fa2:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fa4:	c303      	stmia	r3!, {r0, r1}
 8000fa6:	801a      	strh	r2, [r3, #0]
	       return &uartbuf[0];
 8000fa8:	2300      	movs	r3, #0
 8000faa:	e08c      	b.n	80010c6 <IMU_Initialise+0x17a>
	       }
	  else{ // send ID read to Uart - for verififcation by user
		  sprintf(hex, "%x", regData); // change to hexidecimal
 8000fac:	7dfb      	ldrb	r3, [r7, #23]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fb4:	4949      	ldr	r1, [pc, #292]	; (80010dc <IMU_Initialise+0x190>)
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f004 feb6 	bl	8005d28 <siprintf>
	      strcpy(uartbuf, hex); // copy back to buf
 8000fbc:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000fc0:	f107 0318 	add.w	r3, r7, #24
 8000fc4:	4611      	mov	r1, r2
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f004 fece 	bl	8005d68 <strcpy>
	      uartbuf[12] = uartbuf[0]; // change to upper case
 8000fcc:	7e3b      	ldrb	r3, [r7, #24]
 8000fce:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	      uartbuf[13] = uartbuf[1];
 8000fd2:	7e7b      	ldrb	r3, [r7, #25]
 8000fd4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	      uartbuf[14] = '\r';
 8000fd8:	230d      	movs	r3, #13
 8000fda:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	      uartbuf[15] = '\n';
 8000fde:	230a      	movs	r3, #10
 8000fe0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	      uartbuf[16] = '\0';
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	      uartbuf[0]  = '\r';
 8000fea:	230d      	movs	r3, #13
 8000fec:	763b      	strb	r3, [r7, #24]
	      uartbuf[1]  = '\n';
 8000fee:	230a      	movs	r3, #10
 8000ff0:	767b      	strb	r3, [r7, #25]
	      uartbuf[2]  = 'I';
 8000ff2:	2349      	movs	r3, #73	; 0x49
 8000ff4:	76bb      	strb	r3, [r7, #26]
		  // for debuggiing - send to uart and return to main to display on OLED and UART
	      HAL_UART_Transmit(dev->uart, uartbuf, strlen((char*)uartbuf), HAL_MAX_DELAY);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	685c      	ldr	r4, [r3, #4]
 8000ffa:	f107 0318 	add.w	r3, r7, #24
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff f8e6 	bl	80001d0 <strlen>
 8001004:	4603      	mov	r3, r0
 8001006:	b29a      	uxth	r2, r3
 8001008:	f107 0118 	add.w	r1, r7, #24
 800100c:	f04f 33ff 	mov.w	r3, #4294967295
 8001010:	4620      	mov	r0, r4
 8001012:	f003 fe78 	bl	8004d06 <HAL_UART_Transmit>
	      }


	  // Initialize

      ret = IMU_WriteOneByte(dev, 0x1A,  0x05); //set lowpass filter
 8001016:	2205      	movs	r2, #5
 8001018:	211a      	movs	r1, #26
 800101a:	68f8      	ldr	r0, [r7, #12]
 800101c:	f000 f866 	bl	80010ec <IMU_WriteOneByte>
 8001020:	4603      	mov	r3, r0
 8001022:	461a      	mov	r2, r3
 8001024:	4b2b      	ldr	r3, [pc, #172]	; (80010d4 <IMU_Initialise+0x188>)
 8001026:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 8001028:	4b2a      	ldr	r3, [pc, #168]	; (80010d4 <IMU_Initialise+0x188>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d007      	beq.n	8001040 <IMU_Initialise+0xf4>
	       strcpy((char*)uartbuf, "Error 1\r\n");
 8001030:	f107 0318 	add.w	r3, r7, #24
 8001034:	4a2a      	ldr	r2, [pc, #168]	; (80010e0 <IMU_Initialise+0x194>)
 8001036:	ca07      	ldmia	r2, {r0, r1, r2}
 8001038:	c303      	stmia	r3!, {r0, r1}
 800103a:	801a      	strh	r2, [r3, #0]
	       return &uartbuf[0];
 800103c:	2300      	movs	r3, #0
 800103e:	e042      	b.n	80010c6 <IMU_Initialise+0x17a>
	       }

      ret = IMU_WriteOneByte(dev, 0x1B,  0x08); // gyro senstitivity scales
 8001040:	2208      	movs	r2, #8
 8001042:	211b      	movs	r1, #27
 8001044:	68f8      	ldr	r0, [r7, #12]
 8001046:	f000 f851 	bl	80010ec <IMU_WriteOneByte>
 800104a:	4603      	mov	r3, r0
 800104c:	461a      	mov	r2, r3
 800104e:	4b21      	ldr	r3, [pc, #132]	; (80010d4 <IMU_Initialise+0x188>)
 8001050:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 8001052:	4b20      	ldr	r3, [pc, #128]	; (80010d4 <IMU_Initialise+0x188>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d007      	beq.n	800106a <IMU_Initialise+0x11e>
	       strcpy((char*)uartbuf, "Error 2\r\n");
 800105a:	f107 0318 	add.w	r3, r7, #24
 800105e:	4a1e      	ldr	r2, [pc, #120]	; (80010d8 <IMU_Initialise+0x18c>)
 8001060:	ca07      	ldmia	r2, {r0, r1, r2}
 8001062:	c303      	stmia	r3!, {r0, r1}
 8001064:	801a      	strh	r2, [r3, #0]
	       return &uartbuf[0];
 8001066:	2300      	movs	r3, #0
 8001068:	e02d      	b.n	80010c6 <IMU_Initialise+0x17a>
	       }

      ret = IMU_WriteOneByte(dev, 0x1C,  0x00); // Accelerator max scale +/- 2g
 800106a:	2200      	movs	r2, #0
 800106c:	211c      	movs	r1, #28
 800106e:	68f8      	ldr	r0, [r7, #12]
 8001070:	f000 f83c 	bl	80010ec <IMU_WriteOneByte>
 8001074:	4603      	mov	r3, r0
 8001076:	461a      	mov	r2, r3
 8001078:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <IMU_Initialise+0x188>)
 800107a:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 800107c:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <IMU_Initialise+0x188>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d007      	beq.n	8001094 <IMU_Initialise+0x148>
	       strcpy((char*)uartbuf, "Error 3\r\n");
 8001084:	f107 0318 	add.w	r3, r7, #24
 8001088:	4a16      	ldr	r2, [pc, #88]	; (80010e4 <IMU_Initialise+0x198>)
 800108a:	ca07      	ldmia	r2, {r0, r1, r2}
 800108c:	c303      	stmia	r3!, {r0, r1}
 800108e:	801a      	strh	r2, [r3, #0]
	       return &uartbuf[0];
 8001090:	2300      	movs	r3, #0
 8001092:	e018      	b.n	80010c6 <IMU_Initialise+0x17a>
	       }

      ret = IMU_WriteOneByte(dev, 0x6B, 0x00);  //Turn on power to IMU
 8001094:	2200      	movs	r2, #0
 8001096:	216b      	movs	r1, #107	; 0x6b
 8001098:	68f8      	ldr	r0, [r7, #12]
 800109a:	f000 f827 	bl	80010ec <IMU_WriteOneByte>
 800109e:	4603      	mov	r3, r0
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <IMU_Initialise+0x188>)
 80010a4:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 80010a6:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <IMU_Initialise+0x188>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d007      	beq.n	80010be <IMU_Initialise+0x172>
	       strcpy((char*)uartbuf, "Error 4\r\n");
 80010ae:	f107 0318 	add.w	r3, r7, #24
 80010b2:	4a0d      	ldr	r2, [pc, #52]	; (80010e8 <IMU_Initialise+0x19c>)
 80010b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80010b6:	c303      	stmia	r3!, {r0, r1}
 80010b8:	801a      	strh	r2, [r3, #0]
	       return &uartbuf[0];
 80010ba:	2300      	movs	r3, #0
 80010bc:	e003      	b.n	80010c6 <IMU_Initialise+0x17a>
	       }

      HAL_Delay(10);
 80010be:	200a      	movs	r0, #10
 80010c0:	f001 f844 	bl	800214c <HAL_Delay>

      // everthing OK
      return 0; // 0 means 0 error
 80010c4:	2300      	movs	r3, #0

}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3730      	adds	r7, #48	; 0x30
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bdb0      	pop	{r4, r5, r7, pc}
 80010ce:	bf00      	nop
 80010d0:	0800876c 	.word	0x0800876c
 80010d4:	200001fc 	.word	0x200001fc
 80010d8:	08008738 	.word	0x08008738
 80010dc:	08008744 	.word	0x08008744
 80010e0:	08008748 	.word	0x08008748
 80010e4:	08008754 	.word	0x08008754
 80010e8:	08008760 	.word	0x08008760

080010ec <IMU_WriteOneByte>:


HAL_StatusTypeDef IMU_WriteOneByte(IMU_Data *dev, uint8_t reg, uint8_t data)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b088      	sub	sp, #32
 80010f0:	af04      	add	r7, sp, #16
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	460b      	mov	r3, r1
 80010f6:	70fb      	strb	r3, [r7, #3]
 80010f8:	4613      	mov	r3, r2
 80010fa:	70bb      	strb	r3, [r7, #2]
	 uint8_t regData = data;
 80010fc:	78bb      	ldrb	r3, [r7, #2]
 80010fe:	73fb      	strb	r3, [r7, #15]
	 return HAL_I2C_Mem_Write(dev->i2cHandle, IMU_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &regData, 1, HAL_MAX_DELAY);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6818      	ldr	r0, [r3, #0]
 8001104:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <IMU_WriteOneByte+0x44>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	b299      	uxth	r1, r3
 800110a:	78fb      	ldrb	r3, [r7, #3]
 800110c:	b29a      	uxth	r2, r3
 800110e:	f04f 33ff 	mov.w	r3, #4294967295
 8001112:	9302      	str	r3, [sp, #8]
 8001114:	2301      	movs	r3, #1
 8001116:	9301      	str	r3, [sp, #4]
 8001118:	f107 030f 	add.w	r3, r7, #15
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	2301      	movs	r3, #1
 8001120:	f001 fc5c 	bl	80029dc <HAL_I2C_Mem_Write>
 8001124:	4603      	mov	r3, r0
}
 8001126:	4618      	mov	r0, r3
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000000 	.word	0x20000000

08001134 <IMU_ReadOneByte>:

HAL_StatusTypeDef IMU_ReadOneByte(IMU_Data *dev, uint8_t reg, uint8_t *data)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b088      	sub	sp, #32
 8001138:	af04      	add	r7, sp, #16
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	460b      	mov	r3, r1
 800113e:	607a      	str	r2, [r7, #4]
 8001140:	72fb      	strb	r3, [r7, #11]
	ret=HAL_I2C_Mem_Read(dev->i2cHandle, IMU_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, I2C_MEMADD_SIZE_8BIT, HAL_MAX_DELAY);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	6818      	ldr	r0, [r3, #0]
 8001146:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <IMU_ReadOneByte+0x44>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	b299      	uxth	r1, r3
 800114c:	7afb      	ldrb	r3, [r7, #11]
 800114e:	b29a      	uxth	r2, r3
 8001150:	f04f 33ff 	mov.w	r3, #4294967295
 8001154:	9302      	str	r3, [sp, #8]
 8001156:	2301      	movs	r3, #1
 8001158:	9301      	str	r3, [sp, #4]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	9300      	str	r3, [sp, #0]
 800115e:	2301      	movs	r3, #1
 8001160:	f001 fd36 	bl	8002bd0 <HAL_I2C_Mem_Read>
 8001164:	4603      	mov	r3, r0
 8001166:	461a      	mov	r2, r3
 8001168:	4b04      	ldr	r3, [pc, #16]	; (800117c <IMU_ReadOneByte+0x48>)
 800116a:	701a      	strb	r2, [r3, #0]
	return ret;
 800116c:	4b03      	ldr	r3, [pc, #12]	; (800117c <IMU_ReadOneByte+0x48>)
 800116e:	781b      	ldrb	r3, [r3, #0]
}
 8001170:	4618      	mov	r0, r3
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000000 	.word	0x20000000
 800117c:	200001fc 	.word	0x200001fc

08001180 <IMU_AccelRead>:


HAL_StatusTypeDef IMU_AccelRead(IMU_Data *dev)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b088      	sub	sp, #32
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
    uint8_t u8Buf[2] = {0}; // reset to zero
 8001188:	2300      	movs	r3, #0
 800118a:	83bb      	strh	r3, [r7, #28]
    int16_t accRaw[3] = {0};  // reset to zero
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	809a      	strh	r2, [r3, #4]

    ret=IMU_ReadOneByte(dev, 0x3c, &u8Buf[0]); // low byte of X
 8001196:	f107 031c 	add.w	r3, r7, #28
 800119a:	461a      	mov	r2, r3
 800119c:	213c      	movs	r1, #60	; 0x3c
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff ffc8 	bl	8001134 <IMU_ReadOneByte>
 80011a4:	4603      	mov	r3, r0
 80011a6:	461a      	mov	r2, r3
 80011a8:	4b55      	ldr	r3, [pc, #340]	; (8001300 <IMU_AccelRead+0x180>)
 80011aa:	701a      	strb	r2, [r3, #0]
    ret=IMU_ReadOneByte(dev, 0x3b, &u8Buf[1]); // high byte
 80011ac:	f107 031c 	add.w	r3, r7, #28
 80011b0:	3301      	adds	r3, #1
 80011b2:	461a      	mov	r2, r3
 80011b4:	213b      	movs	r1, #59	; 0x3b
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff ffbc 	bl	8001134 <IMU_ReadOneByte>
 80011bc:	4603      	mov	r3, r0
 80011be:	461a      	mov	r2, r3
 80011c0:	4b4f      	ldr	r3, [pc, #316]	; (8001300 <IMU_AccelRead+0x180>)
 80011c2:	701a      	strb	r2, [r3, #0]
    accRaw[0] =	(u8Buf[1]<<8)|u8Buf[0];
 80011c4:	7f7b      	ldrb	r3, [r7, #29]
 80011c6:	021b      	lsls	r3, r3, #8
 80011c8:	b21a      	sxth	r2, r3
 80011ca:	7f3b      	ldrb	r3, [r7, #28]
 80011cc:	b21b      	sxth	r3, r3
 80011ce:	4313      	orrs	r3, r2
 80011d0:	b21b      	sxth	r3, r3
 80011d2:	82bb      	strh	r3, [r7, #20]


    ret=IMU_ReadOneByte(dev, 0x3e, &u8Buf[0]); // Low byte of Y
 80011d4:	f107 031c 	add.w	r3, r7, #28
 80011d8:	461a      	mov	r2, r3
 80011da:	213e      	movs	r1, #62	; 0x3e
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f7ff ffa9 	bl	8001134 <IMU_ReadOneByte>
 80011e2:	4603      	mov	r3, r0
 80011e4:	461a      	mov	r2, r3
 80011e6:	4b46      	ldr	r3, [pc, #280]	; (8001300 <IMU_AccelRead+0x180>)
 80011e8:	701a      	strb	r2, [r3, #0]
    ret=IMU_ReadOneByte(dev, 0x3d, &u8Buf[1]);
 80011ea:	f107 031c 	add.w	r3, r7, #28
 80011ee:	3301      	adds	r3, #1
 80011f0:	461a      	mov	r2, r3
 80011f2:	213d      	movs	r1, #61	; 0x3d
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f7ff ff9d 	bl	8001134 <IMU_ReadOneByte>
 80011fa:	4603      	mov	r3, r0
 80011fc:	461a      	mov	r2, r3
 80011fe:	4b40      	ldr	r3, [pc, #256]	; (8001300 <IMU_AccelRead+0x180>)
 8001200:	701a      	strb	r2, [r3, #0]
    accRaw[1] =	(u8Buf[1]<<8)|u8Buf[0];
 8001202:	7f7b      	ldrb	r3, [r7, #29]
 8001204:	021b      	lsls	r3, r3, #8
 8001206:	b21a      	sxth	r2, r3
 8001208:	7f3b      	ldrb	r3, [r7, #28]
 800120a:	b21b      	sxth	r3, r3
 800120c:	4313      	orrs	r3, r2
 800120e:	b21b      	sxth	r3, r3
 8001210:	82fb      	strh	r3, [r7, #22]


    ret=IMU_ReadOneByte(dev, 0x40, &u8Buf[0]); // low byte of Z
 8001212:	f107 031c 	add.w	r3, r7, #28
 8001216:	461a      	mov	r2, r3
 8001218:	2140      	movs	r1, #64	; 0x40
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff ff8a 	bl	8001134 <IMU_ReadOneByte>
 8001220:	4603      	mov	r3, r0
 8001222:	461a      	mov	r2, r3
 8001224:	4b36      	ldr	r3, [pc, #216]	; (8001300 <IMU_AccelRead+0x180>)
 8001226:	701a      	strb	r2, [r3, #0]
    ret=IMU_ReadOneByte(dev, 0x3f, &u8Buf[1]);
 8001228:	f107 031c 	add.w	r3, r7, #28
 800122c:	3301      	adds	r3, #1
 800122e:	461a      	mov	r2, r3
 8001230:	213f      	movs	r1, #63	; 0x3f
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff ff7e 	bl	8001134 <IMU_ReadOneByte>
 8001238:	4603      	mov	r3, r0
 800123a:	461a      	mov	r2, r3
 800123c:	4b30      	ldr	r3, [pc, #192]	; (8001300 <IMU_AccelRead+0x180>)
 800123e:	701a      	strb	r2, [r3, #0]
    accRaw[2] =	(u8Buf[1]<<8)|u8Buf[0];
 8001240:	7f7b      	ldrb	r3, [r7, #29]
 8001242:	021b      	lsls	r3, r3, #8
 8001244:	b21a      	sxth	r2, r3
 8001246:	7f3b      	ldrb	r3, [r7, #28]
 8001248:	b21b      	sxth	r3, r3
 800124a:	4313      	orrs	r3, r2
 800124c:	b21b      	sxth	r3, r3
 800124e:	833b      	strh	r3, [r7, #24]

	/* Convert to SIGNED integers (two's complement) */
	int32_t accRawSigned[3];

	if ( (accRaw[0] & 0x00008000) == 0x00008000 )
 8001250:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001254:	2b00      	cmp	r3, #0
 8001256:	da07      	bge.n	8001268 <IMU_AccelRead+0xe8>
		accRawSigned[0] = accRaw[0] | 0xFFFF0000;
 8001258:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800125c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8001260:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8001264:	60bb      	str	r3, [r7, #8]
 8001266:	e002      	b.n	800126e <IMU_AccelRead+0xee>
	else
		accRawSigned[0] = accRaw[0];
 8001268:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800126c:	60bb      	str	r3, [r7, #8]

	if ( (accRaw[1] & 0x00008000) == 0x00008000 )
 800126e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001272:	2b00      	cmp	r3, #0
 8001274:	da07      	bge.n	8001286 <IMU_AccelRead+0x106>
		accRawSigned[1] = accRaw[1] | 0xFFFF0000;
 8001276:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800127a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 800127e:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	e002      	b.n	800128c <IMU_AccelRead+0x10c>
	else
		accRawSigned[1] = accRaw[1];
 8001286:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800128a:	60fb      	str	r3, [r7, #12]

	if ( (accRaw[2] & 0x00008000) == 0x00008000 )
 800128c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001290:	2b00      	cmp	r3, #0
 8001292:	da07      	bge.n	80012a4 <IMU_AccelRead+0x124>
		accRawSigned[2] = accRaw[2] | 0xFFFF0000;
 8001294:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001298:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 800129c:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	e002      	b.n	80012aa <IMU_AccelRead+0x12a>
	else
		accRawSigned[2] = accRaw[2];
 80012a4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80012a8:	613b      	str	r3, [r7, #16]


	// accelerometer full scale set to +/-2g, divide by sensitivity scale factor = 16384 LSB/g (see page 29, Registers 59-64)
	dev->acc[0] = 9.81f * 0.00006103515625f * accRawSigned[0];
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	ee07 3a90 	vmov	s15, r3
 80012b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b4:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001304 <IMU_AccelRead+0x184>
 80012b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	edc3 7a02 	vstr	s15, [r3, #8]
	dev->acc[1] = 9.81f * 0.00006103515625f * accRawSigned[1];
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	ee07 3a90 	vmov	s15, r3
 80012c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012cc:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001304 <IMU_AccelRead+0x184>
 80012d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	edc3 7a03 	vstr	s15, [r3, #12]
	dev->acc[2] = 9.81f * 0.00006103515625f * accRawSigned[2];
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	ee07 3a90 	vmov	s15, r3
 80012e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012e4:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001304 <IMU_AccelRead+0x184>
 80012e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	edc3 7a04 	vstr	s15, [r3, #16]

	return ret;
 80012f2:	4b03      	ldr	r3, [pc, #12]	; (8001300 <IMU_AccelRead+0x180>)
 80012f4:	781b      	ldrb	r3, [r3, #0]

}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3720      	adds	r7, #32
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	200001fc 	.word	0x200001fc
 8001304:	3a1cf5c3 	.word	0x3a1cf5c3

08001308 <IMU_GyroRead>:
	return ret;
}


HAL_StatusTypeDef IMU_GyroRead(IMU_Data *dev)
{   // return the change in value instead of current value
 8001308:	b580      	push	{r7, lr}
 800130a:	b08a      	sub	sp, #40	; 0x28
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
    uint8_t u8Buf[2] = {0}; // reset to zero
 8001310:	2300      	movs	r3, #0
 8001312:	84bb      	strh	r3, [r7, #36]	; 0x24
    int16_t gyroRaw[3] = {0};  // reset to zero
 8001314:	f107 031c 	add.w	r3, r7, #28
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	809a      	strh	r2, [r3, #4]
    int16_t gyroDiff[3];
    int16_t temp;
    static int16_t gyroOld[3]= {0, 0, 0};  // previous value

    ret=IMU_ReadOneByte(dev, 0x44, &u8Buf[0]); // gyro X lower byte
 800131e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001322:	461a      	mov	r2, r3
 8001324:	2144      	movs	r1, #68	; 0x44
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff ff04 	bl	8001134 <IMU_ReadOneByte>
 800132c:	4603      	mov	r3, r0
 800132e:	461a      	mov	r2, r3
 8001330:	4b77      	ldr	r3, [pc, #476]	; (8001510 <IMU_GyroRead+0x208>)
 8001332:	701a      	strb	r2, [r3, #0]
    ret=IMU_ReadOneByte(dev, 0x43, &u8Buf[1]); // upper byte
 8001334:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001338:	3301      	adds	r3, #1
 800133a:	461a      	mov	r2, r3
 800133c:	2143      	movs	r1, #67	; 0x43
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff fef8 	bl	8001134 <IMU_ReadOneByte>
 8001344:	4603      	mov	r3, r0
 8001346:	461a      	mov	r2, r3
 8001348:	4b71      	ldr	r3, [pc, #452]	; (8001510 <IMU_GyroRead+0x208>)
 800134a:	701a      	strb	r2, [r3, #0]
    temp = (u8Buf[1]<<8)|u8Buf[0]; // for debugging
 800134c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001350:	021b      	lsls	r3, r3, #8
 8001352:	b21a      	sxth	r2, r3
 8001354:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001358:	b21b      	sxth	r3, r3
 800135a:	4313      	orrs	r3, r2
 800135c:	84fb      	strh	r3, [r7, #38]	; 0x26
    gyroRaw[0] = (u8Buf[1]<<8)|u8Buf[0] - gyro_offset[0];
 800135e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001362:	021b      	lsls	r3, r3, #8
 8001364:	b21a      	sxth	r2, r3
 8001366:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800136a:	b299      	uxth	r1, r3
 800136c:	4b69      	ldr	r3, [pc, #420]	; (8001514 <IMU_GyroRead+0x20c>)
 800136e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001372:	b29b      	uxth	r3, r3
 8001374:	1acb      	subs	r3, r1, r3
 8001376:	b29b      	uxth	r3, r3
 8001378:	b21b      	sxth	r3, r3
 800137a:	4313      	orrs	r3, r2
 800137c:	b21b      	sxth	r3, r3
 800137e:	83bb      	strh	r3, [r7, #28]
    gyroDiff[0] = gyroRaw[0] - gyroOld[0];  // change in value
 8001380:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001384:	b29a      	uxth	r2, r3
 8001386:	4b64      	ldr	r3, [pc, #400]	; (8001518 <IMU_GyroRead+0x210>)
 8001388:	f9b3 3000 	ldrsh.w	r3, [r3]
 800138c:	b29b      	uxth	r3, r3
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	b29b      	uxth	r3, r3
 8001392:	b21b      	sxth	r3, r3
 8001394:	82bb      	strh	r3, [r7, #20]
    gyroOld[0] = gyroRaw[0];
 8001396:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800139a:	4b5f      	ldr	r3, [pc, #380]	; (8001518 <IMU_GyroRead+0x210>)
 800139c:	801a      	strh	r2, [r3, #0]

    ret=IMU_ReadOneByte(dev, 0x46, &u8Buf[0]);  // Gyro Y lower byte
 800139e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a2:	461a      	mov	r2, r3
 80013a4:	2146      	movs	r1, #70	; 0x46
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff fec4 	bl	8001134 <IMU_ReadOneByte>
 80013ac:	4603      	mov	r3, r0
 80013ae:	461a      	mov	r2, r3
 80013b0:	4b57      	ldr	r3, [pc, #348]	; (8001510 <IMU_GyroRead+0x208>)
 80013b2:	701a      	strb	r2, [r3, #0]
    ret=IMU_ReadOneByte(dev, 0x45, &u8Buf[1]);  // upper byte
 80013b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b8:	3301      	adds	r3, #1
 80013ba:	461a      	mov	r2, r3
 80013bc:	2145      	movs	r1, #69	; 0x45
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff feb8 	bl	8001134 <IMU_ReadOneByte>
 80013c4:	4603      	mov	r3, r0
 80013c6:	461a      	mov	r2, r3
 80013c8:	4b51      	ldr	r3, [pc, #324]	; (8001510 <IMU_GyroRead+0x208>)
 80013ca:	701a      	strb	r2, [r3, #0]
    gyroRaw[1] = (u8Buf[1]<<8)|u8Buf[0] -  gyro_offset[1];
 80013cc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80013d0:	021b      	lsls	r3, r3, #8
 80013d2:	b21a      	sxth	r2, r3
 80013d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80013d8:	b299      	uxth	r1, r3
 80013da:	4b4e      	ldr	r3, [pc, #312]	; (8001514 <IMU_GyroRead+0x20c>)
 80013dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	1acb      	subs	r3, r1, r3
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	b21b      	sxth	r3, r3
 80013e8:	4313      	orrs	r3, r2
 80013ea:	b21b      	sxth	r3, r3
 80013ec:	83fb      	strh	r3, [r7, #30]
    gyroDiff[1] = gyroRaw[1] - gyroOld[1];  // change in value
 80013ee:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013f2:	b29a      	uxth	r2, r3
 80013f4:	4b48      	ldr	r3, [pc, #288]	; (8001518 <IMU_GyroRead+0x210>)
 80013f6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	b29b      	uxth	r3, r3
 8001400:	b21b      	sxth	r3, r3
 8001402:	82fb      	strh	r3, [r7, #22]
    gyroOld[1] = gyroRaw[1];
 8001404:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8001408:	4b43      	ldr	r3, [pc, #268]	; (8001518 <IMU_GyroRead+0x210>)
 800140a:	805a      	strh	r2, [r3, #2]

    ret=IMU_ReadOneByte(dev, 0x48, &u8Buf[0]);  // Gyro Z lower byte
 800140c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001410:	461a      	mov	r2, r3
 8001412:	2148      	movs	r1, #72	; 0x48
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff fe8d 	bl	8001134 <IMU_ReadOneByte>
 800141a:	4603      	mov	r3, r0
 800141c:	461a      	mov	r2, r3
 800141e:	4b3c      	ldr	r3, [pc, #240]	; (8001510 <IMU_GyroRead+0x208>)
 8001420:	701a      	strb	r2, [r3, #0]
    ret=IMU_ReadOneByte(dev, 0x47, &u8Buf[1]); // upper byte
 8001422:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001426:	3301      	adds	r3, #1
 8001428:	461a      	mov	r2, r3
 800142a:	2147      	movs	r1, #71	; 0x47
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f7ff fe81 	bl	8001134 <IMU_ReadOneByte>
 8001432:	4603      	mov	r3, r0
 8001434:	461a      	mov	r2, r3
 8001436:	4b36      	ldr	r3, [pc, #216]	; (8001510 <IMU_GyroRead+0x208>)
 8001438:	701a      	strb	r2, [r3, #0]
    gyroRaw[2] = (u8Buf[1]<<8)|u8Buf[0] -  gyro_offset[2];
 800143a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800143e:	021b      	lsls	r3, r3, #8
 8001440:	b21a      	sxth	r2, r3
 8001442:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001446:	b299      	uxth	r1, r3
 8001448:	4b32      	ldr	r3, [pc, #200]	; (8001514 <IMU_GyroRead+0x20c>)
 800144a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800144e:	b29b      	uxth	r3, r3
 8001450:	1acb      	subs	r3, r1, r3
 8001452:	b29b      	uxth	r3, r3
 8001454:	b21b      	sxth	r3, r3
 8001456:	4313      	orrs	r3, r2
 8001458:	b21b      	sxth	r3, r3
 800145a:	843b      	strh	r3, [r7, #32]
    gyroDiff[2] = gyroRaw[2] - gyroOld[2];  // change in value
 800145c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001460:	b29a      	uxth	r2, r3
 8001462:	4b2d      	ldr	r3, [pc, #180]	; (8001518 <IMU_GyroRead+0x210>)
 8001464:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001468:	b29b      	uxth	r3, r3
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	b29b      	uxth	r3, r3
 800146e:	b21b      	sxth	r3, r3
 8001470:	833b      	strh	r3, [r7, #24]
    gyroOld[2] = gyroRaw[2];
 8001472:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001476:	4b28      	ldr	r3, [pc, #160]	; (8001518 <IMU_GyroRead+0x210>)
 8001478:	809a      	strh	r2, [r3, #4]

	/* extend to 32 bit SIGNED integers (two's complement)*/
    int32_t gyroRawSigned[3];


	if ( (gyroRaw[0] & 0x00008000) == 0x00008000 )  //change to 32 bit
 800147a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800147e:	2b00      	cmp	r3, #0
 8001480:	da07      	bge.n	8001492 <IMU_GyroRead+0x18a>
		gyroRawSigned[0] = gyroRaw[0] | 0xFFFF0000;
 8001482:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001486:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 800148a:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 800148e:	60bb      	str	r3, [r7, #8]
 8001490:	e002      	b.n	8001498 <IMU_GyroRead+0x190>
	else
		gyroRawSigned[0] = gyroRaw[0];
 8001492:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001496:	60bb      	str	r3, [r7, #8]

	if ( (gyroRaw[1] & 0x00008000) == 0x00008000 )
 8001498:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800149c:	2b00      	cmp	r3, #0
 800149e:	da07      	bge.n	80014b0 <IMU_GyroRead+0x1a8>
		gyroRawSigned[1] = gyroRaw[1] | 0xFFFF0000;
 80014a0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80014a4:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 80014a8:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	e002      	b.n	80014b6 <IMU_GyroRead+0x1ae>
	else
		gyroRawSigned[1] = gyroRaw[1];
 80014b0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80014b4:	60fb      	str	r3, [r7, #12]

	if ( (gyroRaw[2] & 0x00008000) == 0x800008000 )
		gyroRawSigned[2] = gyroRaw[2] | 0xFFFF0000;
	else
		gyroRawSigned[2] = gyroRaw[2];
 80014b6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80014ba:	613b      	str	r3, [r7, #16]


	// gyro full scale set to +/-500 dps, divide by sensitivity scale factor = 65.5 LSB/dps (see pg 31, Registers 67-72)
	// degree per second = value/65.5
	dev->gyro[0] = 0.0152671755725191f * gyroRawSigned[0];
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	ee07 3a90 	vmov	s15, r3
 80014c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014c6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800151c <IMU_GyroRead+0x214>
 80014ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	edc3 7a05 	vstr	s15, [r3, #20]
	dev->gyro[1] = 0.0152671755725191f * gyroRawSigned[1];
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	ee07 3a90 	vmov	s15, r3
 80014da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014de:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800151c <IMU_GyroRead+0x214>
 80014e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	edc3 7a06 	vstr	s15, [r3, #24]
	dev->gyro[2] = 0.0152671755725191f * gyroRawSigned[2];
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	ee07 3a90 	vmov	s15, r3
 80014f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014f6:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800151c <IMU_GyroRead+0x214>
 80014fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	edc3 7a07 	vstr	s15, [r3, #28]

	return ret;
 8001504:	4b02      	ldr	r3, [pc, #8]	; (8001510 <IMU_GyroRead+0x208>)
 8001506:	781b      	ldrb	r3, [r3, #0]

}
 8001508:	4618      	mov	r0, r3
 800150a:	3728      	adds	r7, #40	; 0x28
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	200001fc 	.word	0x200001fc
 8001514:	20000200 	.word	0x20000200
 8001518:	20000208 	.word	0x20000208
 800151c:	3c7a232d 	.word	0x3c7a232d

08001520 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001520:	b5b0      	push	{r4, r5, r7, lr}
 8001522:	ed2d 8b02 	vpush	{d8}
 8001526:	b0b0      	sub	sp, #192	; 0xc0
 8001528:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800152a:	f000 fd9d 	bl	8002068 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800152e:	f000 f901 	bl	8001734 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001532:	f000 fa5f 	bl	80019f4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001536:	f000 fa33 	bl	80019a0 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 800153a:	f000 f987 	bl	800184c <MX_TIM6_Init>
  MX_TIM8_Init();
 800153e:	f000 f9bb 	bl	80018b8 <MX_TIM8_Init>
  MX_I2C2_Init();
 8001542:	f000 f955 	bl	80017f0 <MX_I2C2_Init>

  uint8_t status = IMU_Initialise(&imu, &hi2c2, &huart3);
 8001546:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800154a:	4a75      	ldr	r2, [pc, #468]	; (8001720 <main+0x200>)
 800154c:	4975      	ldr	r1, [pc, #468]	; (8001724 <main+0x204>)
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff fcfc 	bl	8000f4c <IMU_Initialise>
 8001554:	4603      	mov	r3, r0
 8001556:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
//  OLED_Init();
//  OLED_ShowString(10, 5, "Initializing...");
//  OLED_Refresh_Gram();

  //lab try 2//
  uint32_t millisOld = 0, millisNow = 0;
 800155a:	2300      	movs	r3, #0
 800155c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001560:	2300      	movs	r3, #0
 8001562:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  float dt, pitch_acc = 0, roll_acc = 0;
 8001566:	f04f 0300 	mov.w	r3, #0
 800156a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800156e:	f04f 0300 	mov.w	r3, #0
 8001572:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  float pitch_gyro = 0, roll_gyro = 0,yaw_gyro = 0;
 8001576:	f04f 0300 	mov.w	r3, #0
 800157a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800157e:	f04f 0300 	mov.w	r3, #0
 8001582:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001586:	f04f 0300 	mov.w	r3, #0
 800158a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //-----LED------
	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800158e:	2201      	movs	r2, #1
 8001590:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001594:	4864      	ldr	r0, [pc, #400]	; (8001728 <main+0x208>)
 8001596:	f001 f8c3 	bl	8002720 <HAL_GPIO_WritePin>
	   HAL_Delay(50);
 800159a:	2032      	movs	r0, #50	; 0x32
 800159c:	f000 fdd6 	bl	800214c <HAL_Delay>
	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80015a0:	2200      	movs	r2, #0
 80015a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015a6:	4860      	ldr	r0, [pc, #384]	; (8001728 <main+0x208>)
 80015a8:	f001 f8ba 	bl	8002720 <HAL_GPIO_WritePin>
	   HAL_Delay(50);
 80015ac:	2032      	movs	r0, #50	; 0x32
 80015ae:	f000 fdcd 	bl	800214c <HAL_Delay>


	    //lab 2 only angles WORKING!!!!//

	    // Get current time
	    uint32_t millisNow = HAL_GetTick();
 80015b2:	f000 fdbf 	bl	8002134 <HAL_GetTick>
 80015b6:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
	    float dt = (millisNow - millisOld) * 0.001f;  // Calculate time elapsed in seconds
 80015ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80015be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	ee07 3a90 	vmov	s15, r3
 80015c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015cc:	ed9f 7a57 	vldr	s14, [pc, #348]	; 800172c <main+0x20c>
 80015d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015d4:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
	    millisOld = millisNow;
 80015d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80015dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
       // Read sensor data
	    IMU_AccelRead(&imu);
 80015e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff fdcb 	bl	8001180 <IMU_AccelRead>
	    IMU_GyroRead(&imu);
 80015ea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff fe8a 	bl	8001308 <IMU_GyroRead>

	    // Calculate angles from accelerometer data
	    roll_acc = atan2 (imu.acc[0]/9.8, imu.acc[2]/9.8) *(180/M_PI);
 80015f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7fe ffa6 	bl	8000548 <__aeabi_f2d>
 80015fc:	a344      	add	r3, pc, #272	; (adr r3, 8001710 <main+0x1f0>)
 80015fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001602:	f7ff f923 	bl	800084c <__aeabi_ddiv>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	ec43 2b18 	vmov	d8, r2, r3
 800160e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001610:	4618      	mov	r0, r3
 8001612:	f7fe ff99 	bl	8000548 <__aeabi_f2d>
 8001616:	a33e      	add	r3, pc, #248	; (adr r3, 8001710 <main+0x1f0>)
 8001618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161c:	f7ff f916 	bl	800084c <__aeabi_ddiv>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	ec43 2b17 	vmov	d7, r2, r3
 8001628:	eeb0 1a47 	vmov.f32	s2, s14
 800162c:	eef0 1a67 	vmov.f32	s3, s15
 8001630:	eeb0 0a48 	vmov.f32	s0, s16
 8001634:	eef0 0a68 	vmov.f32	s1, s17
 8001638:	f006 fdf6 	bl	8008228 <atan2>
 800163c:	ec51 0b10 	vmov	r0, r1, d0
 8001640:	a335      	add	r3, pc, #212	; (adr r3, 8001718 <main+0x1f8>)
 8001642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001646:	f7fe ffd7 	bl	80005f8 <__aeabi_dmul>
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	4610      	mov	r0, r2
 8001650:	4619      	mov	r1, r3
 8001652:	f7ff faa9 	bl	8000ba8 <__aeabi_d2f>
 8001656:	4603      	mov	r3, r0
 8001658:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	    pitch_acc = atan2(imu.acc[1]/9.8, imu.acc[2]/9.8)*(180/M_PI);
 800165c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800165e:	4618      	mov	r0, r3
 8001660:	f7fe ff72 	bl	8000548 <__aeabi_f2d>
 8001664:	a32a      	add	r3, pc, #168	; (adr r3, 8001710 <main+0x1f0>)
 8001666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166a:	f7ff f8ef 	bl	800084c <__aeabi_ddiv>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	ec43 2b18 	vmov	d8, r2, r3
 8001676:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001678:	4618      	mov	r0, r3
 800167a:	f7fe ff65 	bl	8000548 <__aeabi_f2d>
 800167e:	a324      	add	r3, pc, #144	; (adr r3, 8001710 <main+0x1f0>)
 8001680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001684:	f7ff f8e2 	bl	800084c <__aeabi_ddiv>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	ec43 2b17 	vmov	d7, r2, r3
 8001690:	eeb0 1a47 	vmov.f32	s2, s14
 8001694:	eef0 1a67 	vmov.f32	s3, s15
 8001698:	eeb0 0a48 	vmov.f32	s0, s16
 800169c:	eef0 0a68 	vmov.f32	s1, s17
 80016a0:	f006 fdc2 	bl	8008228 <atan2>
 80016a4:	ec51 0b10 	vmov	r0, r1, d0
 80016a8:	a31b      	add	r3, pc, #108	; (adr r3, 8001718 <main+0x1f8>)
 80016aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ae:	f7fe ffa3 	bl	80005f8 <__aeabi_dmul>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	4610      	mov	r0, r2
 80016b8:	4619      	mov	r1, r3
 80016ba:	f7ff fa75 	bl	8000ba8 <__aeabi_d2f>
 80016be:	4603      	mov	r3, r0
 80016c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	    sprintf(sbuf, "%.2f, %.2f\r\n", pitch_acc, roll_acc);
 80016c4:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80016c8:	f7fe ff3e 	bl	8000548 <__aeabi_f2d>
 80016cc:	4604      	mov	r4, r0
 80016ce:	460d      	mov	r5, r1
 80016d0:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80016d4:	f7fe ff38 	bl	8000548 <__aeabi_f2d>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 80016e0:	e9cd 2300 	strd	r2, r3, [sp]
 80016e4:	4622      	mov	r2, r4
 80016e6:	462b      	mov	r3, r5
 80016e8:	4911      	ldr	r1, [pc, #68]	; (8001730 <main+0x210>)
 80016ea:	f004 fb1d 	bl	8005d28 <siprintf>
	    HAL_UART_Transmit(&huart3, (uint8_t*)sbuf, strlen(sbuf), HAL_MAX_DELAY);
 80016ee:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7fe fd6c 	bl	80001d0 <strlen>
 80016f8:	4603      	mov	r3, r0
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8001700:	f04f 33ff 	mov.w	r3, #4294967295
 8001704:	4806      	ldr	r0, [pc, #24]	; (8001720 <main+0x200>)
 8001706:	f003 fafe 	bl	8004d06 <HAL_UART_Transmit>
  {
 800170a:	e740      	b.n	800158e <main+0x6e>
 800170c:	f3af 8000 	nop.w
 8001710:	9999999a 	.word	0x9999999a
 8001714:	40239999 	.word	0x40239999
 8001718:	1a63c1f8 	.word	0x1a63c1f8
 800171c:	404ca5dc 	.word	0x404ca5dc
 8001720:	200002f4 	.word	0x200002f4
 8001724:	20000210 	.word	0x20000210
 8001728:	40020000 	.word	0x40020000
 800172c:	3a83126f 	.word	0x3a83126f
 8001730:	08008780 	.word	0x08008780

08001734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b094      	sub	sp, #80	; 0x50
 8001738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800173a:	f107 0320 	add.w	r3, r7, #32
 800173e:	2230      	movs	r2, #48	; 0x30
 8001740:	2100      	movs	r1, #0
 8001742:	4618      	mov	r0, r3
 8001744:	f003 fe7e 	bl	8005444 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001748:	f107 030c 	add.w	r3, r7, #12
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	60da      	str	r2, [r3, #12]
 8001756:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001758:	2300      	movs	r3, #0
 800175a:	60bb      	str	r3, [r7, #8]
 800175c:	4b22      	ldr	r3, [pc, #136]	; (80017e8 <SystemClock_Config+0xb4>)
 800175e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001760:	4a21      	ldr	r2, [pc, #132]	; (80017e8 <SystemClock_Config+0xb4>)
 8001762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001766:	6413      	str	r3, [r2, #64]	; 0x40
 8001768:	4b1f      	ldr	r3, [pc, #124]	; (80017e8 <SystemClock_Config+0xb4>)
 800176a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001770:	60bb      	str	r3, [r7, #8]
 8001772:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001774:	2300      	movs	r3, #0
 8001776:	607b      	str	r3, [r7, #4]
 8001778:	4b1c      	ldr	r3, [pc, #112]	; (80017ec <SystemClock_Config+0xb8>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a1b      	ldr	r2, [pc, #108]	; (80017ec <SystemClock_Config+0xb8>)
 800177e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001782:	6013      	str	r3, [r2, #0]
 8001784:	4b19      	ldr	r3, [pc, #100]	; (80017ec <SystemClock_Config+0xb8>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800178c:	607b      	str	r3, [r7, #4]
 800178e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001790:	2302      	movs	r3, #2
 8001792:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001794:	2301      	movs	r3, #1
 8001796:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001798:	2310      	movs	r3, #16
 800179a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800179c:	2300      	movs	r3, #0
 800179e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017a0:	f107 0320 	add.w	r3, r7, #32
 80017a4:	4618      	mov	r0, r3
 80017a6:	f001 ff95 	bl	80036d4 <HAL_RCC_OscConfig>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80017b0:	f000 fa00 	bl	8001bb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017b4:	230f      	movs	r3, #15
 80017b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80017b8:	2300      	movs	r3, #0
 80017ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017bc:	2300      	movs	r3, #0
 80017be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017c0:	2300      	movs	r3, #0
 80017c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017c4:	2300      	movs	r3, #0
 80017c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80017c8:	f107 030c 	add.w	r3, r7, #12
 80017cc:	2100      	movs	r1, #0
 80017ce:	4618      	mov	r0, r3
 80017d0:	f002 f9f8 	bl	8003bc4 <HAL_RCC_ClockConfig>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80017da:	f000 f9eb 	bl	8001bb4 <Error_Handler>
  }
}
 80017de:	bf00      	nop
 80017e0:	3750      	adds	r7, #80	; 0x50
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40023800 	.word	0x40023800
 80017ec:	40007000 	.word	0x40007000

080017f0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80017f4:	4b12      	ldr	r3, [pc, #72]	; (8001840 <MX_I2C2_Init+0x50>)
 80017f6:	4a13      	ldr	r2, [pc, #76]	; (8001844 <MX_I2C2_Init+0x54>)
 80017f8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80017fa:	4b11      	ldr	r3, [pc, #68]	; (8001840 <MX_I2C2_Init+0x50>)
 80017fc:	4a12      	ldr	r2, [pc, #72]	; (8001848 <MX_I2C2_Init+0x58>)
 80017fe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001800:	4b0f      	ldr	r3, [pc, #60]	; (8001840 <MX_I2C2_Init+0x50>)
 8001802:	2200      	movs	r2, #0
 8001804:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001806:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <MX_I2C2_Init+0x50>)
 8001808:	2200      	movs	r2, #0
 800180a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800180c:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <MX_I2C2_Init+0x50>)
 800180e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001812:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001814:	4b0a      	ldr	r3, [pc, #40]	; (8001840 <MX_I2C2_Init+0x50>)
 8001816:	2200      	movs	r2, #0
 8001818:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800181a:	4b09      	ldr	r3, [pc, #36]	; (8001840 <MX_I2C2_Init+0x50>)
 800181c:	2200      	movs	r2, #0
 800181e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001820:	4b07      	ldr	r3, [pc, #28]	; (8001840 <MX_I2C2_Init+0x50>)
 8001822:	2200      	movs	r2, #0
 8001824:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001826:	4b06      	ldr	r3, [pc, #24]	; (8001840 <MX_I2C2_Init+0x50>)
 8001828:	2200      	movs	r2, #0
 800182a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800182c:	4804      	ldr	r0, [pc, #16]	; (8001840 <MX_I2C2_Init+0x50>)
 800182e:	f000 ff91 	bl	8002754 <HAL_I2C_Init>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001838:	f000 f9bc 	bl	8001bb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800183c:	bf00      	nop
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20000210 	.word	0x20000210
 8001844:	40005800 	.word	0x40005800
 8001848:	000186a0 	.word	0x000186a0

0800184c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001852:	463b      	mov	r3, r7
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800185a:	4b15      	ldr	r3, [pc, #84]	; (80018b0 <MX_TIM6_Init+0x64>)
 800185c:	4a15      	ldr	r2, [pc, #84]	; (80018b4 <MX_TIM6_Init+0x68>)
 800185e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001860:	4b13      	ldr	r3, [pc, #76]	; (80018b0 <MX_TIM6_Init+0x64>)
 8001862:	2200      	movs	r2, #0
 8001864:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001866:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <MX_TIM6_Init+0x64>)
 8001868:	2200      	movs	r2, #0
 800186a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800186c:	4b10      	ldr	r3, [pc, #64]	; (80018b0 <MX_TIM6_Init+0x64>)
 800186e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001872:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001874:	4b0e      	ldr	r3, [pc, #56]	; (80018b0 <MX_TIM6_Init+0x64>)
 8001876:	2200      	movs	r2, #0
 8001878:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800187a:	480d      	ldr	r0, [pc, #52]	; (80018b0 <MX_TIM6_Init+0x64>)
 800187c:	f002 fb82 	bl	8003f84 <HAL_TIM_Base_Init>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001886:	f000 f995 	bl	8001bb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800188a:	2300      	movs	r3, #0
 800188c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800188e:	2300      	movs	r3, #0
 8001890:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001892:	463b      	mov	r3, r7
 8001894:	4619      	mov	r1, r3
 8001896:	4806      	ldr	r0, [pc, #24]	; (80018b0 <MX_TIM6_Init+0x64>)
 8001898:	f003 f958 	bl	8004b4c <HAL_TIMEx_MasterConfigSynchronization>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80018a2:	f000 f987 	bl	8001bb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000264 	.word	0x20000264
 80018b4:	40001000 	.word	0x40001000

080018b8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08a      	sub	sp, #40	; 0x28
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018be:	f107 0318 	add.w	r3, r7, #24
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	605a      	str	r2, [r3, #4]
 80018c8:	609a      	str	r2, [r3, #8]
 80018ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018cc:	f107 0310 	add.w	r3, r7, #16
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80018d6:	463b      	mov	r3, r7
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80018e2:	4b2d      	ldr	r3, [pc, #180]	; (8001998 <MX_TIM8_Init+0xe0>)
 80018e4:	4a2d      	ldr	r2, [pc, #180]	; (800199c <MX_TIM8_Init+0xe4>)
 80018e6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80018e8:	4b2b      	ldr	r3, [pc, #172]	; (8001998 <MX_TIM8_Init+0xe0>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ee:	4b2a      	ldr	r3, [pc, #168]	; (8001998 <MX_TIM8_Init+0xe0>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80018f4:	4b28      	ldr	r3, [pc, #160]	; (8001998 <MX_TIM8_Init+0xe0>)
 80018f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018fa:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018fc:	4b26      	ldr	r3, [pc, #152]	; (8001998 <MX_TIM8_Init+0xe0>)
 80018fe:	2200      	movs	r2, #0
 8001900:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001902:	4b25      	ldr	r3, [pc, #148]	; (8001998 <MX_TIM8_Init+0xe0>)
 8001904:	2200      	movs	r2, #0
 8001906:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001908:	4b23      	ldr	r3, [pc, #140]	; (8001998 <MX_TIM8_Init+0xe0>)
 800190a:	2200      	movs	r2, #0
 800190c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800190e:	4822      	ldr	r0, [pc, #136]	; (8001998 <MX_TIM8_Init+0xe0>)
 8001910:	f002 fb38 	bl	8003f84 <HAL_TIM_Base_Init>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 800191a:	f000 f94b 	bl	8001bb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800191e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001922:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001924:	f107 0318 	add.w	r3, r7, #24
 8001928:	4619      	mov	r1, r3
 800192a:	481b      	ldr	r0, [pc, #108]	; (8001998 <MX_TIM8_Init+0xe0>)
 800192c:	f002 fd76 	bl	800441c <HAL_TIM_ConfigClockSource>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8001936:	f000 f93d 	bl	8001bb4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 800193a:	4817      	ldr	r0, [pc, #92]	; (8001998 <MX_TIM8_Init+0xe0>)
 800193c:	f002 fb71 	bl	8004022 <HAL_TIM_IC_Init>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 8001946:	f000 f935 	bl	8001bb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800194a:	2300      	movs	r3, #0
 800194c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800194e:	2300      	movs	r3, #0
 8001950:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001952:	f107 0310 	add.w	r3, r7, #16
 8001956:	4619      	mov	r1, r3
 8001958:	480f      	ldr	r0, [pc, #60]	; (8001998 <MX_TIM8_Init+0xe0>)
 800195a:	f003 f8f7 	bl	8004b4c <HAL_TIMEx_MasterConfigSynchronization>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_TIM8_Init+0xb0>
  {
    Error_Handler();
 8001964:	f000 f926 	bl	8001bb4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001968:	230a      	movs	r3, #10
 800196a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800196c:	2301      	movs	r3, #1
 800196e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001970:	2300      	movs	r3, #0
 8001972:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001974:	2300      	movs	r3, #0
 8001976:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001978:	463b      	mov	r3, r7
 800197a:	2204      	movs	r2, #4
 800197c:	4619      	mov	r1, r3
 800197e:	4806      	ldr	r0, [pc, #24]	; (8001998 <MX_TIM8_Init+0xe0>)
 8001980:	f002 fcb0 	bl	80042e4 <HAL_TIM_IC_ConfigChannel>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 800198a:	f000 f913 	bl	8001bb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800198e:	bf00      	nop
 8001990:	3728      	adds	r7, #40	; 0x28
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	200002ac 	.word	0x200002ac
 800199c:	40010400 	.word	0x40010400

080019a0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80019a4:	4b11      	ldr	r3, [pc, #68]	; (80019ec <MX_USART3_UART_Init+0x4c>)
 80019a6:	4a12      	ldr	r2, [pc, #72]	; (80019f0 <MX_USART3_UART_Init+0x50>)
 80019a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80019aa:	4b10      	ldr	r3, [pc, #64]	; (80019ec <MX_USART3_UART_Init+0x4c>)
 80019ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019b2:	4b0e      	ldr	r3, [pc, #56]	; (80019ec <MX_USART3_UART_Init+0x4c>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019b8:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <MX_USART3_UART_Init+0x4c>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80019be:	4b0b      	ldr	r3, [pc, #44]	; (80019ec <MX_USART3_UART_Init+0x4c>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80019c4:	4b09      	ldr	r3, [pc, #36]	; (80019ec <MX_USART3_UART_Init+0x4c>)
 80019c6:	220c      	movs	r2, #12
 80019c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ca:	4b08      	ldr	r3, [pc, #32]	; (80019ec <MX_USART3_UART_Init+0x4c>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80019d0:	4b06      	ldr	r3, [pc, #24]	; (80019ec <MX_USART3_UART_Init+0x4c>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019d6:	4805      	ldr	r0, [pc, #20]	; (80019ec <MX_USART3_UART_Init+0x4c>)
 80019d8:	f003 f948 	bl	8004c6c <HAL_UART_Init>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80019e2:	f000 f8e7 	bl	8001bb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	200002f4 	.word	0x200002f4
 80019f0:	40004800 	.word	0x40004800

080019f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08a      	sub	sp, #40	; 0x28
 80019f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fa:	f107 0314 	add.w	r3, r7, #20
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	605a      	str	r2, [r3, #4]
 8001a04:	609a      	str	r2, [r3, #8]
 8001a06:	60da      	str	r2, [r3, #12]
 8001a08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	613b      	str	r3, [r7, #16]
 8001a0e:	4b3c      	ldr	r3, [pc, #240]	; (8001b00 <MX_GPIO_Init+0x10c>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	4a3b      	ldr	r2, [pc, #236]	; (8001b00 <MX_GPIO_Init+0x10c>)
 8001a14:	f043 0302 	orr.w	r3, r3, #2
 8001a18:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1a:	4b39      	ldr	r3, [pc, #228]	; (8001b00 <MX_GPIO_Init+0x10c>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	613b      	str	r3, [r7, #16]
 8001a24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	4b35      	ldr	r3, [pc, #212]	; (8001b00 <MX_GPIO_Init+0x10c>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	4a34      	ldr	r2, [pc, #208]	; (8001b00 <MX_GPIO_Init+0x10c>)
 8001a30:	f043 0308 	orr.w	r3, r3, #8
 8001a34:	6313      	str	r3, [r2, #48]	; 0x30
 8001a36:	4b32      	ldr	r3, [pc, #200]	; (8001b00 <MX_GPIO_Init+0x10c>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	f003 0308 	and.w	r3, r3, #8
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	60bb      	str	r3, [r7, #8]
 8001a46:	4b2e      	ldr	r3, [pc, #184]	; (8001b00 <MX_GPIO_Init+0x10c>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	4a2d      	ldr	r2, [pc, #180]	; (8001b00 <MX_GPIO_Init+0x10c>)
 8001a4c:	f043 0304 	orr.w	r3, r3, #4
 8001a50:	6313      	str	r3, [r2, #48]	; 0x30
 8001a52:	4b2b      	ldr	r3, [pc, #172]	; (8001b00 <MX_GPIO_Init+0x10c>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	f003 0304 	and.w	r3, r3, #4
 8001a5a:	60bb      	str	r3, [r7, #8]
 8001a5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	607b      	str	r3, [r7, #4]
 8001a62:	4b27      	ldr	r3, [pc, #156]	; (8001b00 <MX_GPIO_Init+0x10c>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	4a26      	ldr	r2, [pc, #152]	; (8001b00 <MX_GPIO_Init+0x10c>)
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6e:	4b24      	ldr	r3, [pc, #144]	; (8001b00 <MX_GPIO_Init+0x10c>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	607b      	str	r3, [r7, #4]
 8001a78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|US_Trig_Pin, GPIO_PIN_RESET);
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 8001a80:	4820      	ldr	r0, [pc, #128]	; (8001b04 <MX_GPIO_Init+0x110>)
 8001a82:	f000 fe4d 	bl	8002720 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DC_Pin|RESET__Pin|SDIN_Pin|SCLK_Pin, GPIO_PIN_RESET);
 8001a86:	2200      	movs	r2, #0
 8001a88:	f44f 41f0 	mov.w	r1, #30720	; 0x7800
 8001a8c:	481e      	ldr	r0, [pc, #120]	; (8001b08 <MX_GPIO_Init+0x114>)
 8001a8e:	f000 fe47 	bl	8002720 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Buzzer_Pin|LED_Pin, GPIO_PIN_RESET);
 8001a92:	2200      	movs	r2, #0
 8001a94:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 8001a98:	481c      	ldr	r0, [pc, #112]	; (8001b0c <MX_GPIO_Init+0x118>)
 8001a9a:	f000 fe41 	bl	8002720 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 US_Trig_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_12|US_Trig_Pin;
 8001a9e:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8001aa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aac:	2300      	movs	r3, #0
 8001aae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab0:	f107 0314 	add.w	r3, r7, #20
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4813      	ldr	r0, [pc, #76]	; (8001b04 <MX_GPIO_Init+0x110>)
 8001ab8:	f000 fc7e 	bl	80023b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DC_Pin RESET__Pin SDIN_Pin SCLK_Pin */
  GPIO_InitStruct.Pin = DC_Pin|RESET__Pin|SDIN_Pin|SCLK_Pin;
 8001abc:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8001ac0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aca:	2300      	movs	r3, #0
 8001acc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ace:	f107 0314 	add.w	r3, r7, #20
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	480c      	ldr	r0, [pc, #48]	; (8001b08 <MX_GPIO_Init+0x114>)
 8001ad6:	f000 fc6f 	bl	80023b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Buzzer_Pin LED_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin|LED_Pin;
 8001ada:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8001ade:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aec:	f107 0314 	add.w	r3, r7, #20
 8001af0:	4619      	mov	r1, r3
 8001af2:	4806      	ldr	r0, [pc, #24]	; (8001b0c <MX_GPIO_Init+0x118>)
 8001af4:	f000 fc60 	bl	80023b8 <HAL_GPIO_Init>

}
 8001af8:	bf00      	nop
 8001afa:	3728      	adds	r7, #40	; 0x28
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	40023800 	.word	0x40023800
 8001b04:	40020400 	.word	0x40020400
 8001b08:	40020c00 	.word	0x40020c00
 8001b0c:	40020000 	.word	0x40020000

08001b10 <HAL_TIM_IC_CaptureCallback>:
	__HAL_TIM_SET_COUNTER(&htim6, 0);

	while(__HAL_TIM_GET_COUNTER(&htim6) < us);
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM8) {
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a20      	ldr	r2, [pc, #128]	; (8001ba0 <HAL_TIM_IC_CaptureCallback+0x90>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d139      	bne.n	8001b96 <HAL_TIM_IC_CaptureCallback+0x86>
        GPIO_PinState pinState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7);
 8001b22:	2180      	movs	r1, #128	; 0x80
 8001b24:	481f      	ldr	r0, [pc, #124]	; (8001ba4 <HAL_TIM_IC_CaptureCallback+0x94>)
 8001b26:	f000 fde3 	bl	80026f0 <HAL_GPIO_ReadPin>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	73fb      	strb	r3, [r7, #15]

        if (pinState == GPIO_PIN_SET) {  // Positive edge
 8001b2e:	7bfb      	ldrb	r3, [r7, #15]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d108      	bne.n	8001b46 <HAL_TIM_IC_CaptureCallback+0x36>
            tc1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);  // Capture the value
 8001b34:	2104      	movs	r1, #4
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f002 fd38 	bl	80045ac <HAL_TIM_ReadCapturedValue>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	4b19      	ldr	r3, [pc, #100]	; (8001ba8 <HAL_TIM_IC_CaptureCallback+0x98>)
 8001b42:	801a      	strh	r2, [r3, #0]
            } else {
                echo = (65536 - tc1) + tc2;  // Handle overflow
            }
        }
    }
}
 8001b44:	e027      	b.n	8001b96 <HAL_TIM_IC_CaptureCallback+0x86>
        } else if (pinState == GPIO_PIN_RESET) {  // Negative edge
 8001b46:	7bfb      	ldrb	r3, [r7, #15]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d124      	bne.n	8001b96 <HAL_TIM_IC_CaptureCallback+0x86>
            tc2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);  // Capture the value
 8001b4c:	2104      	movs	r1, #4
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f002 fd2c 	bl	80045ac <HAL_TIM_ReadCapturedValue>
 8001b54:	4603      	mov	r3, r0
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	4b14      	ldr	r3, [pc, #80]	; (8001bac <HAL_TIM_IC_CaptureCallback+0x9c>)
 8001b5a:	801a      	strh	r2, [r3, #0]
            if (tc2 >= tc1) {
 8001b5c:	4b13      	ldr	r3, [pc, #76]	; (8001bac <HAL_TIM_IC_CaptureCallback+0x9c>)
 8001b5e:	881b      	ldrh	r3, [r3, #0]
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <HAL_TIM_IC_CaptureCallback+0x98>)
 8001b64:	881b      	ldrh	r3, [r3, #0]
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d30a      	bcc.n	8001b82 <HAL_TIM_IC_CaptureCallback+0x72>
                echo = tc2 - tc1;
 8001b6c:	4b0f      	ldr	r3, [pc, #60]	; (8001bac <HAL_TIM_IC_CaptureCallback+0x9c>)
 8001b6e:	881b      	ldrh	r3, [r3, #0]
 8001b70:	b29a      	uxth	r2, r3
 8001b72:	4b0d      	ldr	r3, [pc, #52]	; (8001ba8 <HAL_TIM_IC_CaptureCallback+0x98>)
 8001b74:	881b      	ldrh	r3, [r3, #0]
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	b29a      	uxth	r2, r3
 8001b7c:	4b0c      	ldr	r3, [pc, #48]	; (8001bb0 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8001b7e:	801a      	strh	r2, [r3, #0]
}
 8001b80:	e009      	b.n	8001b96 <HAL_TIM_IC_CaptureCallback+0x86>
                echo = (65536 - tc1) + tc2;  // Handle overflow
 8001b82:	4b0a      	ldr	r3, [pc, #40]	; (8001bac <HAL_TIM_IC_CaptureCallback+0x9c>)
 8001b84:	881b      	ldrh	r3, [r3, #0]
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	4b07      	ldr	r3, [pc, #28]	; (8001ba8 <HAL_TIM_IC_CaptureCallback+0x98>)
 8001b8a:	881b      	ldrh	r3, [r3, #0]
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	4b07      	ldr	r3, [pc, #28]	; (8001bb0 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8001b94:	801a      	strh	r2, [r3, #0]
}
 8001b96:	bf00      	nop
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40010400 	.word	0x40010400
 8001ba4:	40020800 	.word	0x40020800
 8001ba8:	20000338 	.word	0x20000338
 8001bac:	2000033a 	.word	0x2000033a
 8001bb0:	2000033c 	.word	0x2000033c

08001bb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bb8:	b672      	cpsid	i
}
 8001bba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bbc:	e7fe      	b.n	8001bbc <Error_Handler+0x8>
	...

08001bc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	607b      	str	r3, [r7, #4]
 8001bca:	4b10      	ldr	r3, [pc, #64]	; (8001c0c <HAL_MspInit+0x4c>)
 8001bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bce:	4a0f      	ldr	r2, [pc, #60]	; (8001c0c <HAL_MspInit+0x4c>)
 8001bd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bd6:	4b0d      	ldr	r3, [pc, #52]	; (8001c0c <HAL_MspInit+0x4c>)
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bde:	607b      	str	r3, [r7, #4]
 8001be0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	603b      	str	r3, [r7, #0]
 8001be6:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <HAL_MspInit+0x4c>)
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	4a08      	ldr	r2, [pc, #32]	; (8001c0c <HAL_MspInit+0x4c>)
 8001bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf2:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <HAL_MspInit+0x4c>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfa:	603b      	str	r3, [r7, #0]
 8001bfc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	40023800 	.word	0x40023800

08001c10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b08a      	sub	sp, #40	; 0x28
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c18:	f107 0314 	add.w	r3, r7, #20
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	609a      	str	r2, [r3, #8]
 8001c24:	60da      	str	r2, [r3, #12]
 8001c26:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a19      	ldr	r2, [pc, #100]	; (8001c94 <HAL_I2C_MspInit+0x84>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d12c      	bne.n	8001c8c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	613b      	str	r3, [r7, #16]
 8001c36:	4b18      	ldr	r3, [pc, #96]	; (8001c98 <HAL_I2C_MspInit+0x88>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	4a17      	ldr	r2, [pc, #92]	; (8001c98 <HAL_I2C_MspInit+0x88>)
 8001c3c:	f043 0302 	orr.w	r3, r3, #2
 8001c40:	6313      	str	r3, [r2, #48]	; 0x30
 8001c42:	4b15      	ldr	r3, [pc, #84]	; (8001c98 <HAL_I2C_MspInit+0x88>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	613b      	str	r3, [r7, #16]
 8001c4c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001c4e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c54:	2312      	movs	r3, #18
 8001c56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c60:	2304      	movs	r3, #4
 8001c62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c64:	f107 0314 	add.w	r3, r7, #20
 8001c68:	4619      	mov	r1, r3
 8001c6a:	480c      	ldr	r0, [pc, #48]	; (8001c9c <HAL_I2C_MspInit+0x8c>)
 8001c6c:	f000 fba4 	bl	80023b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c70:	2300      	movs	r3, #0
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	4b08      	ldr	r3, [pc, #32]	; (8001c98 <HAL_I2C_MspInit+0x88>)
 8001c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c78:	4a07      	ldr	r2, [pc, #28]	; (8001c98 <HAL_I2C_MspInit+0x88>)
 8001c7a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c7e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c80:	4b05      	ldr	r3, [pc, #20]	; (8001c98 <HAL_I2C_MspInit+0x88>)
 8001c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001c8c:	bf00      	nop
 8001c8e:	3728      	adds	r7, #40	; 0x28
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	40005800 	.word	0x40005800
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	40020400 	.word	0x40020400

08001ca0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08a      	sub	sp, #40	; 0x28
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca8:	f107 0314 	add.w	r3, r7, #20
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
 8001cb6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM6)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a27      	ldr	r2, [pc, #156]	; (8001d5c <HAL_TIM_Base_MspInit+0xbc>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d10e      	bne.n	8001ce0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	613b      	str	r3, [r7, #16]
 8001cc6:	4b26      	ldr	r3, [pc, #152]	; (8001d60 <HAL_TIM_Base_MspInit+0xc0>)
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	4a25      	ldr	r2, [pc, #148]	; (8001d60 <HAL_TIM_Base_MspInit+0xc0>)
 8001ccc:	f043 0310 	orr.w	r3, r3, #16
 8001cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd2:	4b23      	ldr	r3, [pc, #140]	; (8001d60 <HAL_TIM_Base_MspInit+0xc0>)
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	f003 0310 	and.w	r3, r3, #16
 8001cda:	613b      	str	r3, [r7, #16]
 8001cdc:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001cde:	e038      	b.n	8001d52 <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM8)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a1f      	ldr	r2, [pc, #124]	; (8001d64 <HAL_TIM_Base_MspInit+0xc4>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d133      	bne.n	8001d52 <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	4b1c      	ldr	r3, [pc, #112]	; (8001d60 <HAL_TIM_Base_MspInit+0xc0>)
 8001cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf2:	4a1b      	ldr	r2, [pc, #108]	; (8001d60 <HAL_TIM_Base_MspInit+0xc0>)
 8001cf4:	f043 0302 	orr.w	r3, r3, #2
 8001cf8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cfa:	4b19      	ldr	r3, [pc, #100]	; (8001d60 <HAL_TIM_Base_MspInit+0xc0>)
 8001cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	60bb      	str	r3, [r7, #8]
 8001d0a:	4b15      	ldr	r3, [pc, #84]	; (8001d60 <HAL_TIM_Base_MspInit+0xc0>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	4a14      	ldr	r2, [pc, #80]	; (8001d60 <HAL_TIM_Base_MspInit+0xc0>)
 8001d10:	f043 0304 	orr.w	r3, r3, #4
 8001d14:	6313      	str	r3, [r2, #48]	; 0x30
 8001d16:	4b12      	ldr	r3, [pc, #72]	; (8001d60 <HAL_TIM_Base_MspInit+0xc0>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	f003 0304 	and.w	r3, r3, #4
 8001d1e:	60bb      	str	r3, [r7, #8]
 8001d20:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = US_Echo_Pin;
 8001d22:	2380      	movs	r3, #128	; 0x80
 8001d24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d26:	2302      	movs	r3, #2
 8001d28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001d32:	2303      	movs	r3, #3
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(US_Echo_GPIO_Port, &GPIO_InitStruct);
 8001d36:	f107 0314 	add.w	r3, r7, #20
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	480a      	ldr	r0, [pc, #40]	; (8001d68 <HAL_TIM_Base_MspInit+0xc8>)
 8001d3e:	f000 fb3b 	bl	80023b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8001d42:	2200      	movs	r2, #0
 8001d44:	2100      	movs	r1, #0
 8001d46:	202e      	movs	r0, #46	; 0x2e
 8001d48:	f000 faff 	bl	800234a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8001d4c:	202e      	movs	r0, #46	; 0x2e
 8001d4e:	f000 fb18 	bl	8002382 <HAL_NVIC_EnableIRQ>
}
 8001d52:	bf00      	nop
 8001d54:	3728      	adds	r7, #40	; 0x28
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40001000 	.word	0x40001000
 8001d60:	40023800 	.word	0x40023800
 8001d64:	40010400 	.word	0x40010400
 8001d68:	40020800 	.word	0x40020800

08001d6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08a      	sub	sp, #40	; 0x28
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d74:	f107 0314 	add.w	r3, r7, #20
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a19      	ldr	r2, [pc, #100]	; (8001df0 <HAL_UART_MspInit+0x84>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d12c      	bne.n	8001de8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	613b      	str	r3, [r7, #16]
 8001d92:	4b18      	ldr	r3, [pc, #96]	; (8001df4 <HAL_UART_MspInit+0x88>)
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	4a17      	ldr	r2, [pc, #92]	; (8001df4 <HAL_UART_MspInit+0x88>)
 8001d98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d9e:	4b15      	ldr	r3, [pc, #84]	; (8001df4 <HAL_UART_MspInit+0x88>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001da6:	613b      	str	r3, [r7, #16]
 8001da8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <HAL_UART_MspInit+0x88>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	4a10      	ldr	r2, [pc, #64]	; (8001df4 <HAL_UART_MspInit+0x88>)
 8001db4:	f043 0308 	orr.w	r3, r3, #8
 8001db8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dba:	4b0e      	ldr	r3, [pc, #56]	; (8001df4 <HAL_UART_MspInit+0x88>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	f003 0308 	and.w	r3, r3, #8
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001dc6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dcc:	2302      	movs	r3, #2
 8001dce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001dd8:	2307      	movs	r3, #7
 8001dda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ddc:	f107 0314 	add.w	r3, r7, #20
 8001de0:	4619      	mov	r1, r3
 8001de2:	4805      	ldr	r0, [pc, #20]	; (8001df8 <HAL_UART_MspInit+0x8c>)
 8001de4:	f000 fae8 	bl	80023b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001de8:	bf00      	nop
 8001dea:	3728      	adds	r7, #40	; 0x28
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40004800 	.word	0x40004800
 8001df4:	40023800 	.word	0x40023800
 8001df8:	40020c00 	.word	0x40020c00

08001dfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e00:	e7fe      	b.n	8001e00 <NMI_Handler+0x4>

08001e02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e06:	e7fe      	b.n	8001e06 <HardFault_Handler+0x4>

08001e08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e0c:	e7fe      	b.n	8001e0c <MemManage_Handler+0x4>

08001e0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e12:	e7fe      	b.n	8001e12 <BusFault_Handler+0x4>

08001e14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e18:	e7fe      	b.n	8001e18 <UsageFault_Handler+0x4>

08001e1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e2c:	bf00      	nop
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e36:	b480      	push	{r7}
 8001e38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e48:	f000 f960 	bl	800210c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e4c:	bf00      	nop
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001e54:	4802      	ldr	r0, [pc, #8]	; (8001e60 <TIM8_CC_IRQHandler+0x10>)
 8001e56:	f002 f93d 	bl	80040d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	200002ac 	.word	0x200002ac

08001e64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
	return 1;
 8001e68:	2301      	movs	r3, #1
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <_kill>:

int _kill(int pid, int sig)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e7e:	f003 fab7 	bl	80053f0 <__errno>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2216      	movs	r2, #22
 8001e86:	601a      	str	r2, [r3, #0]
	return -1;
 8001e88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <_exit>:

void _exit (int status)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f7ff ffe7 	bl	8001e74 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ea6:	e7fe      	b.n	8001ea6 <_exit+0x12>

08001ea8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]
 8001eb8:	e00a      	b.n	8001ed0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001eba:	f3af 8000 	nop.w
 8001ebe:	4601      	mov	r1, r0
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	1c5a      	adds	r2, r3, #1
 8001ec4:	60ba      	str	r2, [r7, #8]
 8001ec6:	b2ca      	uxtb	r2, r1
 8001ec8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	617b      	str	r3, [r7, #20]
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	dbf0      	blt.n	8001eba <_read+0x12>
	}

return len;
 8001ed8:	687b      	ldr	r3, [r7, #4]
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3718      	adds	r7, #24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b086      	sub	sp, #24
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	60f8      	str	r0, [r7, #12]
 8001eea:	60b9      	str	r1, [r7, #8]
 8001eec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eee:	2300      	movs	r3, #0
 8001ef0:	617b      	str	r3, [r7, #20]
 8001ef2:	e009      	b.n	8001f08 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	1c5a      	adds	r2, r3, #1
 8001ef8:	60ba      	str	r2, [r7, #8]
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	3301      	adds	r3, #1
 8001f06:	617b      	str	r3, [r7, #20]
 8001f08:	697a      	ldr	r2, [r7, #20]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	dbf1      	blt.n	8001ef4 <_write+0x12>
	}
	return len;
 8001f10:	687b      	ldr	r3, [r7, #4]
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3718      	adds	r7, #24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <_close>:

int _close(int file)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b083      	sub	sp, #12
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
	return -1;
 8001f22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b083      	sub	sp, #12
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
 8001f3a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f42:	605a      	str	r2, [r3, #4]
	return 0;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <_isatty>:

int _isatty(int file)
{
 8001f52:	b480      	push	{r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
	return 1;
 8001f5a:	2301      	movs	r3, #1
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
	return 0;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3714      	adds	r7, #20
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
	...

08001f84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f8c:	4a14      	ldr	r2, [pc, #80]	; (8001fe0 <_sbrk+0x5c>)
 8001f8e:	4b15      	ldr	r3, [pc, #84]	; (8001fe4 <_sbrk+0x60>)
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f98:	4b13      	ldr	r3, [pc, #76]	; (8001fe8 <_sbrk+0x64>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d102      	bne.n	8001fa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fa0:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <_sbrk+0x64>)
 8001fa2:	4a12      	ldr	r2, [pc, #72]	; (8001fec <_sbrk+0x68>)
 8001fa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fa6:	4b10      	ldr	r3, [pc, #64]	; (8001fe8 <_sbrk+0x64>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4413      	add	r3, r2
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d207      	bcs.n	8001fc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fb4:	f003 fa1c 	bl	80053f0 <__errno>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	220c      	movs	r2, #12
 8001fbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc2:	e009      	b.n	8001fd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fc4:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <_sbrk+0x64>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fca:	4b07      	ldr	r3, [pc, #28]	; (8001fe8 <_sbrk+0x64>)
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	4a05      	ldr	r2, [pc, #20]	; (8001fe8 <_sbrk+0x64>)
 8001fd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	20020000 	.word	0x20020000
 8001fe4:	00000400 	.word	0x00000400
 8001fe8:	20000340 	.word	0x20000340
 8001fec:	20000358 	.word	0x20000358

08001ff0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ff4:	4b06      	ldr	r3, [pc, #24]	; (8002010 <SystemInit+0x20>)
 8001ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ffa:	4a05      	ldr	r2, [pc, #20]	; (8002010 <SystemInit+0x20>)
 8001ffc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002000:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002004:	bf00      	nop
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	e000ed00 	.word	0xe000ed00

08002014 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002014:	f8df d034 	ldr.w	sp, [pc, #52]	; 800204c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002018:	480d      	ldr	r0, [pc, #52]	; (8002050 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800201a:	490e      	ldr	r1, [pc, #56]	; (8002054 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800201c:	4a0e      	ldr	r2, [pc, #56]	; (8002058 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800201e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002020:	e002      	b.n	8002028 <LoopCopyDataInit>

08002022 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002022:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002024:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002026:	3304      	adds	r3, #4

08002028 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002028:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800202a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800202c:	d3f9      	bcc.n	8002022 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800202e:	4a0b      	ldr	r2, [pc, #44]	; (800205c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002030:	4c0b      	ldr	r4, [pc, #44]	; (8002060 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002032:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002034:	e001      	b.n	800203a <LoopFillZerobss>

08002036 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002036:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002038:	3204      	adds	r2, #4

0800203a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800203a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800203c:	d3fb      	bcc.n	8002036 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800203e:	f7ff ffd7 	bl	8001ff0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002042:	f003 f9db 	bl	80053fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002046:	f7ff fa6b 	bl	8001520 <main>
  bx  lr    
 800204a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800204c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002050:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002054:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002058:	08008c08 	.word	0x08008c08
  ldr r2, =_sbss
 800205c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002060:	20000358 	.word	0x20000358

08002064 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002064:	e7fe      	b.n	8002064 <ADC_IRQHandler>
	...

08002068 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800206c:	4b0e      	ldr	r3, [pc, #56]	; (80020a8 <HAL_Init+0x40>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a0d      	ldr	r2, [pc, #52]	; (80020a8 <HAL_Init+0x40>)
 8002072:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002076:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002078:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <HAL_Init+0x40>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a0a      	ldr	r2, [pc, #40]	; (80020a8 <HAL_Init+0x40>)
 800207e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002082:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002084:	4b08      	ldr	r3, [pc, #32]	; (80020a8 <HAL_Init+0x40>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a07      	ldr	r2, [pc, #28]	; (80020a8 <HAL_Init+0x40>)
 800208a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800208e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002090:	2003      	movs	r0, #3
 8002092:	f000 f94f 	bl	8002334 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002096:	200f      	movs	r0, #15
 8002098:	f000 f808 	bl	80020ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800209c:	f7ff fd90 	bl	8001bc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40023c00 	.word	0x40023c00

080020ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020b4:	4b12      	ldr	r3, [pc, #72]	; (8002100 <HAL_InitTick+0x54>)
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	4b12      	ldr	r3, [pc, #72]	; (8002104 <HAL_InitTick+0x58>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	4619      	mov	r1, r3
 80020be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80020c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ca:	4618      	mov	r0, r3
 80020cc:	f000 f967 	bl	800239e <HAL_SYSTICK_Config>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e00e      	b.n	80020f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2b0f      	cmp	r3, #15
 80020de:	d80a      	bhi.n	80020f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020e0:	2200      	movs	r2, #0
 80020e2:	6879      	ldr	r1, [r7, #4]
 80020e4:	f04f 30ff 	mov.w	r0, #4294967295
 80020e8:	f000 f92f 	bl	800234a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020ec:	4a06      	ldr	r2, [pc, #24]	; (8002108 <HAL_InitTick+0x5c>)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
 80020f4:	e000      	b.n	80020f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	20000004 	.word	0x20000004
 8002104:	2000000c 	.word	0x2000000c
 8002108:	20000008 	.word	0x20000008

0800210c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002110:	4b06      	ldr	r3, [pc, #24]	; (800212c <HAL_IncTick+0x20>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	461a      	mov	r2, r3
 8002116:	4b06      	ldr	r3, [pc, #24]	; (8002130 <HAL_IncTick+0x24>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4413      	add	r3, r2
 800211c:	4a04      	ldr	r2, [pc, #16]	; (8002130 <HAL_IncTick+0x24>)
 800211e:	6013      	str	r3, [r2, #0]
}
 8002120:	bf00      	nop
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	2000000c 	.word	0x2000000c
 8002130:	20000344 	.word	0x20000344

08002134 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  return uwTick;
 8002138:	4b03      	ldr	r3, [pc, #12]	; (8002148 <HAL_GetTick+0x14>)
 800213a:	681b      	ldr	r3, [r3, #0]
}
 800213c:	4618      	mov	r0, r3
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	20000344 	.word	0x20000344

0800214c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002154:	f7ff ffee 	bl	8002134 <HAL_GetTick>
 8002158:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002164:	d005      	beq.n	8002172 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002166:	4b0a      	ldr	r3, [pc, #40]	; (8002190 <HAL_Delay+0x44>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	461a      	mov	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	4413      	add	r3, r2
 8002170:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002172:	bf00      	nop
 8002174:	f7ff ffde 	bl	8002134 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	429a      	cmp	r2, r3
 8002182:	d8f7      	bhi.n	8002174 <HAL_Delay+0x28>
  {
  }
}
 8002184:	bf00      	nop
 8002186:	bf00      	nop
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	2000000c 	.word	0x2000000c

08002194 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021a4:	4b0c      	ldr	r3, [pc, #48]	; (80021d8 <__NVIC_SetPriorityGrouping+0x44>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021aa:	68ba      	ldr	r2, [r7, #8]
 80021ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021b0:	4013      	ands	r3, r2
 80021b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021c6:	4a04      	ldr	r2, [pc, #16]	; (80021d8 <__NVIC_SetPriorityGrouping+0x44>)
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	60d3      	str	r3, [r2, #12]
}
 80021cc:	bf00      	nop
 80021ce:	3714      	adds	r7, #20
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	e000ed00 	.word	0xe000ed00

080021dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021e0:	4b04      	ldr	r3, [pc, #16]	; (80021f4 <__NVIC_GetPriorityGrouping+0x18>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	0a1b      	lsrs	r3, r3, #8
 80021e6:	f003 0307 	and.w	r3, r3, #7
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	e000ed00 	.word	0xe000ed00

080021f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	4603      	mov	r3, r0
 8002200:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002206:	2b00      	cmp	r3, #0
 8002208:	db0b      	blt.n	8002222 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800220a:	79fb      	ldrb	r3, [r7, #7]
 800220c:	f003 021f 	and.w	r2, r3, #31
 8002210:	4907      	ldr	r1, [pc, #28]	; (8002230 <__NVIC_EnableIRQ+0x38>)
 8002212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002216:	095b      	lsrs	r3, r3, #5
 8002218:	2001      	movs	r0, #1
 800221a:	fa00 f202 	lsl.w	r2, r0, r2
 800221e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	e000e100 	.word	0xe000e100

08002234 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	6039      	str	r1, [r7, #0]
 800223e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002244:	2b00      	cmp	r3, #0
 8002246:	db0a      	blt.n	800225e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	b2da      	uxtb	r2, r3
 800224c:	490c      	ldr	r1, [pc, #48]	; (8002280 <__NVIC_SetPriority+0x4c>)
 800224e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002252:	0112      	lsls	r2, r2, #4
 8002254:	b2d2      	uxtb	r2, r2
 8002256:	440b      	add	r3, r1
 8002258:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800225c:	e00a      	b.n	8002274 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	b2da      	uxtb	r2, r3
 8002262:	4908      	ldr	r1, [pc, #32]	; (8002284 <__NVIC_SetPriority+0x50>)
 8002264:	79fb      	ldrb	r3, [r7, #7]
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	3b04      	subs	r3, #4
 800226c:	0112      	lsls	r2, r2, #4
 800226e:	b2d2      	uxtb	r2, r2
 8002270:	440b      	add	r3, r1
 8002272:	761a      	strb	r2, [r3, #24]
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	e000e100 	.word	0xe000e100
 8002284:	e000ed00 	.word	0xe000ed00

08002288 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002288:	b480      	push	{r7}
 800228a:	b089      	sub	sp, #36	; 0x24
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	f1c3 0307 	rsb	r3, r3, #7
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	bf28      	it	cs
 80022a6:	2304      	movcs	r3, #4
 80022a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	3304      	adds	r3, #4
 80022ae:	2b06      	cmp	r3, #6
 80022b0:	d902      	bls.n	80022b8 <NVIC_EncodePriority+0x30>
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	3b03      	subs	r3, #3
 80022b6:	e000      	b.n	80022ba <NVIC_EncodePriority+0x32>
 80022b8:	2300      	movs	r3, #0
 80022ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022bc:	f04f 32ff 	mov.w	r2, #4294967295
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	43da      	mvns	r2, r3
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	401a      	ands	r2, r3
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022d0:	f04f 31ff 	mov.w	r1, #4294967295
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	fa01 f303 	lsl.w	r3, r1, r3
 80022da:	43d9      	mvns	r1, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e0:	4313      	orrs	r3, r2
         );
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3724      	adds	r7, #36	; 0x24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
	...

080022f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3b01      	subs	r3, #1
 80022fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002300:	d301      	bcc.n	8002306 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002302:	2301      	movs	r3, #1
 8002304:	e00f      	b.n	8002326 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002306:	4a0a      	ldr	r2, [pc, #40]	; (8002330 <SysTick_Config+0x40>)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3b01      	subs	r3, #1
 800230c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800230e:	210f      	movs	r1, #15
 8002310:	f04f 30ff 	mov.w	r0, #4294967295
 8002314:	f7ff ff8e 	bl	8002234 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002318:	4b05      	ldr	r3, [pc, #20]	; (8002330 <SysTick_Config+0x40>)
 800231a:	2200      	movs	r2, #0
 800231c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800231e:	4b04      	ldr	r3, [pc, #16]	; (8002330 <SysTick_Config+0x40>)
 8002320:	2207      	movs	r2, #7
 8002322:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	e000e010 	.word	0xe000e010

08002334 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f7ff ff29 	bl	8002194 <__NVIC_SetPriorityGrouping>
}
 8002342:	bf00      	nop
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800234a:	b580      	push	{r7, lr}
 800234c:	b086      	sub	sp, #24
 800234e:	af00      	add	r7, sp, #0
 8002350:	4603      	mov	r3, r0
 8002352:	60b9      	str	r1, [r7, #8]
 8002354:	607a      	str	r2, [r7, #4]
 8002356:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002358:	2300      	movs	r3, #0
 800235a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800235c:	f7ff ff3e 	bl	80021dc <__NVIC_GetPriorityGrouping>
 8002360:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	68b9      	ldr	r1, [r7, #8]
 8002366:	6978      	ldr	r0, [r7, #20]
 8002368:	f7ff ff8e 	bl	8002288 <NVIC_EncodePriority>
 800236c:	4602      	mov	r2, r0
 800236e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002372:	4611      	mov	r1, r2
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff ff5d 	bl	8002234 <__NVIC_SetPriority>
}
 800237a:	bf00      	nop
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b082      	sub	sp, #8
 8002386:	af00      	add	r7, sp, #0
 8002388:	4603      	mov	r3, r0
 800238a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800238c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff ff31 	bl	80021f8 <__NVIC_EnableIRQ>
}
 8002396:	bf00      	nop
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b082      	sub	sp, #8
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7ff ffa2 	bl	80022f0 <SysTick_Config>
 80023ac:	4603      	mov	r3, r0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
	...

080023b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b089      	sub	sp, #36	; 0x24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023c2:	2300      	movs	r3, #0
 80023c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023c6:	2300      	movs	r3, #0
 80023c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023ca:	2300      	movs	r3, #0
 80023cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023ce:	2300      	movs	r3, #0
 80023d0:	61fb      	str	r3, [r7, #28]
 80023d2:	e16b      	b.n	80026ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023d4:	2201      	movs	r2, #1
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	4013      	ands	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	f040 815a 	bne.w	80026a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f003 0303 	and.w	r3, r3, #3
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d005      	beq.n	800240a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002406:	2b02      	cmp	r3, #2
 8002408:	d130      	bne.n	800246c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	2203      	movs	r2, #3
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	43db      	mvns	r3, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4013      	ands	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	68da      	ldr	r2, [r3, #12]
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	4313      	orrs	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002440:	2201      	movs	r2, #1
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	43db      	mvns	r3, r3
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4013      	ands	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	091b      	lsrs	r3, r3, #4
 8002456:	f003 0201 	and.w	r2, r3, #1
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	4313      	orrs	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f003 0303 	and.w	r3, r3, #3
 8002474:	2b03      	cmp	r3, #3
 8002476:	d017      	beq.n	80024a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	2203      	movs	r2, #3
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	43db      	mvns	r3, r3
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4013      	ands	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	4313      	orrs	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f003 0303 	and.w	r3, r3, #3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d123      	bne.n	80024fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	08da      	lsrs	r2, r3, #3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3208      	adds	r2, #8
 80024bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	220f      	movs	r2, #15
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	43db      	mvns	r3, r3
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	4013      	ands	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	691a      	ldr	r2, [r3, #16]
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	f003 0307 	and.w	r3, r3, #7
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	08da      	lsrs	r2, r3, #3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	3208      	adds	r2, #8
 80024f6:	69b9      	ldr	r1, [r7, #24]
 80024f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	2203      	movs	r2, #3
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	43db      	mvns	r3, r3
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4013      	ands	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f003 0203 	and.w	r2, r3, #3
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4313      	orrs	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002538:	2b00      	cmp	r3, #0
 800253a:	f000 80b4 	beq.w	80026a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800253e:	2300      	movs	r3, #0
 8002540:	60fb      	str	r3, [r7, #12]
 8002542:	4b60      	ldr	r3, [pc, #384]	; (80026c4 <HAL_GPIO_Init+0x30c>)
 8002544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002546:	4a5f      	ldr	r2, [pc, #380]	; (80026c4 <HAL_GPIO_Init+0x30c>)
 8002548:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800254c:	6453      	str	r3, [r2, #68]	; 0x44
 800254e:	4b5d      	ldr	r3, [pc, #372]	; (80026c4 <HAL_GPIO_Init+0x30c>)
 8002550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002556:	60fb      	str	r3, [r7, #12]
 8002558:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800255a:	4a5b      	ldr	r2, [pc, #364]	; (80026c8 <HAL_GPIO_Init+0x310>)
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	089b      	lsrs	r3, r3, #2
 8002560:	3302      	adds	r3, #2
 8002562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002566:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	f003 0303 	and.w	r3, r3, #3
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	220f      	movs	r2, #15
 8002572:	fa02 f303 	lsl.w	r3, r2, r3
 8002576:	43db      	mvns	r3, r3
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	4013      	ands	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a52      	ldr	r2, [pc, #328]	; (80026cc <HAL_GPIO_Init+0x314>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d02b      	beq.n	80025de <HAL_GPIO_Init+0x226>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a51      	ldr	r2, [pc, #324]	; (80026d0 <HAL_GPIO_Init+0x318>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d025      	beq.n	80025da <HAL_GPIO_Init+0x222>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a50      	ldr	r2, [pc, #320]	; (80026d4 <HAL_GPIO_Init+0x31c>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d01f      	beq.n	80025d6 <HAL_GPIO_Init+0x21e>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a4f      	ldr	r2, [pc, #316]	; (80026d8 <HAL_GPIO_Init+0x320>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d019      	beq.n	80025d2 <HAL_GPIO_Init+0x21a>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a4e      	ldr	r2, [pc, #312]	; (80026dc <HAL_GPIO_Init+0x324>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d013      	beq.n	80025ce <HAL_GPIO_Init+0x216>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a4d      	ldr	r2, [pc, #308]	; (80026e0 <HAL_GPIO_Init+0x328>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d00d      	beq.n	80025ca <HAL_GPIO_Init+0x212>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a4c      	ldr	r2, [pc, #304]	; (80026e4 <HAL_GPIO_Init+0x32c>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d007      	beq.n	80025c6 <HAL_GPIO_Init+0x20e>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a4b      	ldr	r2, [pc, #300]	; (80026e8 <HAL_GPIO_Init+0x330>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d101      	bne.n	80025c2 <HAL_GPIO_Init+0x20a>
 80025be:	2307      	movs	r3, #7
 80025c0:	e00e      	b.n	80025e0 <HAL_GPIO_Init+0x228>
 80025c2:	2308      	movs	r3, #8
 80025c4:	e00c      	b.n	80025e0 <HAL_GPIO_Init+0x228>
 80025c6:	2306      	movs	r3, #6
 80025c8:	e00a      	b.n	80025e0 <HAL_GPIO_Init+0x228>
 80025ca:	2305      	movs	r3, #5
 80025cc:	e008      	b.n	80025e0 <HAL_GPIO_Init+0x228>
 80025ce:	2304      	movs	r3, #4
 80025d0:	e006      	b.n	80025e0 <HAL_GPIO_Init+0x228>
 80025d2:	2303      	movs	r3, #3
 80025d4:	e004      	b.n	80025e0 <HAL_GPIO_Init+0x228>
 80025d6:	2302      	movs	r3, #2
 80025d8:	e002      	b.n	80025e0 <HAL_GPIO_Init+0x228>
 80025da:	2301      	movs	r3, #1
 80025dc:	e000      	b.n	80025e0 <HAL_GPIO_Init+0x228>
 80025de:	2300      	movs	r3, #0
 80025e0:	69fa      	ldr	r2, [r7, #28]
 80025e2:	f002 0203 	and.w	r2, r2, #3
 80025e6:	0092      	lsls	r2, r2, #2
 80025e8:	4093      	lsls	r3, r2
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025f0:	4935      	ldr	r1, [pc, #212]	; (80026c8 <HAL_GPIO_Init+0x310>)
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	089b      	lsrs	r3, r3, #2
 80025f6:	3302      	adds	r3, #2
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025fe:	4b3b      	ldr	r3, [pc, #236]	; (80026ec <HAL_GPIO_Init+0x334>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	43db      	mvns	r3, r3
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	4013      	ands	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	4313      	orrs	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002622:	4a32      	ldr	r2, [pc, #200]	; (80026ec <HAL_GPIO_Init+0x334>)
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002628:	4b30      	ldr	r3, [pc, #192]	; (80026ec <HAL_GPIO_Init+0x334>)
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	43db      	mvns	r3, r3
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	4013      	ands	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d003      	beq.n	800264c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	4313      	orrs	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800264c:	4a27      	ldr	r2, [pc, #156]	; (80026ec <HAL_GPIO_Init+0x334>)
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002652:	4b26      	ldr	r3, [pc, #152]	; (80026ec <HAL_GPIO_Init+0x334>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	43db      	mvns	r3, r3
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	4013      	ands	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	4313      	orrs	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002676:	4a1d      	ldr	r2, [pc, #116]	; (80026ec <HAL_GPIO_Init+0x334>)
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800267c:	4b1b      	ldr	r3, [pc, #108]	; (80026ec <HAL_GPIO_Init+0x334>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	43db      	mvns	r3, r3
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	4013      	ands	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d003      	beq.n	80026a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	4313      	orrs	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026a0:	4a12      	ldr	r2, [pc, #72]	; (80026ec <HAL_GPIO_Init+0x334>)
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	3301      	adds	r3, #1
 80026aa:	61fb      	str	r3, [r7, #28]
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	2b0f      	cmp	r3, #15
 80026b0:	f67f ae90 	bls.w	80023d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026b4:	bf00      	nop
 80026b6:	bf00      	nop
 80026b8:	3724      	adds	r7, #36	; 0x24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	40023800 	.word	0x40023800
 80026c8:	40013800 	.word	0x40013800
 80026cc:	40020000 	.word	0x40020000
 80026d0:	40020400 	.word	0x40020400
 80026d4:	40020800 	.word	0x40020800
 80026d8:	40020c00 	.word	0x40020c00
 80026dc:	40021000 	.word	0x40021000
 80026e0:	40021400 	.word	0x40021400
 80026e4:	40021800 	.word	0x40021800
 80026e8:	40021c00 	.word	0x40021c00
 80026ec:	40013c00 	.word	0x40013c00

080026f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	460b      	mov	r3, r1
 80026fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	691a      	ldr	r2, [r3, #16]
 8002700:	887b      	ldrh	r3, [r7, #2]
 8002702:	4013      	ands	r3, r2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d002      	beq.n	800270e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002708:	2301      	movs	r3, #1
 800270a:	73fb      	strb	r3, [r7, #15]
 800270c:	e001      	b.n	8002712 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800270e:	2300      	movs	r3, #0
 8002710:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002712:	7bfb      	ldrb	r3, [r7, #15]
}
 8002714:	4618      	mov	r0, r3
 8002716:	3714      	adds	r7, #20
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	460b      	mov	r3, r1
 800272a:	807b      	strh	r3, [r7, #2]
 800272c:	4613      	mov	r3, r2
 800272e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002730:	787b      	ldrb	r3, [r7, #1]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d003      	beq.n	800273e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002736:	887a      	ldrh	r2, [r7, #2]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800273c:	e003      	b.n	8002746 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800273e:	887b      	ldrh	r3, [r7, #2]
 8002740:	041a      	lsls	r2, r3, #16
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	619a      	str	r2, [r3, #24]
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
	...

08002754 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e12b      	b.n	80029be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d106      	bne.n	8002780 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f7ff fa48 	bl	8001c10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2224      	movs	r2, #36	; 0x24
 8002784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f022 0201 	bic.w	r2, r2, #1
 8002796:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027b8:	f001 fbbc 	bl	8003f34 <HAL_RCC_GetPCLK1Freq>
 80027bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	4a81      	ldr	r2, [pc, #516]	; (80029c8 <HAL_I2C_Init+0x274>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d807      	bhi.n	80027d8 <HAL_I2C_Init+0x84>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	4a80      	ldr	r2, [pc, #512]	; (80029cc <HAL_I2C_Init+0x278>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	bf94      	ite	ls
 80027d0:	2301      	movls	r3, #1
 80027d2:	2300      	movhi	r3, #0
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	e006      	b.n	80027e6 <HAL_I2C_Init+0x92>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	4a7d      	ldr	r2, [pc, #500]	; (80029d0 <HAL_I2C_Init+0x27c>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	bf94      	ite	ls
 80027e0:	2301      	movls	r3, #1
 80027e2:	2300      	movhi	r3, #0
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e0e7      	b.n	80029be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	4a78      	ldr	r2, [pc, #480]	; (80029d4 <HAL_I2C_Init+0x280>)
 80027f2:	fba2 2303 	umull	r2, r3, r2, r3
 80027f6:	0c9b      	lsrs	r3, r3, #18
 80027f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68ba      	ldr	r2, [r7, #8]
 800280a:	430a      	orrs	r2, r1
 800280c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	4a6a      	ldr	r2, [pc, #424]	; (80029c8 <HAL_I2C_Init+0x274>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d802      	bhi.n	8002828 <HAL_I2C_Init+0xd4>
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	3301      	adds	r3, #1
 8002826:	e009      	b.n	800283c <HAL_I2C_Init+0xe8>
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800282e:	fb02 f303 	mul.w	r3, r2, r3
 8002832:	4a69      	ldr	r2, [pc, #420]	; (80029d8 <HAL_I2C_Init+0x284>)
 8002834:	fba2 2303 	umull	r2, r3, r2, r3
 8002838:	099b      	lsrs	r3, r3, #6
 800283a:	3301      	adds	r3, #1
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	6812      	ldr	r2, [r2, #0]
 8002840:	430b      	orrs	r3, r1
 8002842:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	69db      	ldr	r3, [r3, #28]
 800284a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800284e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	495c      	ldr	r1, [pc, #368]	; (80029c8 <HAL_I2C_Init+0x274>)
 8002858:	428b      	cmp	r3, r1
 800285a:	d819      	bhi.n	8002890 <HAL_I2C_Init+0x13c>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	1e59      	subs	r1, r3, #1
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	fbb1 f3f3 	udiv	r3, r1, r3
 800286a:	1c59      	adds	r1, r3, #1
 800286c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002870:	400b      	ands	r3, r1
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00a      	beq.n	800288c <HAL_I2C_Init+0x138>
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	1e59      	subs	r1, r3, #1
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	fbb1 f3f3 	udiv	r3, r1, r3
 8002884:	3301      	adds	r3, #1
 8002886:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800288a:	e051      	b.n	8002930 <HAL_I2C_Init+0x1dc>
 800288c:	2304      	movs	r3, #4
 800288e:	e04f      	b.n	8002930 <HAL_I2C_Init+0x1dc>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d111      	bne.n	80028bc <HAL_I2C_Init+0x168>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	1e58      	subs	r0, r3, #1
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6859      	ldr	r1, [r3, #4]
 80028a0:	460b      	mov	r3, r1
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	440b      	add	r3, r1
 80028a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80028aa:	3301      	adds	r3, #1
 80028ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	bf0c      	ite	eq
 80028b4:	2301      	moveq	r3, #1
 80028b6:	2300      	movne	r3, #0
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	e012      	b.n	80028e2 <HAL_I2C_Init+0x18e>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	1e58      	subs	r0, r3, #1
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6859      	ldr	r1, [r3, #4]
 80028c4:	460b      	mov	r3, r1
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	440b      	add	r3, r1
 80028ca:	0099      	lsls	r1, r3, #2
 80028cc:	440b      	add	r3, r1
 80028ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80028d2:	3301      	adds	r3, #1
 80028d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028d8:	2b00      	cmp	r3, #0
 80028da:	bf0c      	ite	eq
 80028dc:	2301      	moveq	r3, #1
 80028de:	2300      	movne	r3, #0
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <HAL_I2C_Init+0x196>
 80028e6:	2301      	movs	r3, #1
 80028e8:	e022      	b.n	8002930 <HAL_I2C_Init+0x1dc>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10e      	bne.n	8002910 <HAL_I2C_Init+0x1bc>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	1e58      	subs	r0, r3, #1
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6859      	ldr	r1, [r3, #4]
 80028fa:	460b      	mov	r3, r1
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	440b      	add	r3, r1
 8002900:	fbb0 f3f3 	udiv	r3, r0, r3
 8002904:	3301      	adds	r3, #1
 8002906:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800290a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800290e:	e00f      	b.n	8002930 <HAL_I2C_Init+0x1dc>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	1e58      	subs	r0, r3, #1
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6859      	ldr	r1, [r3, #4]
 8002918:	460b      	mov	r3, r1
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	440b      	add	r3, r1
 800291e:	0099      	lsls	r1, r3, #2
 8002920:	440b      	add	r3, r1
 8002922:	fbb0 f3f3 	udiv	r3, r0, r3
 8002926:	3301      	adds	r3, #1
 8002928:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800292c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002930:	6879      	ldr	r1, [r7, #4]
 8002932:	6809      	ldr	r1, [r1, #0]
 8002934:	4313      	orrs	r3, r2
 8002936:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	69da      	ldr	r2, [r3, #28]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a1b      	ldr	r3, [r3, #32]
 800294a:	431a      	orrs	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	430a      	orrs	r2, r1
 8002952:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800295e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	6911      	ldr	r1, [r2, #16]
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	68d2      	ldr	r2, [r2, #12]
 800296a:	4311      	orrs	r1, r2
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	6812      	ldr	r2, [r2, #0]
 8002970:	430b      	orrs	r3, r1
 8002972:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	695a      	ldr	r2, [r3, #20]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	431a      	orrs	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	430a      	orrs	r2, r1
 800298e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f042 0201 	orr.w	r2, r2, #1
 800299e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2220      	movs	r2, #32
 80029aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	000186a0 	.word	0x000186a0
 80029cc:	001e847f 	.word	0x001e847f
 80029d0:	003d08ff 	.word	0x003d08ff
 80029d4:	431bde83 	.word	0x431bde83
 80029d8:	10624dd3 	.word	0x10624dd3

080029dc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b088      	sub	sp, #32
 80029e0:	af02      	add	r7, sp, #8
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	4608      	mov	r0, r1
 80029e6:	4611      	mov	r1, r2
 80029e8:	461a      	mov	r2, r3
 80029ea:	4603      	mov	r3, r0
 80029ec:	817b      	strh	r3, [r7, #10]
 80029ee:	460b      	mov	r3, r1
 80029f0:	813b      	strh	r3, [r7, #8]
 80029f2:	4613      	mov	r3, r2
 80029f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029f6:	f7ff fb9d 	bl	8002134 <HAL_GetTick>
 80029fa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2b20      	cmp	r3, #32
 8002a06:	f040 80d9 	bne.w	8002bbc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	2319      	movs	r3, #25
 8002a10:	2201      	movs	r2, #1
 8002a12:	496d      	ldr	r1, [pc, #436]	; (8002bc8 <HAL_I2C_Mem_Write+0x1ec>)
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	f000 fc7f 	bl	8003318 <I2C_WaitOnFlagUntilTimeout>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002a20:	2302      	movs	r3, #2
 8002a22:	e0cc      	b.n	8002bbe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d101      	bne.n	8002a32 <HAL_I2C_Mem_Write+0x56>
 8002a2e:	2302      	movs	r3, #2
 8002a30:	e0c5      	b.n	8002bbe <HAL_I2C_Mem_Write+0x1e2>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2201      	movs	r2, #1
 8002a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d007      	beq.n	8002a58 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f042 0201 	orr.w	r2, r2, #1
 8002a56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2221      	movs	r2, #33	; 0x21
 8002a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2240      	movs	r2, #64	; 0x40
 8002a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6a3a      	ldr	r2, [r7, #32]
 8002a82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	4a4d      	ldr	r2, [pc, #308]	; (8002bcc <HAL_I2C_Mem_Write+0x1f0>)
 8002a98:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a9a:	88f8      	ldrh	r0, [r7, #6]
 8002a9c:	893a      	ldrh	r2, [r7, #8]
 8002a9e:	8979      	ldrh	r1, [r7, #10]
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	9301      	str	r3, [sp, #4]
 8002aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa6:	9300      	str	r3, [sp, #0]
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	68f8      	ldr	r0, [r7, #12]
 8002aac:	f000 fab6 	bl	800301c <I2C_RequestMemoryWrite>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d052      	beq.n	8002b5c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e081      	b.n	8002bbe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f000 fd00 	bl	80034c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00d      	beq.n	8002ae6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	d107      	bne.n	8002ae2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ae0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e06b      	b.n	8002bbe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aea:	781a      	ldrb	r2, [r3, #0]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af6:	1c5a      	adds	r2, r3, #1
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b00:	3b01      	subs	r3, #1
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	695b      	ldr	r3, [r3, #20]
 8002b1c:	f003 0304 	and.w	r3, r3, #4
 8002b20:	2b04      	cmp	r3, #4
 8002b22:	d11b      	bne.n	8002b5c <HAL_I2C_Mem_Write+0x180>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d017      	beq.n	8002b5c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b30:	781a      	ldrb	r2, [r3, #0]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3c:	1c5a      	adds	r2, r3, #1
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b46:	3b01      	subs	r3, #1
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	3b01      	subs	r3, #1
 8002b56:	b29a      	uxth	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d1aa      	bne.n	8002aba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f000 fcec 	bl	8003546 <I2C_WaitOnBTFFlagUntilTimeout>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00d      	beq.n	8002b90 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b78:	2b04      	cmp	r3, #4
 8002b7a:	d107      	bne.n	8002b8c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b8a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e016      	b.n	8002bbe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	e000      	b.n	8002bbe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002bbc:	2302      	movs	r3, #2
  }
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3718      	adds	r7, #24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	00100002 	.word	0x00100002
 8002bcc:	ffff0000 	.word	0xffff0000

08002bd0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b08c      	sub	sp, #48	; 0x30
 8002bd4:	af02      	add	r7, sp, #8
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	4608      	mov	r0, r1
 8002bda:	4611      	mov	r1, r2
 8002bdc:	461a      	mov	r2, r3
 8002bde:	4603      	mov	r3, r0
 8002be0:	817b      	strh	r3, [r7, #10]
 8002be2:	460b      	mov	r3, r1
 8002be4:	813b      	strh	r3, [r7, #8]
 8002be6:	4613      	mov	r3, r2
 8002be8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bea:	f7ff faa3 	bl	8002134 <HAL_GetTick>
 8002bee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	2b20      	cmp	r3, #32
 8002bfa:	f040 8208 	bne.w	800300e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	2319      	movs	r3, #25
 8002c04:	2201      	movs	r2, #1
 8002c06:	497b      	ldr	r1, [pc, #492]	; (8002df4 <HAL_I2C_Mem_Read+0x224>)
 8002c08:	68f8      	ldr	r0, [r7, #12]
 8002c0a:	f000 fb85 	bl	8003318 <I2C_WaitOnFlagUntilTimeout>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d001      	beq.n	8002c18 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002c14:	2302      	movs	r3, #2
 8002c16:	e1fb      	b.n	8003010 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d101      	bne.n	8002c26 <HAL_I2C_Mem_Read+0x56>
 8002c22:	2302      	movs	r3, #2
 8002c24:	e1f4      	b.n	8003010 <HAL_I2C_Mem_Read+0x440>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d007      	beq.n	8002c4c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f042 0201 	orr.w	r2, r2, #1
 8002c4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2222      	movs	r2, #34	; 0x22
 8002c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2240      	movs	r2, #64	; 0x40
 8002c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002c7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	4a5b      	ldr	r2, [pc, #364]	; (8002df8 <HAL_I2C_Mem_Read+0x228>)
 8002c8c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c8e:	88f8      	ldrh	r0, [r7, #6]
 8002c90:	893a      	ldrh	r2, [r7, #8]
 8002c92:	8979      	ldrh	r1, [r7, #10]
 8002c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c96:	9301      	str	r3, [sp, #4]
 8002c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c9a:	9300      	str	r3, [sp, #0]
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f000 fa52 	bl	8003148 <I2C_RequestMemoryRead>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e1b0      	b.n	8003010 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d113      	bne.n	8002cde <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	623b      	str	r3, [r7, #32]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	695b      	ldr	r3, [r3, #20]
 8002cc0:	623b      	str	r3, [r7, #32]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	623b      	str	r3, [r7, #32]
 8002cca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	e184      	b.n	8002fe8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d11b      	bne.n	8002d1e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cf4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	61fb      	str	r3, [r7, #28]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	695b      	ldr	r3, [r3, #20]
 8002d00:	61fb      	str	r3, [r7, #28]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	61fb      	str	r3, [r7, #28]
 8002d0a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	e164      	b.n	8002fe8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d11b      	bne.n	8002d5e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d34:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d46:	2300      	movs	r3, #0
 8002d48:	61bb      	str	r3, [r7, #24]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	695b      	ldr	r3, [r3, #20]
 8002d50:	61bb      	str	r3, [r7, #24]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	61bb      	str	r3, [r7, #24]
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	e144      	b.n	8002fe8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d5e:	2300      	movs	r3, #0
 8002d60:	617b      	str	r3, [r7, #20]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	695b      	ldr	r3, [r3, #20]
 8002d68:	617b      	str	r3, [r7, #20]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	617b      	str	r3, [r7, #20]
 8002d72:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002d74:	e138      	b.n	8002fe8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d7a:	2b03      	cmp	r3, #3
 8002d7c:	f200 80f1 	bhi.w	8002f62 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d123      	bne.n	8002dd0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d8a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f000 fc1b 	bl	80035c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e139      	b.n	8003010 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	691a      	ldr	r2, [r3, #16]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da6:	b2d2      	uxtb	r2, r2
 8002da8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dae:	1c5a      	adds	r2, r3, #1
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db8:	3b01      	subs	r3, #1
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002dce:	e10b      	b.n	8002fe8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d14e      	bne.n	8002e76 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dda:	9300      	str	r3, [sp, #0]
 8002ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dde:	2200      	movs	r2, #0
 8002de0:	4906      	ldr	r1, [pc, #24]	; (8002dfc <HAL_I2C_Mem_Read+0x22c>)
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f000 fa98 	bl	8003318 <I2C_WaitOnFlagUntilTimeout>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d008      	beq.n	8002e00 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e10e      	b.n	8003010 <HAL_I2C_Mem_Read+0x440>
 8002df2:	bf00      	nop
 8002df4:	00100002 	.word	0x00100002
 8002df8:	ffff0000 	.word	0xffff0000
 8002dfc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	691a      	ldr	r2, [r3, #16]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1a:	b2d2      	uxtb	r2, r2
 8002e1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e22:	1c5a      	adds	r2, r3, #1
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	b29a      	uxth	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	691a      	ldr	r2, [r3, #16]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	b2d2      	uxtb	r2, r2
 8002e4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e54:	1c5a      	adds	r2, r3, #1
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	b29a      	uxth	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e74:	e0b8      	b.n	8002fe8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e78:	9300      	str	r3, [sp, #0]
 8002e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	4966      	ldr	r1, [pc, #408]	; (8003018 <HAL_I2C_Mem_Read+0x448>)
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f000 fa49 	bl	8003318 <I2C_WaitOnFlagUntilTimeout>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e0bf      	b.n	8003010 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	691a      	ldr	r2, [r3, #16]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eaa:	b2d2      	uxtb	r2, r2
 8002eac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb2:	1c5a      	adds	r2, r3, #1
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	b29a      	uxth	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ed8:	2200      	movs	r2, #0
 8002eda:	494f      	ldr	r1, [pc, #316]	; (8003018 <HAL_I2C_Mem_Read+0x448>)
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f000 fa1b 	bl	8003318 <I2C_WaitOnFlagUntilTimeout>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e091      	b.n	8003010 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002efa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	691a      	ldr	r2, [r3, #16]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f06:	b2d2      	uxtb	r2, r2
 8002f08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0e:	1c5a      	adds	r2, r3, #1
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	b29a      	uxth	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	3b01      	subs	r3, #1
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	691a      	ldr	r2, [r3, #16]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f38:	b2d2      	uxtb	r2, r2
 8002f3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f40:	1c5a      	adds	r2, r3, #1
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f60:	e042      	b.n	8002fe8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f64:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f000 fb2e 	bl	80035c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e04c      	b.n	8003010 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	691a      	ldr	r2, [r3, #16]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f80:	b2d2      	uxtb	r2, r2
 8002f82:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f88:	1c5a      	adds	r2, r3, #1
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f92:	3b01      	subs	r3, #1
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	f003 0304 	and.w	r3, r3, #4
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	d118      	bne.n	8002fe8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	691a      	ldr	r2, [r3, #16]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc0:	b2d2      	uxtb	r2, r2
 8002fc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc8:	1c5a      	adds	r2, r3, #1
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f47f aec2 	bne.w	8002d76 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800300a:	2300      	movs	r3, #0
 800300c:	e000      	b.n	8003010 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800300e:	2302      	movs	r3, #2
  }
}
 8003010:	4618      	mov	r0, r3
 8003012:	3728      	adds	r7, #40	; 0x28
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	00010004 	.word	0x00010004

0800301c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b088      	sub	sp, #32
 8003020:	af02      	add	r7, sp, #8
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	4608      	mov	r0, r1
 8003026:	4611      	mov	r1, r2
 8003028:	461a      	mov	r2, r3
 800302a:	4603      	mov	r3, r0
 800302c:	817b      	strh	r3, [r7, #10]
 800302e:	460b      	mov	r3, r1
 8003030:	813b      	strh	r3, [r7, #8]
 8003032:	4613      	mov	r3, r2
 8003034:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003044:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003048:	9300      	str	r3, [sp, #0]
 800304a:	6a3b      	ldr	r3, [r7, #32]
 800304c:	2200      	movs	r2, #0
 800304e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f000 f960 	bl	8003318 <I2C_WaitOnFlagUntilTimeout>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00d      	beq.n	800307a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003068:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800306c:	d103      	bne.n	8003076 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003074:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e05f      	b.n	800313a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800307a:	897b      	ldrh	r3, [r7, #10]
 800307c:	b2db      	uxtb	r3, r3
 800307e:	461a      	mov	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003088:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800308a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308c:	6a3a      	ldr	r2, [r7, #32]
 800308e:	492d      	ldr	r1, [pc, #180]	; (8003144 <I2C_RequestMemoryWrite+0x128>)
 8003090:	68f8      	ldr	r0, [r7, #12]
 8003092:	f000 f998 	bl	80033c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e04c      	b.n	800313a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030a0:	2300      	movs	r3, #0
 80030a2:	617b      	str	r3, [r7, #20]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	617b      	str	r3, [r7, #20]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	617b      	str	r3, [r7, #20]
 80030b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030b8:	6a39      	ldr	r1, [r7, #32]
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f000 fa02 	bl	80034c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00d      	beq.n	80030e2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	d107      	bne.n	80030de <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e02b      	b.n	800313a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030e2:	88fb      	ldrh	r3, [r7, #6]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d105      	bne.n	80030f4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030e8:	893b      	ldrh	r3, [r7, #8]
 80030ea:	b2da      	uxtb	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	611a      	str	r2, [r3, #16]
 80030f2:	e021      	b.n	8003138 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80030f4:	893b      	ldrh	r3, [r7, #8]
 80030f6:	0a1b      	lsrs	r3, r3, #8
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	b2da      	uxtb	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003104:	6a39      	ldr	r1, [r7, #32]
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	f000 f9dc 	bl	80034c4 <I2C_WaitOnTXEFlagUntilTimeout>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00d      	beq.n	800312e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	2b04      	cmp	r3, #4
 8003118:	d107      	bne.n	800312a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003128:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e005      	b.n	800313a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800312e:	893b      	ldrh	r3, [r7, #8]
 8003130:	b2da      	uxtb	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3718      	adds	r7, #24
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	00010002 	.word	0x00010002

08003148 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b088      	sub	sp, #32
 800314c:	af02      	add	r7, sp, #8
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	4608      	mov	r0, r1
 8003152:	4611      	mov	r1, r2
 8003154:	461a      	mov	r2, r3
 8003156:	4603      	mov	r3, r0
 8003158:	817b      	strh	r3, [r7, #10]
 800315a:	460b      	mov	r3, r1
 800315c:	813b      	strh	r3, [r7, #8]
 800315e:	4613      	mov	r3, r2
 8003160:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003170:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003180:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003184:	9300      	str	r3, [sp, #0]
 8003186:	6a3b      	ldr	r3, [r7, #32]
 8003188:	2200      	movs	r2, #0
 800318a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f000 f8c2 	bl	8003318 <I2C_WaitOnFlagUntilTimeout>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00d      	beq.n	80031b6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031a8:	d103      	bne.n	80031b2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e0aa      	b.n	800330c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031b6:	897b      	ldrh	r3, [r7, #10]
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	461a      	mov	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80031c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	6a3a      	ldr	r2, [r7, #32]
 80031ca:	4952      	ldr	r1, [pc, #328]	; (8003314 <I2C_RequestMemoryRead+0x1cc>)
 80031cc:	68f8      	ldr	r0, [r7, #12]
 80031ce:	f000 f8fa 	bl	80033c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e097      	b.n	800330c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031dc:	2300      	movs	r3, #0
 80031de:	617b      	str	r3, [r7, #20]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	617b      	str	r3, [r7, #20]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	617b      	str	r3, [r7, #20]
 80031f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031f4:	6a39      	ldr	r1, [r7, #32]
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f000 f964 	bl	80034c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00d      	beq.n	800321e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	2b04      	cmp	r3, #4
 8003208:	d107      	bne.n	800321a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003218:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e076      	b.n	800330c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800321e:	88fb      	ldrh	r3, [r7, #6]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d105      	bne.n	8003230 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003224:	893b      	ldrh	r3, [r7, #8]
 8003226:	b2da      	uxtb	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	611a      	str	r2, [r3, #16]
 800322e:	e021      	b.n	8003274 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003230:	893b      	ldrh	r3, [r7, #8]
 8003232:	0a1b      	lsrs	r3, r3, #8
 8003234:	b29b      	uxth	r3, r3
 8003236:	b2da      	uxtb	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800323e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003240:	6a39      	ldr	r1, [r7, #32]
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f000 f93e 	bl	80034c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00d      	beq.n	800326a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003252:	2b04      	cmp	r3, #4
 8003254:	d107      	bne.n	8003266 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003264:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e050      	b.n	800330c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800326a:	893b      	ldrh	r3, [r7, #8]
 800326c:	b2da      	uxtb	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003276:	6a39      	ldr	r1, [r7, #32]
 8003278:	68f8      	ldr	r0, [r7, #12]
 800327a:	f000 f923 	bl	80034c4 <I2C_WaitOnTXEFlagUntilTimeout>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00d      	beq.n	80032a0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003288:	2b04      	cmp	r3, #4
 800328a:	d107      	bne.n	800329c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800329a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e035      	b.n	800330c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032ae:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	6a3b      	ldr	r3, [r7, #32]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	f000 f82b 	bl	8003318 <I2C_WaitOnFlagUntilTimeout>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00d      	beq.n	80032e4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032d6:	d103      	bne.n	80032e0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e013      	b.n	800330c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80032e4:	897b      	ldrh	r3, [r7, #10]
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	f043 0301 	orr.w	r3, r3, #1
 80032ec:	b2da      	uxtb	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f6:	6a3a      	ldr	r2, [r7, #32]
 80032f8:	4906      	ldr	r1, [pc, #24]	; (8003314 <I2C_RequestMemoryRead+0x1cc>)
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f000 f863 	bl	80033c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e000      	b.n	800330c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3718      	adds	r7, #24
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	00010002 	.word	0x00010002

08003318 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	603b      	str	r3, [r7, #0]
 8003324:	4613      	mov	r3, r2
 8003326:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003328:	e025      	b.n	8003376 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003330:	d021      	beq.n	8003376 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003332:	f7fe feff 	bl	8002134 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	683a      	ldr	r2, [r7, #0]
 800333e:	429a      	cmp	r2, r3
 8003340:	d302      	bcc.n	8003348 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d116      	bne.n	8003376 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2220      	movs	r2, #32
 8003352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	f043 0220 	orr.w	r2, r3, #32
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e023      	b.n	80033be <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	0c1b      	lsrs	r3, r3, #16
 800337a:	b2db      	uxtb	r3, r3
 800337c:	2b01      	cmp	r3, #1
 800337e:	d10d      	bne.n	800339c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	43da      	mvns	r2, r3
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	4013      	ands	r3, r2
 800338c:	b29b      	uxth	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	bf0c      	ite	eq
 8003392:	2301      	moveq	r3, #1
 8003394:	2300      	movne	r3, #0
 8003396:	b2db      	uxtb	r3, r3
 8003398:	461a      	mov	r2, r3
 800339a:	e00c      	b.n	80033b6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	43da      	mvns	r2, r3
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	4013      	ands	r3, r2
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	bf0c      	ite	eq
 80033ae:	2301      	moveq	r3, #1
 80033b0:	2300      	movne	r3, #0
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	461a      	mov	r2, r3
 80033b6:	79fb      	ldrb	r3, [r7, #7]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d0b6      	beq.n	800332a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b084      	sub	sp, #16
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	60f8      	str	r0, [r7, #12]
 80033ce:	60b9      	str	r1, [r7, #8]
 80033d0:	607a      	str	r2, [r7, #4]
 80033d2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033d4:	e051      	b.n	800347a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	695b      	ldr	r3, [r3, #20]
 80033dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033e4:	d123      	bne.n	800342e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033f4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033fe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2220      	movs	r2, #32
 800340a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	f043 0204 	orr.w	r2, r3, #4
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e046      	b.n	80034bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003434:	d021      	beq.n	800347a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003436:	f7fe fe7d 	bl	8002134 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	429a      	cmp	r2, r3
 8003444:	d302      	bcc.n	800344c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d116      	bne.n	800347a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2220      	movs	r2, #32
 8003456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	f043 0220 	orr.w	r2, r3, #32
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e020      	b.n	80034bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	0c1b      	lsrs	r3, r3, #16
 800347e:	b2db      	uxtb	r3, r3
 8003480:	2b01      	cmp	r3, #1
 8003482:	d10c      	bne.n	800349e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	43da      	mvns	r2, r3
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	4013      	ands	r3, r2
 8003490:	b29b      	uxth	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	bf14      	ite	ne
 8003496:	2301      	movne	r3, #1
 8003498:	2300      	moveq	r3, #0
 800349a:	b2db      	uxtb	r3, r3
 800349c:	e00b      	b.n	80034b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	43da      	mvns	r2, r3
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	4013      	ands	r3, r2
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	bf14      	ite	ne
 80034b0:	2301      	movne	r3, #1
 80034b2:	2300      	moveq	r3, #0
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d18d      	bne.n	80033d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3710      	adds	r7, #16
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034d0:	e02d      	b.n	800352e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f000 f8ce 	bl	8003674 <I2C_IsAcknowledgeFailed>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e02d      	b.n	800353e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e8:	d021      	beq.n	800352e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ea:	f7fe fe23 	bl	8002134 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	68ba      	ldr	r2, [r7, #8]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d302      	bcc.n	8003500 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d116      	bne.n	800352e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2220      	movs	r2, #32
 800350a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351a:	f043 0220 	orr.w	r2, r3, #32
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e007      	b.n	800353e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	695b      	ldr	r3, [r3, #20]
 8003534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003538:	2b80      	cmp	r3, #128	; 0x80
 800353a:	d1ca      	bne.n	80034d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b084      	sub	sp, #16
 800354a:	af00      	add	r7, sp, #0
 800354c:	60f8      	str	r0, [r7, #12]
 800354e:	60b9      	str	r1, [r7, #8]
 8003550:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003552:	e02d      	b.n	80035b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003554:	68f8      	ldr	r0, [r7, #12]
 8003556:	f000 f88d 	bl	8003674 <I2C_IsAcknowledgeFailed>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e02d      	b.n	80035c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800356a:	d021      	beq.n	80035b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800356c:	f7fe fde2 	bl	8002134 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	68ba      	ldr	r2, [r7, #8]
 8003578:	429a      	cmp	r2, r3
 800357a:	d302      	bcc.n	8003582 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d116      	bne.n	80035b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2220      	movs	r2, #32
 800358c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359c:	f043 0220 	orr.w	r2, r3, #32
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e007      	b.n	80035c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	f003 0304 	and.w	r3, r3, #4
 80035ba:	2b04      	cmp	r3, #4
 80035bc:	d1ca      	bne.n	8003554 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3710      	adds	r7, #16
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035d4:	e042      	b.n	800365c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	695b      	ldr	r3, [r3, #20]
 80035dc:	f003 0310 	and.w	r3, r3, #16
 80035e0:	2b10      	cmp	r3, #16
 80035e2:	d119      	bne.n	8003618 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f06f 0210 	mvn.w	r2, #16
 80035ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2220      	movs	r2, #32
 80035f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e029      	b.n	800366c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003618:	f7fe fd8c 	bl	8002134 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	68ba      	ldr	r2, [r7, #8]
 8003624:	429a      	cmp	r2, r3
 8003626:	d302      	bcc.n	800362e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d116      	bne.n	800365c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2220      	movs	r2, #32
 8003638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003648:	f043 0220 	orr.w	r2, r3, #32
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e007      	b.n	800366c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003666:	2b40      	cmp	r3, #64	; 0x40
 8003668:	d1b5      	bne.n	80035d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	3710      	adds	r7, #16
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003686:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800368a:	d11b      	bne.n	80036c4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003694:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2220      	movs	r2, #32
 80036a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b0:	f043 0204 	orr.w	r2, r3, #4
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e000      	b.n	80036c6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	370c      	adds	r7, #12
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
	...

080036d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e267      	b.n	8003bb6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d075      	beq.n	80037de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036f2:	4b88      	ldr	r3, [pc, #544]	; (8003914 <HAL_RCC_OscConfig+0x240>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f003 030c 	and.w	r3, r3, #12
 80036fa:	2b04      	cmp	r3, #4
 80036fc:	d00c      	beq.n	8003718 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036fe:	4b85      	ldr	r3, [pc, #532]	; (8003914 <HAL_RCC_OscConfig+0x240>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003706:	2b08      	cmp	r3, #8
 8003708:	d112      	bne.n	8003730 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800370a:	4b82      	ldr	r3, [pc, #520]	; (8003914 <HAL_RCC_OscConfig+0x240>)
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003712:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003716:	d10b      	bne.n	8003730 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003718:	4b7e      	ldr	r3, [pc, #504]	; (8003914 <HAL_RCC_OscConfig+0x240>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d05b      	beq.n	80037dc <HAL_RCC_OscConfig+0x108>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d157      	bne.n	80037dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e242      	b.n	8003bb6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003738:	d106      	bne.n	8003748 <HAL_RCC_OscConfig+0x74>
 800373a:	4b76      	ldr	r3, [pc, #472]	; (8003914 <HAL_RCC_OscConfig+0x240>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a75      	ldr	r2, [pc, #468]	; (8003914 <HAL_RCC_OscConfig+0x240>)
 8003740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003744:	6013      	str	r3, [r2, #0]
 8003746:	e01d      	b.n	8003784 <HAL_RCC_OscConfig+0xb0>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003750:	d10c      	bne.n	800376c <HAL_RCC_OscConfig+0x98>
 8003752:	4b70      	ldr	r3, [pc, #448]	; (8003914 <HAL_RCC_OscConfig+0x240>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a6f      	ldr	r2, [pc, #444]	; (8003914 <HAL_RCC_OscConfig+0x240>)
 8003758:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800375c:	6013      	str	r3, [r2, #0]
 800375e:	4b6d      	ldr	r3, [pc, #436]	; (8003914 <HAL_RCC_OscConfig+0x240>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a6c      	ldr	r2, [pc, #432]	; (8003914 <HAL_RCC_OscConfig+0x240>)
 8003764:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003768:	6013      	str	r3, [r2, #0]
 800376a:	e00b      	b.n	8003784 <HAL_RCC_OscConfig+0xb0>
 800376c:	4b69      	ldr	r3, [pc, #420]	; (8003914 <HAL_RCC_OscConfig+0x240>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a68      	ldr	r2, [pc, #416]	; (8003914 <HAL_RCC_OscConfig+0x240>)
 8003772:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003776:	6013      	str	r3, [r2, #0]
 8003778:	4b66      	ldr	r3, [pc, #408]	; (8003914 <HAL_RCC_OscConfig+0x240>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a65      	ldr	r2, [pc, #404]	; (8003914 <HAL_RCC_OscConfig+0x240>)
 800377e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003782:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d013      	beq.n	80037b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800378c:	f7fe fcd2 	bl	8002134 <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003794:	f7fe fcce 	bl	8002134 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b64      	cmp	r3, #100	; 0x64
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e207      	b.n	8003bb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037a6:	4b5b      	ldr	r3, [pc, #364]	; (8003914 <HAL_RCC_OscConfig+0x240>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d0f0      	beq.n	8003794 <HAL_RCC_OscConfig+0xc0>
 80037b2:	e014      	b.n	80037de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b4:	f7fe fcbe 	bl	8002134 <HAL_GetTick>
 80037b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ba:	e008      	b.n	80037ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037bc:	f7fe fcba 	bl	8002134 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b64      	cmp	r3, #100	; 0x64
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e1f3      	b.n	8003bb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ce:	4b51      	ldr	r3, [pc, #324]	; (8003914 <HAL_RCC_OscConfig+0x240>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1f0      	bne.n	80037bc <HAL_RCC_OscConfig+0xe8>
 80037da:	e000      	b.n	80037de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d063      	beq.n	80038b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037ea:	4b4a      	ldr	r3, [pc, #296]	; (8003914 <HAL_RCC_OscConfig+0x240>)
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f003 030c 	and.w	r3, r3, #12
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00b      	beq.n	800380e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037f6:	4b47      	ldr	r3, [pc, #284]	; (8003914 <HAL_RCC_OscConfig+0x240>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037fe:	2b08      	cmp	r3, #8
 8003800:	d11c      	bne.n	800383c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003802:	4b44      	ldr	r3, [pc, #272]	; (8003914 <HAL_RCC_OscConfig+0x240>)
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d116      	bne.n	800383c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800380e:	4b41      	ldr	r3, [pc, #260]	; (8003914 <HAL_RCC_OscConfig+0x240>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	2b00      	cmp	r3, #0
 8003818:	d005      	beq.n	8003826 <HAL_RCC_OscConfig+0x152>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d001      	beq.n	8003826 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e1c7      	b.n	8003bb6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003826:	4b3b      	ldr	r3, [pc, #236]	; (8003914 <HAL_RCC_OscConfig+0x240>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	00db      	lsls	r3, r3, #3
 8003834:	4937      	ldr	r1, [pc, #220]	; (8003914 <HAL_RCC_OscConfig+0x240>)
 8003836:	4313      	orrs	r3, r2
 8003838:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800383a:	e03a      	b.n	80038b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d020      	beq.n	8003886 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003844:	4b34      	ldr	r3, [pc, #208]	; (8003918 <HAL_RCC_OscConfig+0x244>)
 8003846:	2201      	movs	r2, #1
 8003848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800384a:	f7fe fc73 	bl	8002134 <HAL_GetTick>
 800384e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003850:	e008      	b.n	8003864 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003852:	f7fe fc6f 	bl	8002134 <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	2b02      	cmp	r3, #2
 800385e:	d901      	bls.n	8003864 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e1a8      	b.n	8003bb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003864:	4b2b      	ldr	r3, [pc, #172]	; (8003914 <HAL_RCC_OscConfig+0x240>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b00      	cmp	r3, #0
 800386e:	d0f0      	beq.n	8003852 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003870:	4b28      	ldr	r3, [pc, #160]	; (8003914 <HAL_RCC_OscConfig+0x240>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	00db      	lsls	r3, r3, #3
 800387e:	4925      	ldr	r1, [pc, #148]	; (8003914 <HAL_RCC_OscConfig+0x240>)
 8003880:	4313      	orrs	r3, r2
 8003882:	600b      	str	r3, [r1, #0]
 8003884:	e015      	b.n	80038b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003886:	4b24      	ldr	r3, [pc, #144]	; (8003918 <HAL_RCC_OscConfig+0x244>)
 8003888:	2200      	movs	r2, #0
 800388a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800388c:	f7fe fc52 	bl	8002134 <HAL_GetTick>
 8003890:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003894:	f7fe fc4e 	bl	8002134 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e187      	b.n	8003bb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038a6:	4b1b      	ldr	r3, [pc, #108]	; (8003914 <HAL_RCC_OscConfig+0x240>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1f0      	bne.n	8003894 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0308 	and.w	r3, r3, #8
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d036      	beq.n	800392c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d016      	beq.n	80038f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038c6:	4b15      	ldr	r3, [pc, #84]	; (800391c <HAL_RCC_OscConfig+0x248>)
 80038c8:	2201      	movs	r2, #1
 80038ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038cc:	f7fe fc32 	bl	8002134 <HAL_GetTick>
 80038d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038d2:	e008      	b.n	80038e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038d4:	f7fe fc2e 	bl	8002134 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e167      	b.n	8003bb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038e6:	4b0b      	ldr	r3, [pc, #44]	; (8003914 <HAL_RCC_OscConfig+0x240>)
 80038e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d0f0      	beq.n	80038d4 <HAL_RCC_OscConfig+0x200>
 80038f2:	e01b      	b.n	800392c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038f4:	4b09      	ldr	r3, [pc, #36]	; (800391c <HAL_RCC_OscConfig+0x248>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038fa:	f7fe fc1b 	bl	8002134 <HAL_GetTick>
 80038fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003900:	e00e      	b.n	8003920 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003902:	f7fe fc17 	bl	8002134 <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	2b02      	cmp	r3, #2
 800390e:	d907      	bls.n	8003920 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e150      	b.n	8003bb6 <HAL_RCC_OscConfig+0x4e2>
 8003914:	40023800 	.word	0x40023800
 8003918:	42470000 	.word	0x42470000
 800391c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003920:	4b88      	ldr	r3, [pc, #544]	; (8003b44 <HAL_RCC_OscConfig+0x470>)
 8003922:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003924:	f003 0302 	and.w	r3, r3, #2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1ea      	bne.n	8003902 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0304 	and.w	r3, r3, #4
 8003934:	2b00      	cmp	r3, #0
 8003936:	f000 8097 	beq.w	8003a68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800393a:	2300      	movs	r3, #0
 800393c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800393e:	4b81      	ldr	r3, [pc, #516]	; (8003b44 <HAL_RCC_OscConfig+0x470>)
 8003940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d10f      	bne.n	800396a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800394a:	2300      	movs	r3, #0
 800394c:	60bb      	str	r3, [r7, #8]
 800394e:	4b7d      	ldr	r3, [pc, #500]	; (8003b44 <HAL_RCC_OscConfig+0x470>)
 8003950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003952:	4a7c      	ldr	r2, [pc, #496]	; (8003b44 <HAL_RCC_OscConfig+0x470>)
 8003954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003958:	6413      	str	r3, [r2, #64]	; 0x40
 800395a:	4b7a      	ldr	r3, [pc, #488]	; (8003b44 <HAL_RCC_OscConfig+0x470>)
 800395c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003962:	60bb      	str	r3, [r7, #8]
 8003964:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003966:	2301      	movs	r3, #1
 8003968:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800396a:	4b77      	ldr	r3, [pc, #476]	; (8003b48 <HAL_RCC_OscConfig+0x474>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003972:	2b00      	cmp	r3, #0
 8003974:	d118      	bne.n	80039a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003976:	4b74      	ldr	r3, [pc, #464]	; (8003b48 <HAL_RCC_OscConfig+0x474>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a73      	ldr	r2, [pc, #460]	; (8003b48 <HAL_RCC_OscConfig+0x474>)
 800397c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003980:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003982:	f7fe fbd7 	bl	8002134 <HAL_GetTick>
 8003986:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003988:	e008      	b.n	800399c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800398a:	f7fe fbd3 	bl	8002134 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	2b02      	cmp	r3, #2
 8003996:	d901      	bls.n	800399c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e10c      	b.n	8003bb6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800399c:	4b6a      	ldr	r3, [pc, #424]	; (8003b48 <HAL_RCC_OscConfig+0x474>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d0f0      	beq.n	800398a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d106      	bne.n	80039be <HAL_RCC_OscConfig+0x2ea>
 80039b0:	4b64      	ldr	r3, [pc, #400]	; (8003b44 <HAL_RCC_OscConfig+0x470>)
 80039b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b4:	4a63      	ldr	r2, [pc, #396]	; (8003b44 <HAL_RCC_OscConfig+0x470>)
 80039b6:	f043 0301 	orr.w	r3, r3, #1
 80039ba:	6713      	str	r3, [r2, #112]	; 0x70
 80039bc:	e01c      	b.n	80039f8 <HAL_RCC_OscConfig+0x324>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	2b05      	cmp	r3, #5
 80039c4:	d10c      	bne.n	80039e0 <HAL_RCC_OscConfig+0x30c>
 80039c6:	4b5f      	ldr	r3, [pc, #380]	; (8003b44 <HAL_RCC_OscConfig+0x470>)
 80039c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ca:	4a5e      	ldr	r2, [pc, #376]	; (8003b44 <HAL_RCC_OscConfig+0x470>)
 80039cc:	f043 0304 	orr.w	r3, r3, #4
 80039d0:	6713      	str	r3, [r2, #112]	; 0x70
 80039d2:	4b5c      	ldr	r3, [pc, #368]	; (8003b44 <HAL_RCC_OscConfig+0x470>)
 80039d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d6:	4a5b      	ldr	r2, [pc, #364]	; (8003b44 <HAL_RCC_OscConfig+0x470>)
 80039d8:	f043 0301 	orr.w	r3, r3, #1
 80039dc:	6713      	str	r3, [r2, #112]	; 0x70
 80039de:	e00b      	b.n	80039f8 <HAL_RCC_OscConfig+0x324>
 80039e0:	4b58      	ldr	r3, [pc, #352]	; (8003b44 <HAL_RCC_OscConfig+0x470>)
 80039e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e4:	4a57      	ldr	r2, [pc, #348]	; (8003b44 <HAL_RCC_OscConfig+0x470>)
 80039e6:	f023 0301 	bic.w	r3, r3, #1
 80039ea:	6713      	str	r3, [r2, #112]	; 0x70
 80039ec:	4b55      	ldr	r3, [pc, #340]	; (8003b44 <HAL_RCC_OscConfig+0x470>)
 80039ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f0:	4a54      	ldr	r2, [pc, #336]	; (8003b44 <HAL_RCC_OscConfig+0x470>)
 80039f2:	f023 0304 	bic.w	r3, r3, #4
 80039f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d015      	beq.n	8003a2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a00:	f7fe fb98 	bl	8002134 <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a06:	e00a      	b.n	8003a1e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a08:	f7fe fb94 	bl	8002134 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e0cb      	b.n	8003bb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a1e:	4b49      	ldr	r3, [pc, #292]	; (8003b44 <HAL_RCC_OscConfig+0x470>)
 8003a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d0ee      	beq.n	8003a08 <HAL_RCC_OscConfig+0x334>
 8003a2a:	e014      	b.n	8003a56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a2c:	f7fe fb82 	bl	8002134 <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a32:	e00a      	b.n	8003a4a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a34:	f7fe fb7e 	bl	8002134 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e0b5      	b.n	8003bb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a4a:	4b3e      	ldr	r3, [pc, #248]	; (8003b44 <HAL_RCC_OscConfig+0x470>)
 8003a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1ee      	bne.n	8003a34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a56:	7dfb      	ldrb	r3, [r7, #23]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d105      	bne.n	8003a68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a5c:	4b39      	ldr	r3, [pc, #228]	; (8003b44 <HAL_RCC_OscConfig+0x470>)
 8003a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a60:	4a38      	ldr	r2, [pc, #224]	; (8003b44 <HAL_RCC_OscConfig+0x470>)
 8003a62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a66:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f000 80a1 	beq.w	8003bb4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a72:	4b34      	ldr	r3, [pc, #208]	; (8003b44 <HAL_RCC_OscConfig+0x470>)
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f003 030c 	and.w	r3, r3, #12
 8003a7a:	2b08      	cmp	r3, #8
 8003a7c:	d05c      	beq.n	8003b38 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d141      	bne.n	8003b0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a86:	4b31      	ldr	r3, [pc, #196]	; (8003b4c <HAL_RCC_OscConfig+0x478>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a8c:	f7fe fb52 	bl	8002134 <HAL_GetTick>
 8003a90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a92:	e008      	b.n	8003aa6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a94:	f7fe fb4e 	bl	8002134 <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d901      	bls.n	8003aa6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e087      	b.n	8003bb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aa6:	4b27      	ldr	r3, [pc, #156]	; (8003b44 <HAL_RCC_OscConfig+0x470>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1f0      	bne.n	8003a94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	69da      	ldr	r2, [r3, #28]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	431a      	orrs	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac0:	019b      	lsls	r3, r3, #6
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac8:	085b      	lsrs	r3, r3, #1
 8003aca:	3b01      	subs	r3, #1
 8003acc:	041b      	lsls	r3, r3, #16
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad4:	061b      	lsls	r3, r3, #24
 8003ad6:	491b      	ldr	r1, [pc, #108]	; (8003b44 <HAL_RCC_OscConfig+0x470>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003adc:	4b1b      	ldr	r3, [pc, #108]	; (8003b4c <HAL_RCC_OscConfig+0x478>)
 8003ade:	2201      	movs	r2, #1
 8003ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae2:	f7fe fb27 	bl	8002134 <HAL_GetTick>
 8003ae6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ae8:	e008      	b.n	8003afc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aea:	f7fe fb23 	bl	8002134 <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d901      	bls.n	8003afc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e05c      	b.n	8003bb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003afc:	4b11      	ldr	r3, [pc, #68]	; (8003b44 <HAL_RCC_OscConfig+0x470>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d0f0      	beq.n	8003aea <HAL_RCC_OscConfig+0x416>
 8003b08:	e054      	b.n	8003bb4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b0a:	4b10      	ldr	r3, [pc, #64]	; (8003b4c <HAL_RCC_OscConfig+0x478>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b10:	f7fe fb10 	bl	8002134 <HAL_GetTick>
 8003b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b16:	e008      	b.n	8003b2a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b18:	f7fe fb0c 	bl	8002134 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e045      	b.n	8003bb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b2a:	4b06      	ldr	r3, [pc, #24]	; (8003b44 <HAL_RCC_OscConfig+0x470>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1f0      	bne.n	8003b18 <HAL_RCC_OscConfig+0x444>
 8003b36:	e03d      	b.n	8003bb4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d107      	bne.n	8003b50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e038      	b.n	8003bb6 <HAL_RCC_OscConfig+0x4e2>
 8003b44:	40023800 	.word	0x40023800
 8003b48:	40007000 	.word	0x40007000
 8003b4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b50:	4b1b      	ldr	r3, [pc, #108]	; (8003bc0 <HAL_RCC_OscConfig+0x4ec>)
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d028      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d121      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d11a      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b80:	4013      	ands	r3, r2
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d111      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b96:	085b      	lsrs	r3, r3, #1
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d107      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003baa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d001      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e000      	b.n	8003bb6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3718      	adds	r7, #24
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	40023800 	.word	0x40023800

08003bc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d101      	bne.n	8003bd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e0cc      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bd8:	4b68      	ldr	r3, [pc, #416]	; (8003d7c <HAL_RCC_ClockConfig+0x1b8>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0307 	and.w	r3, r3, #7
 8003be0:	683a      	ldr	r2, [r7, #0]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d90c      	bls.n	8003c00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003be6:	4b65      	ldr	r3, [pc, #404]	; (8003d7c <HAL_RCC_ClockConfig+0x1b8>)
 8003be8:	683a      	ldr	r2, [r7, #0]
 8003bea:	b2d2      	uxtb	r2, r2
 8003bec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bee:	4b63      	ldr	r3, [pc, #396]	; (8003d7c <HAL_RCC_ClockConfig+0x1b8>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0307 	and.w	r3, r3, #7
 8003bf6:	683a      	ldr	r2, [r7, #0]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d001      	beq.n	8003c00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e0b8      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d020      	beq.n	8003c4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0304 	and.w	r3, r3, #4
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d005      	beq.n	8003c24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c18:	4b59      	ldr	r3, [pc, #356]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	4a58      	ldr	r2, [pc, #352]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0308 	and.w	r3, r3, #8
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d005      	beq.n	8003c3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c30:	4b53      	ldr	r3, [pc, #332]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	4a52      	ldr	r2, [pc, #328]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c3c:	4b50      	ldr	r3, [pc, #320]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	494d      	ldr	r1, [pc, #308]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d044      	beq.n	8003ce4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d107      	bne.n	8003c72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c62:	4b47      	ldr	r3, [pc, #284]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d119      	bne.n	8003ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e07f      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d003      	beq.n	8003c82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c7e:	2b03      	cmp	r3, #3
 8003c80:	d107      	bne.n	8003c92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c82:	4b3f      	ldr	r3, [pc, #252]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d109      	bne.n	8003ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e06f      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c92:	4b3b      	ldr	r3, [pc, #236]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e067      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ca2:	4b37      	ldr	r3, [pc, #220]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f023 0203 	bic.w	r2, r3, #3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	4934      	ldr	r1, [pc, #208]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cb4:	f7fe fa3e 	bl	8002134 <HAL_GetTick>
 8003cb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cba:	e00a      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cbc:	f7fe fa3a 	bl	8002134 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e04f      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cd2:	4b2b      	ldr	r3, [pc, #172]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f003 020c 	and.w	r2, r3, #12
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d1eb      	bne.n	8003cbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ce4:	4b25      	ldr	r3, [pc, #148]	; (8003d7c <HAL_RCC_ClockConfig+0x1b8>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0307 	and.w	r3, r3, #7
 8003cec:	683a      	ldr	r2, [r7, #0]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d20c      	bcs.n	8003d0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cf2:	4b22      	ldr	r3, [pc, #136]	; (8003d7c <HAL_RCC_ClockConfig+0x1b8>)
 8003cf4:	683a      	ldr	r2, [r7, #0]
 8003cf6:	b2d2      	uxtb	r2, r2
 8003cf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cfa:	4b20      	ldr	r3, [pc, #128]	; (8003d7c <HAL_RCC_ClockConfig+0x1b8>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0307 	and.w	r3, r3, #7
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d001      	beq.n	8003d0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e032      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0304 	and.w	r3, r3, #4
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d008      	beq.n	8003d2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d18:	4b19      	ldr	r3, [pc, #100]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	4916      	ldr	r1, [pc, #88]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0308 	and.w	r3, r3, #8
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d009      	beq.n	8003d4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d36:	4b12      	ldr	r3, [pc, #72]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	490e      	ldr	r1, [pc, #56]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d4a:	f000 f821 	bl	8003d90 <HAL_RCC_GetSysClockFreq>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	4b0b      	ldr	r3, [pc, #44]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	091b      	lsrs	r3, r3, #4
 8003d56:	f003 030f 	and.w	r3, r3, #15
 8003d5a:	490a      	ldr	r1, [pc, #40]	; (8003d84 <HAL_RCC_ClockConfig+0x1c0>)
 8003d5c:	5ccb      	ldrb	r3, [r1, r3]
 8003d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d62:	4a09      	ldr	r2, [pc, #36]	; (8003d88 <HAL_RCC_ClockConfig+0x1c4>)
 8003d64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d66:	4b09      	ldr	r3, [pc, #36]	; (8003d8c <HAL_RCC_ClockConfig+0x1c8>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7fe f99e 	bl	80020ac <HAL_InitTick>

  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	40023c00 	.word	0x40023c00
 8003d80:	40023800 	.word	0x40023800
 8003d84:	08008790 	.word	0x08008790
 8003d88:	20000004 	.word	0x20000004
 8003d8c:	20000008 	.word	0x20000008

08003d90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d94:	b090      	sub	sp, #64	; 0x40
 8003d96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	637b      	str	r3, [r7, #52]	; 0x34
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003da0:	2300      	movs	r3, #0
 8003da2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003da4:	2300      	movs	r3, #0
 8003da6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003da8:	4b59      	ldr	r3, [pc, #356]	; (8003f10 <HAL_RCC_GetSysClockFreq+0x180>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f003 030c 	and.w	r3, r3, #12
 8003db0:	2b08      	cmp	r3, #8
 8003db2:	d00d      	beq.n	8003dd0 <HAL_RCC_GetSysClockFreq+0x40>
 8003db4:	2b08      	cmp	r3, #8
 8003db6:	f200 80a1 	bhi.w	8003efc <HAL_RCC_GetSysClockFreq+0x16c>
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d002      	beq.n	8003dc4 <HAL_RCC_GetSysClockFreq+0x34>
 8003dbe:	2b04      	cmp	r3, #4
 8003dc0:	d003      	beq.n	8003dca <HAL_RCC_GetSysClockFreq+0x3a>
 8003dc2:	e09b      	b.n	8003efc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003dc4:	4b53      	ldr	r3, [pc, #332]	; (8003f14 <HAL_RCC_GetSysClockFreq+0x184>)
 8003dc6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003dc8:	e09b      	b.n	8003f02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003dca:	4b53      	ldr	r3, [pc, #332]	; (8003f18 <HAL_RCC_GetSysClockFreq+0x188>)
 8003dcc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003dce:	e098      	b.n	8003f02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003dd0:	4b4f      	ldr	r3, [pc, #316]	; (8003f10 <HAL_RCC_GetSysClockFreq+0x180>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dd8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003dda:	4b4d      	ldr	r3, [pc, #308]	; (8003f10 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d028      	beq.n	8003e38 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003de6:	4b4a      	ldr	r3, [pc, #296]	; (8003f10 <HAL_RCC_GetSysClockFreq+0x180>)
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	099b      	lsrs	r3, r3, #6
 8003dec:	2200      	movs	r2, #0
 8003dee:	623b      	str	r3, [r7, #32]
 8003df0:	627a      	str	r2, [r7, #36]	; 0x24
 8003df2:	6a3b      	ldr	r3, [r7, #32]
 8003df4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003df8:	2100      	movs	r1, #0
 8003dfa:	4b47      	ldr	r3, [pc, #284]	; (8003f18 <HAL_RCC_GetSysClockFreq+0x188>)
 8003dfc:	fb03 f201 	mul.w	r2, r3, r1
 8003e00:	2300      	movs	r3, #0
 8003e02:	fb00 f303 	mul.w	r3, r0, r3
 8003e06:	4413      	add	r3, r2
 8003e08:	4a43      	ldr	r2, [pc, #268]	; (8003f18 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e0a:	fba0 1202 	umull	r1, r2, r0, r2
 8003e0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e10:	460a      	mov	r2, r1
 8003e12:	62ba      	str	r2, [r7, #40]	; 0x28
 8003e14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e16:	4413      	add	r3, r2
 8003e18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	61bb      	str	r3, [r7, #24]
 8003e20:	61fa      	str	r2, [r7, #28]
 8003e22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e26:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003e2a:	f7fc ff0d 	bl	8000c48 <__aeabi_uldivmod>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	460b      	mov	r3, r1
 8003e32:	4613      	mov	r3, r2
 8003e34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e36:	e053      	b.n	8003ee0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e38:	4b35      	ldr	r3, [pc, #212]	; (8003f10 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	099b      	lsrs	r3, r3, #6
 8003e3e:	2200      	movs	r2, #0
 8003e40:	613b      	str	r3, [r7, #16]
 8003e42:	617a      	str	r2, [r7, #20]
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003e4a:	f04f 0b00 	mov.w	fp, #0
 8003e4e:	4652      	mov	r2, sl
 8003e50:	465b      	mov	r3, fp
 8003e52:	f04f 0000 	mov.w	r0, #0
 8003e56:	f04f 0100 	mov.w	r1, #0
 8003e5a:	0159      	lsls	r1, r3, #5
 8003e5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e60:	0150      	lsls	r0, r2, #5
 8003e62:	4602      	mov	r2, r0
 8003e64:	460b      	mov	r3, r1
 8003e66:	ebb2 080a 	subs.w	r8, r2, sl
 8003e6a:	eb63 090b 	sbc.w	r9, r3, fp
 8003e6e:	f04f 0200 	mov.w	r2, #0
 8003e72:	f04f 0300 	mov.w	r3, #0
 8003e76:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003e7a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003e7e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003e82:	ebb2 0408 	subs.w	r4, r2, r8
 8003e86:	eb63 0509 	sbc.w	r5, r3, r9
 8003e8a:	f04f 0200 	mov.w	r2, #0
 8003e8e:	f04f 0300 	mov.w	r3, #0
 8003e92:	00eb      	lsls	r3, r5, #3
 8003e94:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e98:	00e2      	lsls	r2, r4, #3
 8003e9a:	4614      	mov	r4, r2
 8003e9c:	461d      	mov	r5, r3
 8003e9e:	eb14 030a 	adds.w	r3, r4, sl
 8003ea2:	603b      	str	r3, [r7, #0]
 8003ea4:	eb45 030b 	adc.w	r3, r5, fp
 8003ea8:	607b      	str	r3, [r7, #4]
 8003eaa:	f04f 0200 	mov.w	r2, #0
 8003eae:	f04f 0300 	mov.w	r3, #0
 8003eb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003eb6:	4629      	mov	r1, r5
 8003eb8:	028b      	lsls	r3, r1, #10
 8003eba:	4621      	mov	r1, r4
 8003ebc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ec0:	4621      	mov	r1, r4
 8003ec2:	028a      	lsls	r2, r1, #10
 8003ec4:	4610      	mov	r0, r2
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eca:	2200      	movs	r2, #0
 8003ecc:	60bb      	str	r3, [r7, #8]
 8003ece:	60fa      	str	r2, [r7, #12]
 8003ed0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ed4:	f7fc feb8 	bl	8000c48 <__aeabi_uldivmod>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	460b      	mov	r3, r1
 8003edc:	4613      	mov	r3, r2
 8003ede:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ee0:	4b0b      	ldr	r3, [pc, #44]	; (8003f10 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	0c1b      	lsrs	r3, r3, #16
 8003ee6:	f003 0303 	and.w	r3, r3, #3
 8003eea:	3301      	adds	r3, #1
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003ef0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ef8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003efa:	e002      	b.n	8003f02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003efc:	4b05      	ldr	r3, [pc, #20]	; (8003f14 <HAL_RCC_GetSysClockFreq+0x184>)
 8003efe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003f00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3740      	adds	r7, #64	; 0x40
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f0e:	bf00      	nop
 8003f10:	40023800 	.word	0x40023800
 8003f14:	00f42400 	.word	0x00f42400
 8003f18:	017d7840 	.word	0x017d7840

08003f1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f20:	4b03      	ldr	r3, [pc, #12]	; (8003f30 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f22:	681b      	ldr	r3, [r3, #0]
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	20000004 	.word	0x20000004

08003f34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f38:	f7ff fff0 	bl	8003f1c <HAL_RCC_GetHCLKFreq>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	4b05      	ldr	r3, [pc, #20]	; (8003f54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	0a9b      	lsrs	r3, r3, #10
 8003f44:	f003 0307 	and.w	r3, r3, #7
 8003f48:	4903      	ldr	r1, [pc, #12]	; (8003f58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f4a:	5ccb      	ldrb	r3, [r1, r3]
 8003f4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	40023800 	.word	0x40023800
 8003f58:	080087a0 	.word	0x080087a0

08003f5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f60:	f7ff ffdc 	bl	8003f1c <HAL_RCC_GetHCLKFreq>
 8003f64:	4602      	mov	r2, r0
 8003f66:	4b05      	ldr	r3, [pc, #20]	; (8003f7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	0b5b      	lsrs	r3, r3, #13
 8003f6c:	f003 0307 	and.w	r3, r3, #7
 8003f70:	4903      	ldr	r1, [pc, #12]	; (8003f80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f72:	5ccb      	ldrb	r3, [r1, r3]
 8003f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	40023800 	.word	0x40023800
 8003f80:	080087a0 	.word	0x080087a0

08003f84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d101      	bne.n	8003f96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e041      	b.n	800401a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d106      	bne.n	8003fb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7fd fe78 	bl	8001ca0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3304      	adds	r3, #4
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	4610      	mov	r0, r2
 8003fc4:	f000 fb5e 	bl	8004684 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3708      	adds	r7, #8
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}

08004022 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004022:	b580      	push	{r7, lr}
 8004024:	b082      	sub	sp, #8
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d101      	bne.n	8004034 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e041      	b.n	80040b8 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800403a:	b2db      	uxtb	r3, r3
 800403c:	2b00      	cmp	r3, #0
 800403e:	d106      	bne.n	800404e <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 f839 	bl	80040c0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2202      	movs	r2, #2
 8004052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	3304      	adds	r3, #4
 800405e:	4619      	mov	r1, r3
 8004060:	4610      	mov	r0, r2
 8004062:	f000 fb0f 	bl	8004684 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2201      	movs	r2, #1
 800406a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2201      	movs	r2, #1
 800408a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2201      	movs	r2, #1
 800409a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2201      	movs	r2, #1
 80040aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3708      	adds	r7, #8
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80040c8:	bf00      	nop
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d122      	bne.n	8004130 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d11b      	bne.n	8004130 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f06f 0202 	mvn.w	r2, #2
 8004100:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2201      	movs	r2, #1
 8004106:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	f003 0303 	and.w	r3, r3, #3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d003      	beq.n	800411e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f7fd fcfa 	bl	8001b10 <HAL_TIM_IC_CaptureCallback>
 800411c:	e005      	b.n	800412a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 fa92 	bl	8004648 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 fa99 	bl	800465c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	f003 0304 	and.w	r3, r3, #4
 800413a:	2b04      	cmp	r3, #4
 800413c:	d122      	bne.n	8004184 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	f003 0304 	and.w	r3, r3, #4
 8004148:	2b04      	cmp	r3, #4
 800414a:	d11b      	bne.n	8004184 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f06f 0204 	mvn.w	r2, #4
 8004154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2202      	movs	r2, #2
 800415a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004166:	2b00      	cmp	r3, #0
 8004168:	d003      	beq.n	8004172 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f7fd fcd0 	bl	8001b10 <HAL_TIM_IC_CaptureCallback>
 8004170:	e005      	b.n	800417e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 fa68 	bl	8004648 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 fa6f 	bl	800465c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	f003 0308 	and.w	r3, r3, #8
 800418e:	2b08      	cmp	r3, #8
 8004190:	d122      	bne.n	80041d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	f003 0308 	and.w	r3, r3, #8
 800419c:	2b08      	cmp	r3, #8
 800419e:	d11b      	bne.n	80041d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f06f 0208 	mvn.w	r2, #8
 80041a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2204      	movs	r2, #4
 80041ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	f003 0303 	and.w	r3, r3, #3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d003      	beq.n	80041c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f7fd fca6 	bl	8001b10 <HAL_TIM_IC_CaptureCallback>
 80041c4:	e005      	b.n	80041d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 fa3e 	bl	8004648 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 fa45 	bl	800465c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	f003 0310 	and.w	r3, r3, #16
 80041e2:	2b10      	cmp	r3, #16
 80041e4:	d122      	bne.n	800422c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	f003 0310 	and.w	r3, r3, #16
 80041f0:	2b10      	cmp	r3, #16
 80041f2:	d11b      	bne.n	800422c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f06f 0210 	mvn.w	r2, #16
 80041fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2208      	movs	r2, #8
 8004202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	69db      	ldr	r3, [r3, #28]
 800420a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800420e:	2b00      	cmp	r3, #0
 8004210:	d003      	beq.n	800421a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f7fd fc7c 	bl	8001b10 <HAL_TIM_IC_CaptureCallback>
 8004218:	e005      	b.n	8004226 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 fa14 	bl	8004648 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f000 fa1b 	bl	800465c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	f003 0301 	and.w	r3, r3, #1
 8004236:	2b01      	cmp	r3, #1
 8004238:	d10e      	bne.n	8004258 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	2b01      	cmp	r3, #1
 8004246:	d107      	bne.n	8004258 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f06f 0201 	mvn.w	r2, #1
 8004250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 f9ee 	bl	8004634 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004262:	2b80      	cmp	r3, #128	; 0x80
 8004264:	d10e      	bne.n	8004284 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004270:	2b80      	cmp	r3, #128	; 0x80
 8004272:	d107      	bne.n	8004284 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800427c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 fcea 	bl	8004c58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800428e:	2b40      	cmp	r3, #64	; 0x40
 8004290:	d10e      	bne.n	80042b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800429c:	2b40      	cmp	r3, #64	; 0x40
 800429e:	d107      	bne.n	80042b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 f9e0 	bl	8004670 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	f003 0320 	and.w	r3, r3, #32
 80042ba:	2b20      	cmp	r3, #32
 80042bc:	d10e      	bne.n	80042dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	f003 0320 	and.w	r3, r3, #32
 80042c8:	2b20      	cmp	r3, #32
 80042ca:	d107      	bne.n	80042dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f06f 0220 	mvn.w	r2, #32
 80042d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 fcb4 	bl	8004c44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042dc:	bf00      	nop
 80042de:	3708      	adds	r7, #8
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b086      	sub	sp, #24
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042f0:	2300      	movs	r3, #0
 80042f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d101      	bne.n	8004302 <HAL_TIM_IC_ConfigChannel+0x1e>
 80042fe:	2302      	movs	r3, #2
 8004300:	e088      	b.n	8004414 <HAL_TIM_IC_ConfigChannel+0x130>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d11b      	bne.n	8004348 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6818      	ldr	r0, [r3, #0]
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	6819      	ldr	r1, [r3, #0]
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	685a      	ldr	r2, [r3, #4]
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	f000 fa50 	bl	80047c4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	699a      	ldr	r2, [r3, #24]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f022 020c 	bic.w	r2, r2, #12
 8004332:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	6999      	ldr	r1, [r3, #24]
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	689a      	ldr	r2, [r3, #8]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	430a      	orrs	r2, r1
 8004344:	619a      	str	r2, [r3, #24]
 8004346:	e060      	b.n	800440a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2b04      	cmp	r3, #4
 800434c:	d11c      	bne.n	8004388 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6818      	ldr	r0, [r3, #0]
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	6819      	ldr	r1, [r3, #0]
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	685a      	ldr	r2, [r3, #4]
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	f000 fad4 	bl	800490a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	699a      	ldr	r2, [r3, #24]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004370:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	6999      	ldr	r1, [r3, #24]
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	021a      	lsls	r2, r3, #8
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	619a      	str	r2, [r3, #24]
 8004386:	e040      	b.n	800440a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2b08      	cmp	r3, #8
 800438c:	d11b      	bne.n	80043c6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6818      	ldr	r0, [r3, #0]
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	6819      	ldr	r1, [r3, #0]
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	685a      	ldr	r2, [r3, #4]
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	f000 fb21 	bl	80049e4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	69da      	ldr	r2, [r3, #28]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f022 020c 	bic.w	r2, r2, #12
 80043b0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	69d9      	ldr	r1, [r3, #28]
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	689a      	ldr	r2, [r3, #8]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	430a      	orrs	r2, r1
 80043c2:	61da      	str	r2, [r3, #28]
 80043c4:	e021      	b.n	800440a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2b0c      	cmp	r3, #12
 80043ca:	d11c      	bne.n	8004406 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6818      	ldr	r0, [r3, #0]
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	6819      	ldr	r1, [r3, #0]
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	685a      	ldr	r2, [r3, #4]
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	f000 fb3e 	bl	8004a5c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	69da      	ldr	r2, [r3, #28]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80043ee:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	69d9      	ldr	r1, [r3, #28]
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	021a      	lsls	r2, r3, #8
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	430a      	orrs	r2, r1
 8004402:	61da      	str	r2, [r3, #28]
 8004404:	e001      	b.n	800440a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004412:	7dfb      	ldrb	r3, [r7, #23]
}
 8004414:	4618      	mov	r0, r3
 8004416:	3718      	adds	r7, #24
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004426:	2300      	movs	r3, #0
 8004428:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004430:	2b01      	cmp	r3, #1
 8004432:	d101      	bne.n	8004438 <HAL_TIM_ConfigClockSource+0x1c>
 8004434:	2302      	movs	r3, #2
 8004436:	e0b4      	b.n	80045a2 <HAL_TIM_ConfigClockSource+0x186>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2202      	movs	r2, #2
 8004444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004456:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800445e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68ba      	ldr	r2, [r7, #8]
 8004466:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004470:	d03e      	beq.n	80044f0 <HAL_TIM_ConfigClockSource+0xd4>
 8004472:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004476:	f200 8087 	bhi.w	8004588 <HAL_TIM_ConfigClockSource+0x16c>
 800447a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800447e:	f000 8086 	beq.w	800458e <HAL_TIM_ConfigClockSource+0x172>
 8004482:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004486:	d87f      	bhi.n	8004588 <HAL_TIM_ConfigClockSource+0x16c>
 8004488:	2b70      	cmp	r3, #112	; 0x70
 800448a:	d01a      	beq.n	80044c2 <HAL_TIM_ConfigClockSource+0xa6>
 800448c:	2b70      	cmp	r3, #112	; 0x70
 800448e:	d87b      	bhi.n	8004588 <HAL_TIM_ConfigClockSource+0x16c>
 8004490:	2b60      	cmp	r3, #96	; 0x60
 8004492:	d050      	beq.n	8004536 <HAL_TIM_ConfigClockSource+0x11a>
 8004494:	2b60      	cmp	r3, #96	; 0x60
 8004496:	d877      	bhi.n	8004588 <HAL_TIM_ConfigClockSource+0x16c>
 8004498:	2b50      	cmp	r3, #80	; 0x50
 800449a:	d03c      	beq.n	8004516 <HAL_TIM_ConfigClockSource+0xfa>
 800449c:	2b50      	cmp	r3, #80	; 0x50
 800449e:	d873      	bhi.n	8004588 <HAL_TIM_ConfigClockSource+0x16c>
 80044a0:	2b40      	cmp	r3, #64	; 0x40
 80044a2:	d058      	beq.n	8004556 <HAL_TIM_ConfigClockSource+0x13a>
 80044a4:	2b40      	cmp	r3, #64	; 0x40
 80044a6:	d86f      	bhi.n	8004588 <HAL_TIM_ConfigClockSource+0x16c>
 80044a8:	2b30      	cmp	r3, #48	; 0x30
 80044aa:	d064      	beq.n	8004576 <HAL_TIM_ConfigClockSource+0x15a>
 80044ac:	2b30      	cmp	r3, #48	; 0x30
 80044ae:	d86b      	bhi.n	8004588 <HAL_TIM_ConfigClockSource+0x16c>
 80044b0:	2b20      	cmp	r3, #32
 80044b2:	d060      	beq.n	8004576 <HAL_TIM_ConfigClockSource+0x15a>
 80044b4:	2b20      	cmp	r3, #32
 80044b6:	d867      	bhi.n	8004588 <HAL_TIM_ConfigClockSource+0x16c>
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d05c      	beq.n	8004576 <HAL_TIM_ConfigClockSource+0x15a>
 80044bc:	2b10      	cmp	r3, #16
 80044be:	d05a      	beq.n	8004576 <HAL_TIM_ConfigClockSource+0x15a>
 80044c0:	e062      	b.n	8004588 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6818      	ldr	r0, [r3, #0]
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	6899      	ldr	r1, [r3, #8]
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	685a      	ldr	r2, [r3, #4]
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	f000 fb1b 	bl	8004b0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80044e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68ba      	ldr	r2, [r7, #8]
 80044ec:	609a      	str	r2, [r3, #8]
      break;
 80044ee:	e04f      	b.n	8004590 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6818      	ldr	r0, [r3, #0]
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	6899      	ldr	r1, [r3, #8]
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	685a      	ldr	r2, [r3, #4]
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	f000 fb04 	bl	8004b0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	689a      	ldr	r2, [r3, #8]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004512:	609a      	str	r2, [r3, #8]
      break;
 8004514:	e03c      	b.n	8004590 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6818      	ldr	r0, [r3, #0]
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	6859      	ldr	r1, [r3, #4]
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	461a      	mov	r2, r3
 8004524:	f000 f9c2 	bl	80048ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2150      	movs	r1, #80	; 0x50
 800452e:	4618      	mov	r0, r3
 8004530:	f000 fad1 	bl	8004ad6 <TIM_ITRx_SetConfig>
      break;
 8004534:	e02c      	b.n	8004590 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6818      	ldr	r0, [r3, #0]
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	6859      	ldr	r1, [r3, #4]
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	461a      	mov	r2, r3
 8004544:	f000 fa1e 	bl	8004984 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2160      	movs	r1, #96	; 0x60
 800454e:	4618      	mov	r0, r3
 8004550:	f000 fac1 	bl	8004ad6 <TIM_ITRx_SetConfig>
      break;
 8004554:	e01c      	b.n	8004590 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6818      	ldr	r0, [r3, #0]
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	6859      	ldr	r1, [r3, #4]
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	461a      	mov	r2, r3
 8004564:	f000 f9a2 	bl	80048ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2140      	movs	r1, #64	; 0x40
 800456e:	4618      	mov	r0, r3
 8004570:	f000 fab1 	bl	8004ad6 <TIM_ITRx_SetConfig>
      break;
 8004574:	e00c      	b.n	8004590 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4619      	mov	r1, r3
 8004580:	4610      	mov	r0, r2
 8004582:	f000 faa8 	bl	8004ad6 <TIM_ITRx_SetConfig>
      break;
 8004586:	e003      	b.n	8004590 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	73fb      	strb	r3, [r7, #15]
      break;
 800458c:	e000      	b.n	8004590 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800458e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3710      	adds	r7, #16
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
	...

080045ac <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80045b6:	2300      	movs	r3, #0
 80045b8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	2b0c      	cmp	r3, #12
 80045be:	d831      	bhi.n	8004624 <HAL_TIM_ReadCapturedValue+0x78>
 80045c0:	a201      	add	r2, pc, #4	; (adr r2, 80045c8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80045c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c6:	bf00      	nop
 80045c8:	080045fd 	.word	0x080045fd
 80045cc:	08004625 	.word	0x08004625
 80045d0:	08004625 	.word	0x08004625
 80045d4:	08004625 	.word	0x08004625
 80045d8:	08004607 	.word	0x08004607
 80045dc:	08004625 	.word	0x08004625
 80045e0:	08004625 	.word	0x08004625
 80045e4:	08004625 	.word	0x08004625
 80045e8:	08004611 	.word	0x08004611
 80045ec:	08004625 	.word	0x08004625
 80045f0:	08004625 	.word	0x08004625
 80045f4:	08004625 	.word	0x08004625
 80045f8:	0800461b 	.word	0x0800461b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004602:	60fb      	str	r3, [r7, #12]

      break;
 8004604:	e00f      	b.n	8004626 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460c:	60fb      	str	r3, [r7, #12]

      break;
 800460e:	e00a      	b.n	8004626 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004616:	60fb      	str	r3, [r7, #12]

      break;
 8004618:	e005      	b.n	8004626 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004620:	60fb      	str	r3, [r7, #12]

      break;
 8004622:	e000      	b.n	8004626 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004624:	bf00      	nop
  }

  return tmpreg;
 8004626:	68fb      	ldr	r3, [r7, #12]
}
 8004628:	4618      	mov	r0, r3
 800462a:	3714      	adds	r7, #20
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004650:	bf00      	nop
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004664:	bf00      	nop
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a40      	ldr	r2, [pc, #256]	; (8004798 <TIM_Base_SetConfig+0x114>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d013      	beq.n	80046c4 <TIM_Base_SetConfig+0x40>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046a2:	d00f      	beq.n	80046c4 <TIM_Base_SetConfig+0x40>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a3d      	ldr	r2, [pc, #244]	; (800479c <TIM_Base_SetConfig+0x118>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d00b      	beq.n	80046c4 <TIM_Base_SetConfig+0x40>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a3c      	ldr	r2, [pc, #240]	; (80047a0 <TIM_Base_SetConfig+0x11c>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d007      	beq.n	80046c4 <TIM_Base_SetConfig+0x40>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a3b      	ldr	r2, [pc, #236]	; (80047a4 <TIM_Base_SetConfig+0x120>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d003      	beq.n	80046c4 <TIM_Base_SetConfig+0x40>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a3a      	ldr	r2, [pc, #232]	; (80047a8 <TIM_Base_SetConfig+0x124>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d108      	bne.n	80046d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a2f      	ldr	r2, [pc, #188]	; (8004798 <TIM_Base_SetConfig+0x114>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d02b      	beq.n	8004736 <TIM_Base_SetConfig+0xb2>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046e4:	d027      	beq.n	8004736 <TIM_Base_SetConfig+0xb2>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a2c      	ldr	r2, [pc, #176]	; (800479c <TIM_Base_SetConfig+0x118>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d023      	beq.n	8004736 <TIM_Base_SetConfig+0xb2>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a2b      	ldr	r2, [pc, #172]	; (80047a0 <TIM_Base_SetConfig+0x11c>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d01f      	beq.n	8004736 <TIM_Base_SetConfig+0xb2>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a2a      	ldr	r2, [pc, #168]	; (80047a4 <TIM_Base_SetConfig+0x120>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d01b      	beq.n	8004736 <TIM_Base_SetConfig+0xb2>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a29      	ldr	r2, [pc, #164]	; (80047a8 <TIM_Base_SetConfig+0x124>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d017      	beq.n	8004736 <TIM_Base_SetConfig+0xb2>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a28      	ldr	r2, [pc, #160]	; (80047ac <TIM_Base_SetConfig+0x128>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d013      	beq.n	8004736 <TIM_Base_SetConfig+0xb2>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a27      	ldr	r2, [pc, #156]	; (80047b0 <TIM_Base_SetConfig+0x12c>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d00f      	beq.n	8004736 <TIM_Base_SetConfig+0xb2>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a26      	ldr	r2, [pc, #152]	; (80047b4 <TIM_Base_SetConfig+0x130>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d00b      	beq.n	8004736 <TIM_Base_SetConfig+0xb2>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a25      	ldr	r2, [pc, #148]	; (80047b8 <TIM_Base_SetConfig+0x134>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d007      	beq.n	8004736 <TIM_Base_SetConfig+0xb2>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a24      	ldr	r2, [pc, #144]	; (80047bc <TIM_Base_SetConfig+0x138>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d003      	beq.n	8004736 <TIM_Base_SetConfig+0xb2>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a23      	ldr	r2, [pc, #140]	; (80047c0 <TIM_Base_SetConfig+0x13c>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d108      	bne.n	8004748 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800473c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	4313      	orrs	r3, r2
 8004746:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	4313      	orrs	r3, r2
 8004754:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	689a      	ldr	r2, [r3, #8]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a0a      	ldr	r2, [pc, #40]	; (8004798 <TIM_Base_SetConfig+0x114>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d003      	beq.n	800477c <TIM_Base_SetConfig+0xf8>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a0c      	ldr	r2, [pc, #48]	; (80047a8 <TIM_Base_SetConfig+0x124>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d103      	bne.n	8004784 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	691a      	ldr	r2, [r3, #16]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	615a      	str	r2, [r3, #20]
}
 800478a:	bf00      	nop
 800478c:	3714      	adds	r7, #20
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	40010000 	.word	0x40010000
 800479c:	40000400 	.word	0x40000400
 80047a0:	40000800 	.word	0x40000800
 80047a4:	40000c00 	.word	0x40000c00
 80047a8:	40010400 	.word	0x40010400
 80047ac:	40014000 	.word	0x40014000
 80047b0:	40014400 	.word	0x40014400
 80047b4:	40014800 	.word	0x40014800
 80047b8:	40001800 	.word	0x40001800
 80047bc:	40001c00 	.word	0x40001c00
 80047c0:	40002000 	.word	0x40002000

080047c4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b087      	sub	sp, #28
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
 80047d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	f023 0201 	bic.w	r2, r3, #1
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	699b      	ldr	r3, [r3, #24]
 80047e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6a1b      	ldr	r3, [r3, #32]
 80047e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	4a28      	ldr	r2, [pc, #160]	; (8004890 <TIM_TI1_SetConfig+0xcc>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d01b      	beq.n	800482a <TIM_TI1_SetConfig+0x66>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047f8:	d017      	beq.n	800482a <TIM_TI1_SetConfig+0x66>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	4a25      	ldr	r2, [pc, #148]	; (8004894 <TIM_TI1_SetConfig+0xd0>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d013      	beq.n	800482a <TIM_TI1_SetConfig+0x66>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	4a24      	ldr	r2, [pc, #144]	; (8004898 <TIM_TI1_SetConfig+0xd4>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d00f      	beq.n	800482a <TIM_TI1_SetConfig+0x66>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	4a23      	ldr	r2, [pc, #140]	; (800489c <TIM_TI1_SetConfig+0xd8>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d00b      	beq.n	800482a <TIM_TI1_SetConfig+0x66>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	4a22      	ldr	r2, [pc, #136]	; (80048a0 <TIM_TI1_SetConfig+0xdc>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d007      	beq.n	800482a <TIM_TI1_SetConfig+0x66>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	4a21      	ldr	r2, [pc, #132]	; (80048a4 <TIM_TI1_SetConfig+0xe0>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d003      	beq.n	800482a <TIM_TI1_SetConfig+0x66>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	4a20      	ldr	r2, [pc, #128]	; (80048a8 <TIM_TI1_SetConfig+0xe4>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d101      	bne.n	800482e <TIM_TI1_SetConfig+0x6a>
 800482a:	2301      	movs	r3, #1
 800482c:	e000      	b.n	8004830 <TIM_TI1_SetConfig+0x6c>
 800482e:	2300      	movs	r3, #0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d008      	beq.n	8004846 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	f023 0303 	bic.w	r3, r3, #3
 800483a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800483c:	697a      	ldr	r2, [r7, #20]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4313      	orrs	r3, r2
 8004842:	617b      	str	r3, [r7, #20]
 8004844:	e003      	b.n	800484e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	f043 0301 	orr.w	r3, r3, #1
 800484c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004854:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	011b      	lsls	r3, r3, #4
 800485a:	b2db      	uxtb	r3, r3
 800485c:	697a      	ldr	r2, [r7, #20]
 800485e:	4313      	orrs	r3, r2
 8004860:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	f023 030a 	bic.w	r3, r3, #10
 8004868:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	f003 030a 	and.w	r3, r3, #10
 8004870:	693a      	ldr	r2, [r7, #16]
 8004872:	4313      	orrs	r3, r2
 8004874:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	693a      	ldr	r2, [r7, #16]
 8004880:	621a      	str	r2, [r3, #32]
}
 8004882:	bf00      	nop
 8004884:	371c      	adds	r7, #28
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	40010000 	.word	0x40010000
 8004894:	40000400 	.word	0x40000400
 8004898:	40000800 	.word	0x40000800
 800489c:	40000c00 	.word	0x40000c00
 80048a0:	40010400 	.word	0x40010400
 80048a4:	40014000 	.word	0x40014000
 80048a8:	40001800 	.word	0x40001800

080048ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b087      	sub	sp, #28
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6a1b      	ldr	r3, [r3, #32]
 80048bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	f023 0201 	bic.w	r2, r3, #1
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	011b      	lsls	r3, r3, #4
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	4313      	orrs	r3, r2
 80048e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	f023 030a 	bic.w	r3, r3, #10
 80048e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	693a      	ldr	r2, [r7, #16]
 80048f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	697a      	ldr	r2, [r7, #20]
 80048fc:	621a      	str	r2, [r3, #32]
}
 80048fe:	bf00      	nop
 8004900:	371c      	adds	r7, #28
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr

0800490a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800490a:	b480      	push	{r7}
 800490c:	b087      	sub	sp, #28
 800490e:	af00      	add	r7, sp, #0
 8004910:	60f8      	str	r0, [r7, #12]
 8004912:	60b9      	str	r1, [r7, #8]
 8004914:	607a      	str	r2, [r7, #4]
 8004916:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6a1b      	ldr	r3, [r3, #32]
 800491c:	f023 0210 	bic.w	r2, r3, #16
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6a1b      	ldr	r3, [r3, #32]
 800492e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004936:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	021b      	lsls	r3, r3, #8
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	4313      	orrs	r3, r2
 8004940:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004948:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	031b      	lsls	r3, r3, #12
 800494e:	b29b      	uxth	r3, r3
 8004950:	697a      	ldr	r2, [r7, #20]
 8004952:	4313      	orrs	r3, r2
 8004954:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800495c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	011b      	lsls	r3, r3, #4
 8004962:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004966:	693a      	ldr	r2, [r7, #16]
 8004968:	4313      	orrs	r3, r2
 800496a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	693a      	ldr	r2, [r7, #16]
 8004976:	621a      	str	r2, [r3, #32]
}
 8004978:	bf00      	nop
 800497a:	371c      	adds	r7, #28
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004984:	b480      	push	{r7}
 8004986:	b087      	sub	sp, #28
 8004988:	af00      	add	r7, sp, #0
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6a1b      	ldr	r3, [r3, #32]
 8004994:	f023 0210 	bic.w	r2, r3, #16
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049ae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	031b      	lsls	r3, r3, #12
 80049b4:	697a      	ldr	r2, [r7, #20]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80049c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	011b      	lsls	r3, r3, #4
 80049c6:	693a      	ldr	r2, [r7, #16]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	621a      	str	r2, [r3, #32]
}
 80049d8:	bf00      	nop
 80049da:	371c      	adds	r7, #28
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b087      	sub	sp, #28
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	607a      	str	r2, [r7, #4]
 80049f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	69db      	ldr	r3, [r3, #28]
 8004a02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6a1b      	ldr	r3, [r3, #32]
 8004a08:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	f023 0303 	bic.w	r3, r3, #3
 8004a10:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a20:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	011b      	lsls	r3, r3, #4
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	697a      	ldr	r2, [r7, #20]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004a34:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	021b      	lsls	r3, r3, #8
 8004a3a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004a3e:	693a      	ldr	r2, [r7, #16]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	693a      	ldr	r2, [r7, #16]
 8004a4e:	621a      	str	r2, [r3, #32]
}
 8004a50:	bf00      	nop
 8004a52:	371c      	adds	r7, #28
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b087      	sub	sp, #28
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
 8004a68:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	69db      	ldr	r3, [r3, #28]
 8004a7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6a1b      	ldr	r3, [r3, #32]
 8004a80:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a88:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	021b      	lsls	r3, r3, #8
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a9a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	031b      	lsls	r3, r3, #12
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	697a      	ldr	r2, [r7, #20]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004aae:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	031b      	lsls	r3, r3, #12
 8004ab4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	697a      	ldr	r2, [r7, #20]
 8004ac2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	621a      	str	r2, [r3, #32]
}
 8004aca:	bf00      	nop
 8004acc:	371c      	adds	r7, #28
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr

08004ad6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ad6:	b480      	push	{r7}
 8004ad8:	b085      	sub	sp, #20
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
 8004ade:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004aee:	683a      	ldr	r2, [r7, #0]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	f043 0307 	orr.w	r3, r3, #7
 8004af8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	609a      	str	r2, [r3, #8]
}
 8004b00:	bf00      	nop
 8004b02:	3714      	adds	r7, #20
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b087      	sub	sp, #28
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]
 8004b18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	021a      	lsls	r2, r3, #8
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	431a      	orrs	r2, r3
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	697a      	ldr	r2, [r7, #20]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	697a      	ldr	r2, [r7, #20]
 8004b3e:	609a      	str	r2, [r3, #8]
}
 8004b40:	bf00      	nop
 8004b42:	371c      	adds	r7, #28
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d101      	bne.n	8004b64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b60:	2302      	movs	r3, #2
 8004b62:	e05a      	b.n	8004c1a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2202      	movs	r2, #2
 8004b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a21      	ldr	r2, [pc, #132]	; (8004c28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d022      	beq.n	8004bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bb0:	d01d      	beq.n	8004bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a1d      	ldr	r2, [pc, #116]	; (8004c2c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d018      	beq.n	8004bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a1b      	ldr	r2, [pc, #108]	; (8004c30 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d013      	beq.n	8004bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a1a      	ldr	r2, [pc, #104]	; (8004c34 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d00e      	beq.n	8004bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a18      	ldr	r2, [pc, #96]	; (8004c38 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d009      	beq.n	8004bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a17      	ldr	r2, [pc, #92]	; (8004c3c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d004      	beq.n	8004bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a15      	ldr	r2, [pc, #84]	; (8004c40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d10c      	bne.n	8004c08 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bf4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	68ba      	ldr	r2, [r7, #8]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68ba      	ldr	r2, [r7, #8]
 8004c06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3714      	adds	r7, #20
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	40010000 	.word	0x40010000
 8004c2c:	40000400 	.word	0x40000400
 8004c30:	40000800 	.word	0x40000800
 8004c34:	40000c00 	.word	0x40000c00
 8004c38:	40010400 	.word	0x40010400
 8004c3c:	40014000 	.word	0x40014000
 8004c40:	40001800 	.word	0x40001800

08004c44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c60:	bf00      	nop
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d101      	bne.n	8004c7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e03f      	b.n	8004cfe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d106      	bne.n	8004c98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f7fd f86a 	bl	8001d6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2224      	movs	r2, #36	; 0x24
 8004c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68da      	ldr	r2, [r3, #12]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 f929 	bl	8004f08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	691a      	ldr	r2, [r3, #16]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cc4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	695a      	ldr	r2, [r3, #20]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cd4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68da      	ldr	r2, [r3, #12]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ce4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2220      	movs	r2, #32
 8004cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3708      	adds	r7, #8
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b08a      	sub	sp, #40	; 0x28
 8004d0a:	af02      	add	r7, sp, #8
 8004d0c:	60f8      	str	r0, [r7, #12]
 8004d0e:	60b9      	str	r1, [r7, #8]
 8004d10:	603b      	str	r3, [r7, #0]
 8004d12:	4613      	mov	r3, r2
 8004d14:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d16:	2300      	movs	r3, #0
 8004d18:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	2b20      	cmp	r3, #32
 8004d24:	d17c      	bne.n	8004e20 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d002      	beq.n	8004d32 <HAL_UART_Transmit+0x2c>
 8004d2c:	88fb      	ldrh	r3, [r7, #6]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d101      	bne.n	8004d36 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e075      	b.n	8004e22 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d101      	bne.n	8004d44 <HAL_UART_Transmit+0x3e>
 8004d40:	2302      	movs	r3, #2
 8004d42:	e06e      	b.n	8004e22 <HAL_UART_Transmit+0x11c>
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2221      	movs	r2, #33	; 0x21
 8004d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d5a:	f7fd f9eb 	bl	8002134 <HAL_GetTick>
 8004d5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	88fa      	ldrh	r2, [r7, #6]
 8004d64:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	88fa      	ldrh	r2, [r7, #6]
 8004d6a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d74:	d108      	bne.n	8004d88 <HAL_UART_Transmit+0x82>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d104      	bne.n	8004d88 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	61bb      	str	r3, [r7, #24]
 8004d86:	e003      	b.n	8004d90 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004d98:	e02a      	b.n	8004df0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	9300      	str	r3, [sp, #0]
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	2200      	movs	r2, #0
 8004da2:	2180      	movs	r1, #128	; 0x80
 8004da4:	68f8      	ldr	r0, [r7, #12]
 8004da6:	f000 f840 	bl	8004e2a <UART_WaitOnFlagUntilTimeout>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d001      	beq.n	8004db4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	e036      	b.n	8004e22 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d10b      	bne.n	8004dd2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	881b      	ldrh	r3, [r3, #0]
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dc8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	3302      	adds	r3, #2
 8004dce:	61bb      	str	r3, [r7, #24]
 8004dd0:	e007      	b.n	8004de2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	781a      	ldrb	r2, [r3, #0]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	3301      	adds	r3, #1
 8004de0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	3b01      	subs	r3, #1
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1cf      	bne.n	8004d9a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	9300      	str	r3, [sp, #0]
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	2200      	movs	r2, #0
 8004e02:	2140      	movs	r1, #64	; 0x40
 8004e04:	68f8      	ldr	r0, [r7, #12]
 8004e06:	f000 f810 	bl	8004e2a <UART_WaitOnFlagUntilTimeout>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d001      	beq.n	8004e14 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e006      	b.n	8004e22 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2220      	movs	r2, #32
 8004e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	e000      	b.n	8004e22 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004e20:	2302      	movs	r3, #2
  }
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3720      	adds	r7, #32
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004e2a:	b580      	push	{r7, lr}
 8004e2c:	b090      	sub	sp, #64	; 0x40
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	60f8      	str	r0, [r7, #12]
 8004e32:	60b9      	str	r1, [r7, #8]
 8004e34:	603b      	str	r3, [r7, #0]
 8004e36:	4613      	mov	r3, r2
 8004e38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e3a:	e050      	b.n	8004ede <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e42:	d04c      	beq.n	8004ede <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004e44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d007      	beq.n	8004e5a <UART_WaitOnFlagUntilTimeout+0x30>
 8004e4a:	f7fd f973 	bl	8002134 <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d241      	bcs.n	8004ede <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	330c      	adds	r3, #12
 8004e60:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e64:	e853 3f00 	ldrex	r3, [r3]
 8004e68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	330c      	adds	r3, #12
 8004e78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e7a:	637a      	str	r2, [r7, #52]	; 0x34
 8004e7c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e82:	e841 2300 	strex	r3, r2, [r1]
 8004e86:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1e5      	bne.n	8004e5a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	3314      	adds	r3, #20
 8004e94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	e853 3f00 	ldrex	r3, [r3]
 8004e9c:	613b      	str	r3, [r7, #16]
   return(result);
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	f023 0301 	bic.w	r3, r3, #1
 8004ea4:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	3314      	adds	r3, #20
 8004eac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004eae:	623a      	str	r2, [r7, #32]
 8004eb0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb2:	69f9      	ldr	r1, [r7, #28]
 8004eb4:	6a3a      	ldr	r2, [r7, #32]
 8004eb6:	e841 2300 	strex	r3, r2, [r1]
 8004eba:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1e5      	bne.n	8004e8e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2220      	movs	r2, #32
 8004ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2220      	movs	r2, #32
 8004ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e00f      	b.n	8004efe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	68ba      	ldr	r2, [r7, #8]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	bf0c      	ite	eq
 8004eee:	2301      	moveq	r3, #1
 8004ef0:	2300      	movne	r3, #0
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	79fb      	ldrb	r3, [r7, #7]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d09f      	beq.n	8004e3c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3740      	adds	r7, #64	; 0x40
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
	...

08004f08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f0c:	b0c0      	sub	sp, #256	; 0x100
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	691b      	ldr	r3, [r3, #16]
 8004f1c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f24:	68d9      	ldr	r1, [r3, #12]
 8004f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	ea40 0301 	orr.w	r3, r0, r1
 8004f30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f36:	689a      	ldr	r2, [r3, #8]
 8004f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	431a      	orrs	r2, r3
 8004f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	431a      	orrs	r2, r3
 8004f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f4c:	69db      	ldr	r3, [r3, #28]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004f60:	f021 010c 	bic.w	r1, r1, #12
 8004f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f6e:	430b      	orrs	r3, r1
 8004f70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f82:	6999      	ldr	r1, [r3, #24]
 8004f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	ea40 0301 	orr.w	r3, r0, r1
 8004f8e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	4b8f      	ldr	r3, [pc, #572]	; (80051d4 <UART_SetConfig+0x2cc>)
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d005      	beq.n	8004fa8 <UART_SetConfig+0xa0>
 8004f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	4b8d      	ldr	r3, [pc, #564]	; (80051d8 <UART_SetConfig+0x2d0>)
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d104      	bne.n	8004fb2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004fa8:	f7fe ffd8 	bl	8003f5c <HAL_RCC_GetPCLK2Freq>
 8004fac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004fb0:	e003      	b.n	8004fba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004fb2:	f7fe ffbf 	bl	8003f34 <HAL_RCC_GetPCLK1Freq>
 8004fb6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fbe:	69db      	ldr	r3, [r3, #28]
 8004fc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fc4:	f040 810c 	bne.w	80051e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004fc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004fd2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004fd6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004fda:	4622      	mov	r2, r4
 8004fdc:	462b      	mov	r3, r5
 8004fde:	1891      	adds	r1, r2, r2
 8004fe0:	65b9      	str	r1, [r7, #88]	; 0x58
 8004fe2:	415b      	adcs	r3, r3
 8004fe4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004fe6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004fea:	4621      	mov	r1, r4
 8004fec:	eb12 0801 	adds.w	r8, r2, r1
 8004ff0:	4629      	mov	r1, r5
 8004ff2:	eb43 0901 	adc.w	r9, r3, r1
 8004ff6:	f04f 0200 	mov.w	r2, #0
 8004ffa:	f04f 0300 	mov.w	r3, #0
 8004ffe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005002:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005006:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800500a:	4690      	mov	r8, r2
 800500c:	4699      	mov	r9, r3
 800500e:	4623      	mov	r3, r4
 8005010:	eb18 0303 	adds.w	r3, r8, r3
 8005014:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005018:	462b      	mov	r3, r5
 800501a:	eb49 0303 	adc.w	r3, r9, r3
 800501e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800502e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005032:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005036:	460b      	mov	r3, r1
 8005038:	18db      	adds	r3, r3, r3
 800503a:	653b      	str	r3, [r7, #80]	; 0x50
 800503c:	4613      	mov	r3, r2
 800503e:	eb42 0303 	adc.w	r3, r2, r3
 8005042:	657b      	str	r3, [r7, #84]	; 0x54
 8005044:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005048:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800504c:	f7fb fdfc 	bl	8000c48 <__aeabi_uldivmod>
 8005050:	4602      	mov	r2, r0
 8005052:	460b      	mov	r3, r1
 8005054:	4b61      	ldr	r3, [pc, #388]	; (80051dc <UART_SetConfig+0x2d4>)
 8005056:	fba3 2302 	umull	r2, r3, r3, r2
 800505a:	095b      	lsrs	r3, r3, #5
 800505c:	011c      	lsls	r4, r3, #4
 800505e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005062:	2200      	movs	r2, #0
 8005064:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005068:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800506c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005070:	4642      	mov	r2, r8
 8005072:	464b      	mov	r3, r9
 8005074:	1891      	adds	r1, r2, r2
 8005076:	64b9      	str	r1, [r7, #72]	; 0x48
 8005078:	415b      	adcs	r3, r3
 800507a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800507c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005080:	4641      	mov	r1, r8
 8005082:	eb12 0a01 	adds.w	sl, r2, r1
 8005086:	4649      	mov	r1, r9
 8005088:	eb43 0b01 	adc.w	fp, r3, r1
 800508c:	f04f 0200 	mov.w	r2, #0
 8005090:	f04f 0300 	mov.w	r3, #0
 8005094:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005098:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800509c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050a0:	4692      	mov	sl, r2
 80050a2:	469b      	mov	fp, r3
 80050a4:	4643      	mov	r3, r8
 80050a6:	eb1a 0303 	adds.w	r3, sl, r3
 80050aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80050ae:	464b      	mov	r3, r9
 80050b0:	eb4b 0303 	adc.w	r3, fp, r3
 80050b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80050b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80050c4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80050c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80050cc:	460b      	mov	r3, r1
 80050ce:	18db      	adds	r3, r3, r3
 80050d0:	643b      	str	r3, [r7, #64]	; 0x40
 80050d2:	4613      	mov	r3, r2
 80050d4:	eb42 0303 	adc.w	r3, r2, r3
 80050d8:	647b      	str	r3, [r7, #68]	; 0x44
 80050da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80050de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80050e2:	f7fb fdb1 	bl	8000c48 <__aeabi_uldivmod>
 80050e6:	4602      	mov	r2, r0
 80050e8:	460b      	mov	r3, r1
 80050ea:	4611      	mov	r1, r2
 80050ec:	4b3b      	ldr	r3, [pc, #236]	; (80051dc <UART_SetConfig+0x2d4>)
 80050ee:	fba3 2301 	umull	r2, r3, r3, r1
 80050f2:	095b      	lsrs	r3, r3, #5
 80050f4:	2264      	movs	r2, #100	; 0x64
 80050f6:	fb02 f303 	mul.w	r3, r2, r3
 80050fa:	1acb      	subs	r3, r1, r3
 80050fc:	00db      	lsls	r3, r3, #3
 80050fe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005102:	4b36      	ldr	r3, [pc, #216]	; (80051dc <UART_SetConfig+0x2d4>)
 8005104:	fba3 2302 	umull	r2, r3, r3, r2
 8005108:	095b      	lsrs	r3, r3, #5
 800510a:	005b      	lsls	r3, r3, #1
 800510c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005110:	441c      	add	r4, r3
 8005112:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005116:	2200      	movs	r2, #0
 8005118:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800511c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005120:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005124:	4642      	mov	r2, r8
 8005126:	464b      	mov	r3, r9
 8005128:	1891      	adds	r1, r2, r2
 800512a:	63b9      	str	r1, [r7, #56]	; 0x38
 800512c:	415b      	adcs	r3, r3
 800512e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005130:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005134:	4641      	mov	r1, r8
 8005136:	1851      	adds	r1, r2, r1
 8005138:	6339      	str	r1, [r7, #48]	; 0x30
 800513a:	4649      	mov	r1, r9
 800513c:	414b      	adcs	r3, r1
 800513e:	637b      	str	r3, [r7, #52]	; 0x34
 8005140:	f04f 0200 	mov.w	r2, #0
 8005144:	f04f 0300 	mov.w	r3, #0
 8005148:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800514c:	4659      	mov	r1, fp
 800514e:	00cb      	lsls	r3, r1, #3
 8005150:	4651      	mov	r1, sl
 8005152:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005156:	4651      	mov	r1, sl
 8005158:	00ca      	lsls	r2, r1, #3
 800515a:	4610      	mov	r0, r2
 800515c:	4619      	mov	r1, r3
 800515e:	4603      	mov	r3, r0
 8005160:	4642      	mov	r2, r8
 8005162:	189b      	adds	r3, r3, r2
 8005164:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005168:	464b      	mov	r3, r9
 800516a:	460a      	mov	r2, r1
 800516c:	eb42 0303 	adc.w	r3, r2, r3
 8005170:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005180:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005184:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005188:	460b      	mov	r3, r1
 800518a:	18db      	adds	r3, r3, r3
 800518c:	62bb      	str	r3, [r7, #40]	; 0x28
 800518e:	4613      	mov	r3, r2
 8005190:	eb42 0303 	adc.w	r3, r2, r3
 8005194:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005196:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800519a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800519e:	f7fb fd53 	bl	8000c48 <__aeabi_uldivmod>
 80051a2:	4602      	mov	r2, r0
 80051a4:	460b      	mov	r3, r1
 80051a6:	4b0d      	ldr	r3, [pc, #52]	; (80051dc <UART_SetConfig+0x2d4>)
 80051a8:	fba3 1302 	umull	r1, r3, r3, r2
 80051ac:	095b      	lsrs	r3, r3, #5
 80051ae:	2164      	movs	r1, #100	; 0x64
 80051b0:	fb01 f303 	mul.w	r3, r1, r3
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	00db      	lsls	r3, r3, #3
 80051b8:	3332      	adds	r3, #50	; 0x32
 80051ba:	4a08      	ldr	r2, [pc, #32]	; (80051dc <UART_SetConfig+0x2d4>)
 80051bc:	fba2 2303 	umull	r2, r3, r2, r3
 80051c0:	095b      	lsrs	r3, r3, #5
 80051c2:	f003 0207 	and.w	r2, r3, #7
 80051c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4422      	add	r2, r4
 80051ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80051d0:	e105      	b.n	80053de <UART_SetConfig+0x4d6>
 80051d2:	bf00      	nop
 80051d4:	40011000 	.word	0x40011000
 80051d8:	40011400 	.word	0x40011400
 80051dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051e4:	2200      	movs	r2, #0
 80051e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80051ea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80051ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80051f2:	4642      	mov	r2, r8
 80051f4:	464b      	mov	r3, r9
 80051f6:	1891      	adds	r1, r2, r2
 80051f8:	6239      	str	r1, [r7, #32]
 80051fa:	415b      	adcs	r3, r3
 80051fc:	627b      	str	r3, [r7, #36]	; 0x24
 80051fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005202:	4641      	mov	r1, r8
 8005204:	1854      	adds	r4, r2, r1
 8005206:	4649      	mov	r1, r9
 8005208:	eb43 0501 	adc.w	r5, r3, r1
 800520c:	f04f 0200 	mov.w	r2, #0
 8005210:	f04f 0300 	mov.w	r3, #0
 8005214:	00eb      	lsls	r3, r5, #3
 8005216:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800521a:	00e2      	lsls	r2, r4, #3
 800521c:	4614      	mov	r4, r2
 800521e:	461d      	mov	r5, r3
 8005220:	4643      	mov	r3, r8
 8005222:	18e3      	adds	r3, r4, r3
 8005224:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005228:	464b      	mov	r3, r9
 800522a:	eb45 0303 	adc.w	r3, r5, r3
 800522e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800523e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005242:	f04f 0200 	mov.w	r2, #0
 8005246:	f04f 0300 	mov.w	r3, #0
 800524a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800524e:	4629      	mov	r1, r5
 8005250:	008b      	lsls	r3, r1, #2
 8005252:	4621      	mov	r1, r4
 8005254:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005258:	4621      	mov	r1, r4
 800525a:	008a      	lsls	r2, r1, #2
 800525c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005260:	f7fb fcf2 	bl	8000c48 <__aeabi_uldivmod>
 8005264:	4602      	mov	r2, r0
 8005266:	460b      	mov	r3, r1
 8005268:	4b60      	ldr	r3, [pc, #384]	; (80053ec <UART_SetConfig+0x4e4>)
 800526a:	fba3 2302 	umull	r2, r3, r3, r2
 800526e:	095b      	lsrs	r3, r3, #5
 8005270:	011c      	lsls	r4, r3, #4
 8005272:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005276:	2200      	movs	r2, #0
 8005278:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800527c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005280:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005284:	4642      	mov	r2, r8
 8005286:	464b      	mov	r3, r9
 8005288:	1891      	adds	r1, r2, r2
 800528a:	61b9      	str	r1, [r7, #24]
 800528c:	415b      	adcs	r3, r3
 800528e:	61fb      	str	r3, [r7, #28]
 8005290:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005294:	4641      	mov	r1, r8
 8005296:	1851      	adds	r1, r2, r1
 8005298:	6139      	str	r1, [r7, #16]
 800529a:	4649      	mov	r1, r9
 800529c:	414b      	adcs	r3, r1
 800529e:	617b      	str	r3, [r7, #20]
 80052a0:	f04f 0200 	mov.w	r2, #0
 80052a4:	f04f 0300 	mov.w	r3, #0
 80052a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80052ac:	4659      	mov	r1, fp
 80052ae:	00cb      	lsls	r3, r1, #3
 80052b0:	4651      	mov	r1, sl
 80052b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052b6:	4651      	mov	r1, sl
 80052b8:	00ca      	lsls	r2, r1, #3
 80052ba:	4610      	mov	r0, r2
 80052bc:	4619      	mov	r1, r3
 80052be:	4603      	mov	r3, r0
 80052c0:	4642      	mov	r2, r8
 80052c2:	189b      	adds	r3, r3, r2
 80052c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80052c8:	464b      	mov	r3, r9
 80052ca:	460a      	mov	r2, r1
 80052cc:	eb42 0303 	adc.w	r3, r2, r3
 80052d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80052d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80052de:	67fa      	str	r2, [r7, #124]	; 0x7c
 80052e0:	f04f 0200 	mov.w	r2, #0
 80052e4:	f04f 0300 	mov.w	r3, #0
 80052e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80052ec:	4649      	mov	r1, r9
 80052ee:	008b      	lsls	r3, r1, #2
 80052f0:	4641      	mov	r1, r8
 80052f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052f6:	4641      	mov	r1, r8
 80052f8:	008a      	lsls	r2, r1, #2
 80052fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80052fe:	f7fb fca3 	bl	8000c48 <__aeabi_uldivmod>
 8005302:	4602      	mov	r2, r0
 8005304:	460b      	mov	r3, r1
 8005306:	4b39      	ldr	r3, [pc, #228]	; (80053ec <UART_SetConfig+0x4e4>)
 8005308:	fba3 1302 	umull	r1, r3, r3, r2
 800530c:	095b      	lsrs	r3, r3, #5
 800530e:	2164      	movs	r1, #100	; 0x64
 8005310:	fb01 f303 	mul.w	r3, r1, r3
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	011b      	lsls	r3, r3, #4
 8005318:	3332      	adds	r3, #50	; 0x32
 800531a:	4a34      	ldr	r2, [pc, #208]	; (80053ec <UART_SetConfig+0x4e4>)
 800531c:	fba2 2303 	umull	r2, r3, r2, r3
 8005320:	095b      	lsrs	r3, r3, #5
 8005322:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005326:	441c      	add	r4, r3
 8005328:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800532c:	2200      	movs	r2, #0
 800532e:	673b      	str	r3, [r7, #112]	; 0x70
 8005330:	677a      	str	r2, [r7, #116]	; 0x74
 8005332:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005336:	4642      	mov	r2, r8
 8005338:	464b      	mov	r3, r9
 800533a:	1891      	adds	r1, r2, r2
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	415b      	adcs	r3, r3
 8005340:	60fb      	str	r3, [r7, #12]
 8005342:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005346:	4641      	mov	r1, r8
 8005348:	1851      	adds	r1, r2, r1
 800534a:	6039      	str	r1, [r7, #0]
 800534c:	4649      	mov	r1, r9
 800534e:	414b      	adcs	r3, r1
 8005350:	607b      	str	r3, [r7, #4]
 8005352:	f04f 0200 	mov.w	r2, #0
 8005356:	f04f 0300 	mov.w	r3, #0
 800535a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800535e:	4659      	mov	r1, fp
 8005360:	00cb      	lsls	r3, r1, #3
 8005362:	4651      	mov	r1, sl
 8005364:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005368:	4651      	mov	r1, sl
 800536a:	00ca      	lsls	r2, r1, #3
 800536c:	4610      	mov	r0, r2
 800536e:	4619      	mov	r1, r3
 8005370:	4603      	mov	r3, r0
 8005372:	4642      	mov	r2, r8
 8005374:	189b      	adds	r3, r3, r2
 8005376:	66bb      	str	r3, [r7, #104]	; 0x68
 8005378:	464b      	mov	r3, r9
 800537a:	460a      	mov	r2, r1
 800537c:	eb42 0303 	adc.w	r3, r2, r3
 8005380:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	663b      	str	r3, [r7, #96]	; 0x60
 800538c:	667a      	str	r2, [r7, #100]	; 0x64
 800538e:	f04f 0200 	mov.w	r2, #0
 8005392:	f04f 0300 	mov.w	r3, #0
 8005396:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800539a:	4649      	mov	r1, r9
 800539c:	008b      	lsls	r3, r1, #2
 800539e:	4641      	mov	r1, r8
 80053a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053a4:	4641      	mov	r1, r8
 80053a6:	008a      	lsls	r2, r1, #2
 80053a8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80053ac:	f7fb fc4c 	bl	8000c48 <__aeabi_uldivmod>
 80053b0:	4602      	mov	r2, r0
 80053b2:	460b      	mov	r3, r1
 80053b4:	4b0d      	ldr	r3, [pc, #52]	; (80053ec <UART_SetConfig+0x4e4>)
 80053b6:	fba3 1302 	umull	r1, r3, r3, r2
 80053ba:	095b      	lsrs	r3, r3, #5
 80053bc:	2164      	movs	r1, #100	; 0x64
 80053be:	fb01 f303 	mul.w	r3, r1, r3
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	011b      	lsls	r3, r3, #4
 80053c6:	3332      	adds	r3, #50	; 0x32
 80053c8:	4a08      	ldr	r2, [pc, #32]	; (80053ec <UART_SetConfig+0x4e4>)
 80053ca:	fba2 2303 	umull	r2, r3, r2, r3
 80053ce:	095b      	lsrs	r3, r3, #5
 80053d0:	f003 020f 	and.w	r2, r3, #15
 80053d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4422      	add	r2, r4
 80053dc:	609a      	str	r2, [r3, #8]
}
 80053de:	bf00      	nop
 80053e0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80053e4:	46bd      	mov	sp, r7
 80053e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053ea:	bf00      	nop
 80053ec:	51eb851f 	.word	0x51eb851f

080053f0 <__errno>:
 80053f0:	4b01      	ldr	r3, [pc, #4]	; (80053f8 <__errno+0x8>)
 80053f2:	6818      	ldr	r0, [r3, #0]
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	20000010 	.word	0x20000010

080053fc <__libc_init_array>:
 80053fc:	b570      	push	{r4, r5, r6, lr}
 80053fe:	4d0d      	ldr	r5, [pc, #52]	; (8005434 <__libc_init_array+0x38>)
 8005400:	4c0d      	ldr	r4, [pc, #52]	; (8005438 <__libc_init_array+0x3c>)
 8005402:	1b64      	subs	r4, r4, r5
 8005404:	10a4      	asrs	r4, r4, #2
 8005406:	2600      	movs	r6, #0
 8005408:	42a6      	cmp	r6, r4
 800540a:	d109      	bne.n	8005420 <__libc_init_array+0x24>
 800540c:	4d0b      	ldr	r5, [pc, #44]	; (800543c <__libc_init_array+0x40>)
 800540e:	4c0c      	ldr	r4, [pc, #48]	; (8005440 <__libc_init_array+0x44>)
 8005410:	f003 f984 	bl	800871c <_init>
 8005414:	1b64      	subs	r4, r4, r5
 8005416:	10a4      	asrs	r4, r4, #2
 8005418:	2600      	movs	r6, #0
 800541a:	42a6      	cmp	r6, r4
 800541c:	d105      	bne.n	800542a <__libc_init_array+0x2e>
 800541e:	bd70      	pop	{r4, r5, r6, pc}
 8005420:	f855 3b04 	ldr.w	r3, [r5], #4
 8005424:	4798      	blx	r3
 8005426:	3601      	adds	r6, #1
 8005428:	e7ee      	b.n	8005408 <__libc_init_array+0xc>
 800542a:	f855 3b04 	ldr.w	r3, [r5], #4
 800542e:	4798      	blx	r3
 8005430:	3601      	adds	r6, #1
 8005432:	e7f2      	b.n	800541a <__libc_init_array+0x1e>
 8005434:	08008c00 	.word	0x08008c00
 8005438:	08008c00 	.word	0x08008c00
 800543c:	08008c00 	.word	0x08008c00
 8005440:	08008c04 	.word	0x08008c04

08005444 <memset>:
 8005444:	4402      	add	r2, r0
 8005446:	4603      	mov	r3, r0
 8005448:	4293      	cmp	r3, r2
 800544a:	d100      	bne.n	800544e <memset+0xa>
 800544c:	4770      	bx	lr
 800544e:	f803 1b01 	strb.w	r1, [r3], #1
 8005452:	e7f9      	b.n	8005448 <memset+0x4>

08005454 <__cvt>:
 8005454:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005458:	ec55 4b10 	vmov	r4, r5, d0
 800545c:	2d00      	cmp	r5, #0
 800545e:	460e      	mov	r6, r1
 8005460:	4619      	mov	r1, r3
 8005462:	462b      	mov	r3, r5
 8005464:	bfbb      	ittet	lt
 8005466:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800546a:	461d      	movlt	r5, r3
 800546c:	2300      	movge	r3, #0
 800546e:	232d      	movlt	r3, #45	; 0x2d
 8005470:	700b      	strb	r3, [r1, #0]
 8005472:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005474:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005478:	4691      	mov	r9, r2
 800547a:	f023 0820 	bic.w	r8, r3, #32
 800547e:	bfbc      	itt	lt
 8005480:	4622      	movlt	r2, r4
 8005482:	4614      	movlt	r4, r2
 8005484:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005488:	d005      	beq.n	8005496 <__cvt+0x42>
 800548a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800548e:	d100      	bne.n	8005492 <__cvt+0x3e>
 8005490:	3601      	adds	r6, #1
 8005492:	2102      	movs	r1, #2
 8005494:	e000      	b.n	8005498 <__cvt+0x44>
 8005496:	2103      	movs	r1, #3
 8005498:	ab03      	add	r3, sp, #12
 800549a:	9301      	str	r3, [sp, #4]
 800549c:	ab02      	add	r3, sp, #8
 800549e:	9300      	str	r3, [sp, #0]
 80054a0:	ec45 4b10 	vmov	d0, r4, r5
 80054a4:	4653      	mov	r3, sl
 80054a6:	4632      	mov	r2, r6
 80054a8:	f000 fcf2 	bl	8005e90 <_dtoa_r>
 80054ac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80054b0:	4607      	mov	r7, r0
 80054b2:	d102      	bne.n	80054ba <__cvt+0x66>
 80054b4:	f019 0f01 	tst.w	r9, #1
 80054b8:	d022      	beq.n	8005500 <__cvt+0xac>
 80054ba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80054be:	eb07 0906 	add.w	r9, r7, r6
 80054c2:	d110      	bne.n	80054e6 <__cvt+0x92>
 80054c4:	783b      	ldrb	r3, [r7, #0]
 80054c6:	2b30      	cmp	r3, #48	; 0x30
 80054c8:	d10a      	bne.n	80054e0 <__cvt+0x8c>
 80054ca:	2200      	movs	r2, #0
 80054cc:	2300      	movs	r3, #0
 80054ce:	4620      	mov	r0, r4
 80054d0:	4629      	mov	r1, r5
 80054d2:	f7fb faf9 	bl	8000ac8 <__aeabi_dcmpeq>
 80054d6:	b918      	cbnz	r0, 80054e0 <__cvt+0x8c>
 80054d8:	f1c6 0601 	rsb	r6, r6, #1
 80054dc:	f8ca 6000 	str.w	r6, [sl]
 80054e0:	f8da 3000 	ldr.w	r3, [sl]
 80054e4:	4499      	add	r9, r3
 80054e6:	2200      	movs	r2, #0
 80054e8:	2300      	movs	r3, #0
 80054ea:	4620      	mov	r0, r4
 80054ec:	4629      	mov	r1, r5
 80054ee:	f7fb faeb 	bl	8000ac8 <__aeabi_dcmpeq>
 80054f2:	b108      	cbz	r0, 80054f8 <__cvt+0xa4>
 80054f4:	f8cd 900c 	str.w	r9, [sp, #12]
 80054f8:	2230      	movs	r2, #48	; 0x30
 80054fa:	9b03      	ldr	r3, [sp, #12]
 80054fc:	454b      	cmp	r3, r9
 80054fe:	d307      	bcc.n	8005510 <__cvt+0xbc>
 8005500:	9b03      	ldr	r3, [sp, #12]
 8005502:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005504:	1bdb      	subs	r3, r3, r7
 8005506:	4638      	mov	r0, r7
 8005508:	6013      	str	r3, [r2, #0]
 800550a:	b004      	add	sp, #16
 800550c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005510:	1c59      	adds	r1, r3, #1
 8005512:	9103      	str	r1, [sp, #12]
 8005514:	701a      	strb	r2, [r3, #0]
 8005516:	e7f0      	b.n	80054fa <__cvt+0xa6>

08005518 <__exponent>:
 8005518:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800551a:	4603      	mov	r3, r0
 800551c:	2900      	cmp	r1, #0
 800551e:	bfb8      	it	lt
 8005520:	4249      	neglt	r1, r1
 8005522:	f803 2b02 	strb.w	r2, [r3], #2
 8005526:	bfb4      	ite	lt
 8005528:	222d      	movlt	r2, #45	; 0x2d
 800552a:	222b      	movge	r2, #43	; 0x2b
 800552c:	2909      	cmp	r1, #9
 800552e:	7042      	strb	r2, [r0, #1]
 8005530:	dd2a      	ble.n	8005588 <__exponent+0x70>
 8005532:	f10d 0407 	add.w	r4, sp, #7
 8005536:	46a4      	mov	ip, r4
 8005538:	270a      	movs	r7, #10
 800553a:	46a6      	mov	lr, r4
 800553c:	460a      	mov	r2, r1
 800553e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005542:	fb07 1516 	mls	r5, r7, r6, r1
 8005546:	3530      	adds	r5, #48	; 0x30
 8005548:	2a63      	cmp	r2, #99	; 0x63
 800554a:	f104 34ff 	add.w	r4, r4, #4294967295
 800554e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005552:	4631      	mov	r1, r6
 8005554:	dcf1      	bgt.n	800553a <__exponent+0x22>
 8005556:	3130      	adds	r1, #48	; 0x30
 8005558:	f1ae 0502 	sub.w	r5, lr, #2
 800555c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005560:	1c44      	adds	r4, r0, #1
 8005562:	4629      	mov	r1, r5
 8005564:	4561      	cmp	r1, ip
 8005566:	d30a      	bcc.n	800557e <__exponent+0x66>
 8005568:	f10d 0209 	add.w	r2, sp, #9
 800556c:	eba2 020e 	sub.w	r2, r2, lr
 8005570:	4565      	cmp	r5, ip
 8005572:	bf88      	it	hi
 8005574:	2200      	movhi	r2, #0
 8005576:	4413      	add	r3, r2
 8005578:	1a18      	subs	r0, r3, r0
 800557a:	b003      	add	sp, #12
 800557c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800557e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005582:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005586:	e7ed      	b.n	8005564 <__exponent+0x4c>
 8005588:	2330      	movs	r3, #48	; 0x30
 800558a:	3130      	adds	r1, #48	; 0x30
 800558c:	7083      	strb	r3, [r0, #2]
 800558e:	70c1      	strb	r1, [r0, #3]
 8005590:	1d03      	adds	r3, r0, #4
 8005592:	e7f1      	b.n	8005578 <__exponent+0x60>

08005594 <_printf_float>:
 8005594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005598:	ed2d 8b02 	vpush	{d8}
 800559c:	b08d      	sub	sp, #52	; 0x34
 800559e:	460c      	mov	r4, r1
 80055a0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80055a4:	4616      	mov	r6, r2
 80055a6:	461f      	mov	r7, r3
 80055a8:	4605      	mov	r5, r0
 80055aa:	f001 fa5f 	bl	8006a6c <_localeconv_r>
 80055ae:	f8d0 a000 	ldr.w	sl, [r0]
 80055b2:	4650      	mov	r0, sl
 80055b4:	f7fa fe0c 	bl	80001d0 <strlen>
 80055b8:	2300      	movs	r3, #0
 80055ba:	930a      	str	r3, [sp, #40]	; 0x28
 80055bc:	6823      	ldr	r3, [r4, #0]
 80055be:	9305      	str	r3, [sp, #20]
 80055c0:	f8d8 3000 	ldr.w	r3, [r8]
 80055c4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80055c8:	3307      	adds	r3, #7
 80055ca:	f023 0307 	bic.w	r3, r3, #7
 80055ce:	f103 0208 	add.w	r2, r3, #8
 80055d2:	f8c8 2000 	str.w	r2, [r8]
 80055d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055da:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80055de:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80055e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80055e6:	9307      	str	r3, [sp, #28]
 80055e8:	f8cd 8018 	str.w	r8, [sp, #24]
 80055ec:	ee08 0a10 	vmov	s16, r0
 80055f0:	4b9f      	ldr	r3, [pc, #636]	; (8005870 <_printf_float+0x2dc>)
 80055f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055f6:	f04f 32ff 	mov.w	r2, #4294967295
 80055fa:	f7fb fa97 	bl	8000b2c <__aeabi_dcmpun>
 80055fe:	bb88      	cbnz	r0, 8005664 <_printf_float+0xd0>
 8005600:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005604:	4b9a      	ldr	r3, [pc, #616]	; (8005870 <_printf_float+0x2dc>)
 8005606:	f04f 32ff 	mov.w	r2, #4294967295
 800560a:	f7fb fa71 	bl	8000af0 <__aeabi_dcmple>
 800560e:	bb48      	cbnz	r0, 8005664 <_printf_float+0xd0>
 8005610:	2200      	movs	r2, #0
 8005612:	2300      	movs	r3, #0
 8005614:	4640      	mov	r0, r8
 8005616:	4649      	mov	r1, r9
 8005618:	f7fb fa60 	bl	8000adc <__aeabi_dcmplt>
 800561c:	b110      	cbz	r0, 8005624 <_printf_float+0x90>
 800561e:	232d      	movs	r3, #45	; 0x2d
 8005620:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005624:	4b93      	ldr	r3, [pc, #588]	; (8005874 <_printf_float+0x2e0>)
 8005626:	4894      	ldr	r0, [pc, #592]	; (8005878 <_printf_float+0x2e4>)
 8005628:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800562c:	bf94      	ite	ls
 800562e:	4698      	movls	r8, r3
 8005630:	4680      	movhi	r8, r0
 8005632:	2303      	movs	r3, #3
 8005634:	6123      	str	r3, [r4, #16]
 8005636:	9b05      	ldr	r3, [sp, #20]
 8005638:	f023 0204 	bic.w	r2, r3, #4
 800563c:	6022      	str	r2, [r4, #0]
 800563e:	f04f 0900 	mov.w	r9, #0
 8005642:	9700      	str	r7, [sp, #0]
 8005644:	4633      	mov	r3, r6
 8005646:	aa0b      	add	r2, sp, #44	; 0x2c
 8005648:	4621      	mov	r1, r4
 800564a:	4628      	mov	r0, r5
 800564c:	f000 f9d8 	bl	8005a00 <_printf_common>
 8005650:	3001      	adds	r0, #1
 8005652:	f040 8090 	bne.w	8005776 <_printf_float+0x1e2>
 8005656:	f04f 30ff 	mov.w	r0, #4294967295
 800565a:	b00d      	add	sp, #52	; 0x34
 800565c:	ecbd 8b02 	vpop	{d8}
 8005660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005664:	4642      	mov	r2, r8
 8005666:	464b      	mov	r3, r9
 8005668:	4640      	mov	r0, r8
 800566a:	4649      	mov	r1, r9
 800566c:	f7fb fa5e 	bl	8000b2c <__aeabi_dcmpun>
 8005670:	b140      	cbz	r0, 8005684 <_printf_float+0xf0>
 8005672:	464b      	mov	r3, r9
 8005674:	2b00      	cmp	r3, #0
 8005676:	bfbc      	itt	lt
 8005678:	232d      	movlt	r3, #45	; 0x2d
 800567a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800567e:	487f      	ldr	r0, [pc, #508]	; (800587c <_printf_float+0x2e8>)
 8005680:	4b7f      	ldr	r3, [pc, #508]	; (8005880 <_printf_float+0x2ec>)
 8005682:	e7d1      	b.n	8005628 <_printf_float+0x94>
 8005684:	6863      	ldr	r3, [r4, #4]
 8005686:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800568a:	9206      	str	r2, [sp, #24]
 800568c:	1c5a      	adds	r2, r3, #1
 800568e:	d13f      	bne.n	8005710 <_printf_float+0x17c>
 8005690:	2306      	movs	r3, #6
 8005692:	6063      	str	r3, [r4, #4]
 8005694:	9b05      	ldr	r3, [sp, #20]
 8005696:	6861      	ldr	r1, [r4, #4]
 8005698:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800569c:	2300      	movs	r3, #0
 800569e:	9303      	str	r3, [sp, #12]
 80056a0:	ab0a      	add	r3, sp, #40	; 0x28
 80056a2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80056a6:	ab09      	add	r3, sp, #36	; 0x24
 80056a8:	ec49 8b10 	vmov	d0, r8, r9
 80056ac:	9300      	str	r3, [sp, #0]
 80056ae:	6022      	str	r2, [r4, #0]
 80056b0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80056b4:	4628      	mov	r0, r5
 80056b6:	f7ff fecd 	bl	8005454 <__cvt>
 80056ba:	9b06      	ldr	r3, [sp, #24]
 80056bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80056be:	2b47      	cmp	r3, #71	; 0x47
 80056c0:	4680      	mov	r8, r0
 80056c2:	d108      	bne.n	80056d6 <_printf_float+0x142>
 80056c4:	1cc8      	adds	r0, r1, #3
 80056c6:	db02      	blt.n	80056ce <_printf_float+0x13a>
 80056c8:	6863      	ldr	r3, [r4, #4]
 80056ca:	4299      	cmp	r1, r3
 80056cc:	dd41      	ble.n	8005752 <_printf_float+0x1be>
 80056ce:	f1ab 0b02 	sub.w	fp, fp, #2
 80056d2:	fa5f fb8b 	uxtb.w	fp, fp
 80056d6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80056da:	d820      	bhi.n	800571e <_printf_float+0x18a>
 80056dc:	3901      	subs	r1, #1
 80056de:	465a      	mov	r2, fp
 80056e0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80056e4:	9109      	str	r1, [sp, #36]	; 0x24
 80056e6:	f7ff ff17 	bl	8005518 <__exponent>
 80056ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80056ec:	1813      	adds	r3, r2, r0
 80056ee:	2a01      	cmp	r2, #1
 80056f0:	4681      	mov	r9, r0
 80056f2:	6123      	str	r3, [r4, #16]
 80056f4:	dc02      	bgt.n	80056fc <_printf_float+0x168>
 80056f6:	6822      	ldr	r2, [r4, #0]
 80056f8:	07d2      	lsls	r2, r2, #31
 80056fa:	d501      	bpl.n	8005700 <_printf_float+0x16c>
 80056fc:	3301      	adds	r3, #1
 80056fe:	6123      	str	r3, [r4, #16]
 8005700:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005704:	2b00      	cmp	r3, #0
 8005706:	d09c      	beq.n	8005642 <_printf_float+0xae>
 8005708:	232d      	movs	r3, #45	; 0x2d
 800570a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800570e:	e798      	b.n	8005642 <_printf_float+0xae>
 8005710:	9a06      	ldr	r2, [sp, #24]
 8005712:	2a47      	cmp	r2, #71	; 0x47
 8005714:	d1be      	bne.n	8005694 <_printf_float+0x100>
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1bc      	bne.n	8005694 <_printf_float+0x100>
 800571a:	2301      	movs	r3, #1
 800571c:	e7b9      	b.n	8005692 <_printf_float+0xfe>
 800571e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005722:	d118      	bne.n	8005756 <_printf_float+0x1c2>
 8005724:	2900      	cmp	r1, #0
 8005726:	6863      	ldr	r3, [r4, #4]
 8005728:	dd0b      	ble.n	8005742 <_printf_float+0x1ae>
 800572a:	6121      	str	r1, [r4, #16]
 800572c:	b913      	cbnz	r3, 8005734 <_printf_float+0x1a0>
 800572e:	6822      	ldr	r2, [r4, #0]
 8005730:	07d0      	lsls	r0, r2, #31
 8005732:	d502      	bpl.n	800573a <_printf_float+0x1a6>
 8005734:	3301      	adds	r3, #1
 8005736:	440b      	add	r3, r1
 8005738:	6123      	str	r3, [r4, #16]
 800573a:	65a1      	str	r1, [r4, #88]	; 0x58
 800573c:	f04f 0900 	mov.w	r9, #0
 8005740:	e7de      	b.n	8005700 <_printf_float+0x16c>
 8005742:	b913      	cbnz	r3, 800574a <_printf_float+0x1b6>
 8005744:	6822      	ldr	r2, [r4, #0]
 8005746:	07d2      	lsls	r2, r2, #31
 8005748:	d501      	bpl.n	800574e <_printf_float+0x1ba>
 800574a:	3302      	adds	r3, #2
 800574c:	e7f4      	b.n	8005738 <_printf_float+0x1a4>
 800574e:	2301      	movs	r3, #1
 8005750:	e7f2      	b.n	8005738 <_printf_float+0x1a4>
 8005752:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005756:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005758:	4299      	cmp	r1, r3
 800575a:	db05      	blt.n	8005768 <_printf_float+0x1d4>
 800575c:	6823      	ldr	r3, [r4, #0]
 800575e:	6121      	str	r1, [r4, #16]
 8005760:	07d8      	lsls	r0, r3, #31
 8005762:	d5ea      	bpl.n	800573a <_printf_float+0x1a6>
 8005764:	1c4b      	adds	r3, r1, #1
 8005766:	e7e7      	b.n	8005738 <_printf_float+0x1a4>
 8005768:	2900      	cmp	r1, #0
 800576a:	bfd4      	ite	le
 800576c:	f1c1 0202 	rsble	r2, r1, #2
 8005770:	2201      	movgt	r2, #1
 8005772:	4413      	add	r3, r2
 8005774:	e7e0      	b.n	8005738 <_printf_float+0x1a4>
 8005776:	6823      	ldr	r3, [r4, #0]
 8005778:	055a      	lsls	r2, r3, #21
 800577a:	d407      	bmi.n	800578c <_printf_float+0x1f8>
 800577c:	6923      	ldr	r3, [r4, #16]
 800577e:	4642      	mov	r2, r8
 8005780:	4631      	mov	r1, r6
 8005782:	4628      	mov	r0, r5
 8005784:	47b8      	blx	r7
 8005786:	3001      	adds	r0, #1
 8005788:	d12c      	bne.n	80057e4 <_printf_float+0x250>
 800578a:	e764      	b.n	8005656 <_printf_float+0xc2>
 800578c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005790:	f240 80e0 	bls.w	8005954 <_printf_float+0x3c0>
 8005794:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005798:	2200      	movs	r2, #0
 800579a:	2300      	movs	r3, #0
 800579c:	f7fb f994 	bl	8000ac8 <__aeabi_dcmpeq>
 80057a0:	2800      	cmp	r0, #0
 80057a2:	d034      	beq.n	800580e <_printf_float+0x27a>
 80057a4:	4a37      	ldr	r2, [pc, #220]	; (8005884 <_printf_float+0x2f0>)
 80057a6:	2301      	movs	r3, #1
 80057a8:	4631      	mov	r1, r6
 80057aa:	4628      	mov	r0, r5
 80057ac:	47b8      	blx	r7
 80057ae:	3001      	adds	r0, #1
 80057b0:	f43f af51 	beq.w	8005656 <_printf_float+0xc2>
 80057b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057b8:	429a      	cmp	r2, r3
 80057ba:	db02      	blt.n	80057c2 <_printf_float+0x22e>
 80057bc:	6823      	ldr	r3, [r4, #0]
 80057be:	07d8      	lsls	r0, r3, #31
 80057c0:	d510      	bpl.n	80057e4 <_printf_float+0x250>
 80057c2:	ee18 3a10 	vmov	r3, s16
 80057c6:	4652      	mov	r2, sl
 80057c8:	4631      	mov	r1, r6
 80057ca:	4628      	mov	r0, r5
 80057cc:	47b8      	blx	r7
 80057ce:	3001      	adds	r0, #1
 80057d0:	f43f af41 	beq.w	8005656 <_printf_float+0xc2>
 80057d4:	f04f 0800 	mov.w	r8, #0
 80057d8:	f104 091a 	add.w	r9, r4, #26
 80057dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057de:	3b01      	subs	r3, #1
 80057e0:	4543      	cmp	r3, r8
 80057e2:	dc09      	bgt.n	80057f8 <_printf_float+0x264>
 80057e4:	6823      	ldr	r3, [r4, #0]
 80057e6:	079b      	lsls	r3, r3, #30
 80057e8:	f100 8105 	bmi.w	80059f6 <_printf_float+0x462>
 80057ec:	68e0      	ldr	r0, [r4, #12]
 80057ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057f0:	4298      	cmp	r0, r3
 80057f2:	bfb8      	it	lt
 80057f4:	4618      	movlt	r0, r3
 80057f6:	e730      	b.n	800565a <_printf_float+0xc6>
 80057f8:	2301      	movs	r3, #1
 80057fa:	464a      	mov	r2, r9
 80057fc:	4631      	mov	r1, r6
 80057fe:	4628      	mov	r0, r5
 8005800:	47b8      	blx	r7
 8005802:	3001      	adds	r0, #1
 8005804:	f43f af27 	beq.w	8005656 <_printf_float+0xc2>
 8005808:	f108 0801 	add.w	r8, r8, #1
 800580c:	e7e6      	b.n	80057dc <_printf_float+0x248>
 800580e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005810:	2b00      	cmp	r3, #0
 8005812:	dc39      	bgt.n	8005888 <_printf_float+0x2f4>
 8005814:	4a1b      	ldr	r2, [pc, #108]	; (8005884 <_printf_float+0x2f0>)
 8005816:	2301      	movs	r3, #1
 8005818:	4631      	mov	r1, r6
 800581a:	4628      	mov	r0, r5
 800581c:	47b8      	blx	r7
 800581e:	3001      	adds	r0, #1
 8005820:	f43f af19 	beq.w	8005656 <_printf_float+0xc2>
 8005824:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005828:	4313      	orrs	r3, r2
 800582a:	d102      	bne.n	8005832 <_printf_float+0x29e>
 800582c:	6823      	ldr	r3, [r4, #0]
 800582e:	07d9      	lsls	r1, r3, #31
 8005830:	d5d8      	bpl.n	80057e4 <_printf_float+0x250>
 8005832:	ee18 3a10 	vmov	r3, s16
 8005836:	4652      	mov	r2, sl
 8005838:	4631      	mov	r1, r6
 800583a:	4628      	mov	r0, r5
 800583c:	47b8      	blx	r7
 800583e:	3001      	adds	r0, #1
 8005840:	f43f af09 	beq.w	8005656 <_printf_float+0xc2>
 8005844:	f04f 0900 	mov.w	r9, #0
 8005848:	f104 0a1a 	add.w	sl, r4, #26
 800584c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800584e:	425b      	negs	r3, r3
 8005850:	454b      	cmp	r3, r9
 8005852:	dc01      	bgt.n	8005858 <_printf_float+0x2c4>
 8005854:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005856:	e792      	b.n	800577e <_printf_float+0x1ea>
 8005858:	2301      	movs	r3, #1
 800585a:	4652      	mov	r2, sl
 800585c:	4631      	mov	r1, r6
 800585e:	4628      	mov	r0, r5
 8005860:	47b8      	blx	r7
 8005862:	3001      	adds	r0, #1
 8005864:	f43f aef7 	beq.w	8005656 <_printf_float+0xc2>
 8005868:	f109 0901 	add.w	r9, r9, #1
 800586c:	e7ee      	b.n	800584c <_printf_float+0x2b8>
 800586e:	bf00      	nop
 8005870:	7fefffff 	.word	0x7fefffff
 8005874:	080087ac 	.word	0x080087ac
 8005878:	080087b0 	.word	0x080087b0
 800587c:	080087b8 	.word	0x080087b8
 8005880:	080087b4 	.word	0x080087b4
 8005884:	080087bc 	.word	0x080087bc
 8005888:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800588a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800588c:	429a      	cmp	r2, r3
 800588e:	bfa8      	it	ge
 8005890:	461a      	movge	r2, r3
 8005892:	2a00      	cmp	r2, #0
 8005894:	4691      	mov	r9, r2
 8005896:	dc37      	bgt.n	8005908 <_printf_float+0x374>
 8005898:	f04f 0b00 	mov.w	fp, #0
 800589c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058a0:	f104 021a 	add.w	r2, r4, #26
 80058a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80058a6:	9305      	str	r3, [sp, #20]
 80058a8:	eba3 0309 	sub.w	r3, r3, r9
 80058ac:	455b      	cmp	r3, fp
 80058ae:	dc33      	bgt.n	8005918 <_printf_float+0x384>
 80058b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058b4:	429a      	cmp	r2, r3
 80058b6:	db3b      	blt.n	8005930 <_printf_float+0x39c>
 80058b8:	6823      	ldr	r3, [r4, #0]
 80058ba:	07da      	lsls	r2, r3, #31
 80058bc:	d438      	bmi.n	8005930 <_printf_float+0x39c>
 80058be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058c0:	9a05      	ldr	r2, [sp, #20]
 80058c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80058c4:	1a9a      	subs	r2, r3, r2
 80058c6:	eba3 0901 	sub.w	r9, r3, r1
 80058ca:	4591      	cmp	r9, r2
 80058cc:	bfa8      	it	ge
 80058ce:	4691      	movge	r9, r2
 80058d0:	f1b9 0f00 	cmp.w	r9, #0
 80058d4:	dc35      	bgt.n	8005942 <_printf_float+0x3ae>
 80058d6:	f04f 0800 	mov.w	r8, #0
 80058da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058de:	f104 0a1a 	add.w	sl, r4, #26
 80058e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058e6:	1a9b      	subs	r3, r3, r2
 80058e8:	eba3 0309 	sub.w	r3, r3, r9
 80058ec:	4543      	cmp	r3, r8
 80058ee:	f77f af79 	ble.w	80057e4 <_printf_float+0x250>
 80058f2:	2301      	movs	r3, #1
 80058f4:	4652      	mov	r2, sl
 80058f6:	4631      	mov	r1, r6
 80058f8:	4628      	mov	r0, r5
 80058fa:	47b8      	blx	r7
 80058fc:	3001      	adds	r0, #1
 80058fe:	f43f aeaa 	beq.w	8005656 <_printf_float+0xc2>
 8005902:	f108 0801 	add.w	r8, r8, #1
 8005906:	e7ec      	b.n	80058e2 <_printf_float+0x34e>
 8005908:	4613      	mov	r3, r2
 800590a:	4631      	mov	r1, r6
 800590c:	4642      	mov	r2, r8
 800590e:	4628      	mov	r0, r5
 8005910:	47b8      	blx	r7
 8005912:	3001      	adds	r0, #1
 8005914:	d1c0      	bne.n	8005898 <_printf_float+0x304>
 8005916:	e69e      	b.n	8005656 <_printf_float+0xc2>
 8005918:	2301      	movs	r3, #1
 800591a:	4631      	mov	r1, r6
 800591c:	4628      	mov	r0, r5
 800591e:	9205      	str	r2, [sp, #20]
 8005920:	47b8      	blx	r7
 8005922:	3001      	adds	r0, #1
 8005924:	f43f ae97 	beq.w	8005656 <_printf_float+0xc2>
 8005928:	9a05      	ldr	r2, [sp, #20]
 800592a:	f10b 0b01 	add.w	fp, fp, #1
 800592e:	e7b9      	b.n	80058a4 <_printf_float+0x310>
 8005930:	ee18 3a10 	vmov	r3, s16
 8005934:	4652      	mov	r2, sl
 8005936:	4631      	mov	r1, r6
 8005938:	4628      	mov	r0, r5
 800593a:	47b8      	blx	r7
 800593c:	3001      	adds	r0, #1
 800593e:	d1be      	bne.n	80058be <_printf_float+0x32a>
 8005940:	e689      	b.n	8005656 <_printf_float+0xc2>
 8005942:	9a05      	ldr	r2, [sp, #20]
 8005944:	464b      	mov	r3, r9
 8005946:	4442      	add	r2, r8
 8005948:	4631      	mov	r1, r6
 800594a:	4628      	mov	r0, r5
 800594c:	47b8      	blx	r7
 800594e:	3001      	adds	r0, #1
 8005950:	d1c1      	bne.n	80058d6 <_printf_float+0x342>
 8005952:	e680      	b.n	8005656 <_printf_float+0xc2>
 8005954:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005956:	2a01      	cmp	r2, #1
 8005958:	dc01      	bgt.n	800595e <_printf_float+0x3ca>
 800595a:	07db      	lsls	r3, r3, #31
 800595c:	d538      	bpl.n	80059d0 <_printf_float+0x43c>
 800595e:	2301      	movs	r3, #1
 8005960:	4642      	mov	r2, r8
 8005962:	4631      	mov	r1, r6
 8005964:	4628      	mov	r0, r5
 8005966:	47b8      	blx	r7
 8005968:	3001      	adds	r0, #1
 800596a:	f43f ae74 	beq.w	8005656 <_printf_float+0xc2>
 800596e:	ee18 3a10 	vmov	r3, s16
 8005972:	4652      	mov	r2, sl
 8005974:	4631      	mov	r1, r6
 8005976:	4628      	mov	r0, r5
 8005978:	47b8      	blx	r7
 800597a:	3001      	adds	r0, #1
 800597c:	f43f ae6b 	beq.w	8005656 <_printf_float+0xc2>
 8005980:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005984:	2200      	movs	r2, #0
 8005986:	2300      	movs	r3, #0
 8005988:	f7fb f89e 	bl	8000ac8 <__aeabi_dcmpeq>
 800598c:	b9d8      	cbnz	r0, 80059c6 <_printf_float+0x432>
 800598e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005990:	f108 0201 	add.w	r2, r8, #1
 8005994:	3b01      	subs	r3, #1
 8005996:	4631      	mov	r1, r6
 8005998:	4628      	mov	r0, r5
 800599a:	47b8      	blx	r7
 800599c:	3001      	adds	r0, #1
 800599e:	d10e      	bne.n	80059be <_printf_float+0x42a>
 80059a0:	e659      	b.n	8005656 <_printf_float+0xc2>
 80059a2:	2301      	movs	r3, #1
 80059a4:	4652      	mov	r2, sl
 80059a6:	4631      	mov	r1, r6
 80059a8:	4628      	mov	r0, r5
 80059aa:	47b8      	blx	r7
 80059ac:	3001      	adds	r0, #1
 80059ae:	f43f ae52 	beq.w	8005656 <_printf_float+0xc2>
 80059b2:	f108 0801 	add.w	r8, r8, #1
 80059b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059b8:	3b01      	subs	r3, #1
 80059ba:	4543      	cmp	r3, r8
 80059bc:	dcf1      	bgt.n	80059a2 <_printf_float+0x40e>
 80059be:	464b      	mov	r3, r9
 80059c0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80059c4:	e6dc      	b.n	8005780 <_printf_float+0x1ec>
 80059c6:	f04f 0800 	mov.w	r8, #0
 80059ca:	f104 0a1a 	add.w	sl, r4, #26
 80059ce:	e7f2      	b.n	80059b6 <_printf_float+0x422>
 80059d0:	2301      	movs	r3, #1
 80059d2:	4642      	mov	r2, r8
 80059d4:	e7df      	b.n	8005996 <_printf_float+0x402>
 80059d6:	2301      	movs	r3, #1
 80059d8:	464a      	mov	r2, r9
 80059da:	4631      	mov	r1, r6
 80059dc:	4628      	mov	r0, r5
 80059de:	47b8      	blx	r7
 80059e0:	3001      	adds	r0, #1
 80059e2:	f43f ae38 	beq.w	8005656 <_printf_float+0xc2>
 80059e6:	f108 0801 	add.w	r8, r8, #1
 80059ea:	68e3      	ldr	r3, [r4, #12]
 80059ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80059ee:	1a5b      	subs	r3, r3, r1
 80059f0:	4543      	cmp	r3, r8
 80059f2:	dcf0      	bgt.n	80059d6 <_printf_float+0x442>
 80059f4:	e6fa      	b.n	80057ec <_printf_float+0x258>
 80059f6:	f04f 0800 	mov.w	r8, #0
 80059fa:	f104 0919 	add.w	r9, r4, #25
 80059fe:	e7f4      	b.n	80059ea <_printf_float+0x456>

08005a00 <_printf_common>:
 8005a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a04:	4616      	mov	r6, r2
 8005a06:	4699      	mov	r9, r3
 8005a08:	688a      	ldr	r2, [r1, #8]
 8005a0a:	690b      	ldr	r3, [r1, #16]
 8005a0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a10:	4293      	cmp	r3, r2
 8005a12:	bfb8      	it	lt
 8005a14:	4613      	movlt	r3, r2
 8005a16:	6033      	str	r3, [r6, #0]
 8005a18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a1c:	4607      	mov	r7, r0
 8005a1e:	460c      	mov	r4, r1
 8005a20:	b10a      	cbz	r2, 8005a26 <_printf_common+0x26>
 8005a22:	3301      	adds	r3, #1
 8005a24:	6033      	str	r3, [r6, #0]
 8005a26:	6823      	ldr	r3, [r4, #0]
 8005a28:	0699      	lsls	r1, r3, #26
 8005a2a:	bf42      	ittt	mi
 8005a2c:	6833      	ldrmi	r3, [r6, #0]
 8005a2e:	3302      	addmi	r3, #2
 8005a30:	6033      	strmi	r3, [r6, #0]
 8005a32:	6825      	ldr	r5, [r4, #0]
 8005a34:	f015 0506 	ands.w	r5, r5, #6
 8005a38:	d106      	bne.n	8005a48 <_printf_common+0x48>
 8005a3a:	f104 0a19 	add.w	sl, r4, #25
 8005a3e:	68e3      	ldr	r3, [r4, #12]
 8005a40:	6832      	ldr	r2, [r6, #0]
 8005a42:	1a9b      	subs	r3, r3, r2
 8005a44:	42ab      	cmp	r3, r5
 8005a46:	dc26      	bgt.n	8005a96 <_printf_common+0x96>
 8005a48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a4c:	1e13      	subs	r3, r2, #0
 8005a4e:	6822      	ldr	r2, [r4, #0]
 8005a50:	bf18      	it	ne
 8005a52:	2301      	movne	r3, #1
 8005a54:	0692      	lsls	r2, r2, #26
 8005a56:	d42b      	bmi.n	8005ab0 <_printf_common+0xb0>
 8005a58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a5c:	4649      	mov	r1, r9
 8005a5e:	4638      	mov	r0, r7
 8005a60:	47c0      	blx	r8
 8005a62:	3001      	adds	r0, #1
 8005a64:	d01e      	beq.n	8005aa4 <_printf_common+0xa4>
 8005a66:	6823      	ldr	r3, [r4, #0]
 8005a68:	68e5      	ldr	r5, [r4, #12]
 8005a6a:	6832      	ldr	r2, [r6, #0]
 8005a6c:	f003 0306 	and.w	r3, r3, #6
 8005a70:	2b04      	cmp	r3, #4
 8005a72:	bf08      	it	eq
 8005a74:	1aad      	subeq	r5, r5, r2
 8005a76:	68a3      	ldr	r3, [r4, #8]
 8005a78:	6922      	ldr	r2, [r4, #16]
 8005a7a:	bf0c      	ite	eq
 8005a7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a80:	2500      	movne	r5, #0
 8005a82:	4293      	cmp	r3, r2
 8005a84:	bfc4      	itt	gt
 8005a86:	1a9b      	subgt	r3, r3, r2
 8005a88:	18ed      	addgt	r5, r5, r3
 8005a8a:	2600      	movs	r6, #0
 8005a8c:	341a      	adds	r4, #26
 8005a8e:	42b5      	cmp	r5, r6
 8005a90:	d11a      	bne.n	8005ac8 <_printf_common+0xc8>
 8005a92:	2000      	movs	r0, #0
 8005a94:	e008      	b.n	8005aa8 <_printf_common+0xa8>
 8005a96:	2301      	movs	r3, #1
 8005a98:	4652      	mov	r2, sl
 8005a9a:	4649      	mov	r1, r9
 8005a9c:	4638      	mov	r0, r7
 8005a9e:	47c0      	blx	r8
 8005aa0:	3001      	adds	r0, #1
 8005aa2:	d103      	bne.n	8005aac <_printf_common+0xac>
 8005aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8005aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aac:	3501      	adds	r5, #1
 8005aae:	e7c6      	b.n	8005a3e <_printf_common+0x3e>
 8005ab0:	18e1      	adds	r1, r4, r3
 8005ab2:	1c5a      	adds	r2, r3, #1
 8005ab4:	2030      	movs	r0, #48	; 0x30
 8005ab6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005aba:	4422      	add	r2, r4
 8005abc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ac0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ac4:	3302      	adds	r3, #2
 8005ac6:	e7c7      	b.n	8005a58 <_printf_common+0x58>
 8005ac8:	2301      	movs	r3, #1
 8005aca:	4622      	mov	r2, r4
 8005acc:	4649      	mov	r1, r9
 8005ace:	4638      	mov	r0, r7
 8005ad0:	47c0      	blx	r8
 8005ad2:	3001      	adds	r0, #1
 8005ad4:	d0e6      	beq.n	8005aa4 <_printf_common+0xa4>
 8005ad6:	3601      	adds	r6, #1
 8005ad8:	e7d9      	b.n	8005a8e <_printf_common+0x8e>
	...

08005adc <_printf_i>:
 8005adc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ae0:	7e0f      	ldrb	r7, [r1, #24]
 8005ae2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ae4:	2f78      	cmp	r7, #120	; 0x78
 8005ae6:	4691      	mov	r9, r2
 8005ae8:	4680      	mov	r8, r0
 8005aea:	460c      	mov	r4, r1
 8005aec:	469a      	mov	sl, r3
 8005aee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005af2:	d807      	bhi.n	8005b04 <_printf_i+0x28>
 8005af4:	2f62      	cmp	r7, #98	; 0x62
 8005af6:	d80a      	bhi.n	8005b0e <_printf_i+0x32>
 8005af8:	2f00      	cmp	r7, #0
 8005afa:	f000 80d8 	beq.w	8005cae <_printf_i+0x1d2>
 8005afe:	2f58      	cmp	r7, #88	; 0x58
 8005b00:	f000 80a3 	beq.w	8005c4a <_printf_i+0x16e>
 8005b04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b0c:	e03a      	b.n	8005b84 <_printf_i+0xa8>
 8005b0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b12:	2b15      	cmp	r3, #21
 8005b14:	d8f6      	bhi.n	8005b04 <_printf_i+0x28>
 8005b16:	a101      	add	r1, pc, #4	; (adr r1, 8005b1c <_printf_i+0x40>)
 8005b18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b1c:	08005b75 	.word	0x08005b75
 8005b20:	08005b89 	.word	0x08005b89
 8005b24:	08005b05 	.word	0x08005b05
 8005b28:	08005b05 	.word	0x08005b05
 8005b2c:	08005b05 	.word	0x08005b05
 8005b30:	08005b05 	.word	0x08005b05
 8005b34:	08005b89 	.word	0x08005b89
 8005b38:	08005b05 	.word	0x08005b05
 8005b3c:	08005b05 	.word	0x08005b05
 8005b40:	08005b05 	.word	0x08005b05
 8005b44:	08005b05 	.word	0x08005b05
 8005b48:	08005c95 	.word	0x08005c95
 8005b4c:	08005bb9 	.word	0x08005bb9
 8005b50:	08005c77 	.word	0x08005c77
 8005b54:	08005b05 	.word	0x08005b05
 8005b58:	08005b05 	.word	0x08005b05
 8005b5c:	08005cb7 	.word	0x08005cb7
 8005b60:	08005b05 	.word	0x08005b05
 8005b64:	08005bb9 	.word	0x08005bb9
 8005b68:	08005b05 	.word	0x08005b05
 8005b6c:	08005b05 	.word	0x08005b05
 8005b70:	08005c7f 	.word	0x08005c7f
 8005b74:	682b      	ldr	r3, [r5, #0]
 8005b76:	1d1a      	adds	r2, r3, #4
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	602a      	str	r2, [r5, #0]
 8005b7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b84:	2301      	movs	r3, #1
 8005b86:	e0a3      	b.n	8005cd0 <_printf_i+0x1f4>
 8005b88:	6820      	ldr	r0, [r4, #0]
 8005b8a:	6829      	ldr	r1, [r5, #0]
 8005b8c:	0606      	lsls	r6, r0, #24
 8005b8e:	f101 0304 	add.w	r3, r1, #4
 8005b92:	d50a      	bpl.n	8005baa <_printf_i+0xce>
 8005b94:	680e      	ldr	r6, [r1, #0]
 8005b96:	602b      	str	r3, [r5, #0]
 8005b98:	2e00      	cmp	r6, #0
 8005b9a:	da03      	bge.n	8005ba4 <_printf_i+0xc8>
 8005b9c:	232d      	movs	r3, #45	; 0x2d
 8005b9e:	4276      	negs	r6, r6
 8005ba0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ba4:	485e      	ldr	r0, [pc, #376]	; (8005d20 <_printf_i+0x244>)
 8005ba6:	230a      	movs	r3, #10
 8005ba8:	e019      	b.n	8005bde <_printf_i+0x102>
 8005baa:	680e      	ldr	r6, [r1, #0]
 8005bac:	602b      	str	r3, [r5, #0]
 8005bae:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005bb2:	bf18      	it	ne
 8005bb4:	b236      	sxthne	r6, r6
 8005bb6:	e7ef      	b.n	8005b98 <_printf_i+0xbc>
 8005bb8:	682b      	ldr	r3, [r5, #0]
 8005bba:	6820      	ldr	r0, [r4, #0]
 8005bbc:	1d19      	adds	r1, r3, #4
 8005bbe:	6029      	str	r1, [r5, #0]
 8005bc0:	0601      	lsls	r1, r0, #24
 8005bc2:	d501      	bpl.n	8005bc8 <_printf_i+0xec>
 8005bc4:	681e      	ldr	r6, [r3, #0]
 8005bc6:	e002      	b.n	8005bce <_printf_i+0xf2>
 8005bc8:	0646      	lsls	r6, r0, #25
 8005bca:	d5fb      	bpl.n	8005bc4 <_printf_i+0xe8>
 8005bcc:	881e      	ldrh	r6, [r3, #0]
 8005bce:	4854      	ldr	r0, [pc, #336]	; (8005d20 <_printf_i+0x244>)
 8005bd0:	2f6f      	cmp	r7, #111	; 0x6f
 8005bd2:	bf0c      	ite	eq
 8005bd4:	2308      	moveq	r3, #8
 8005bd6:	230a      	movne	r3, #10
 8005bd8:	2100      	movs	r1, #0
 8005bda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005bde:	6865      	ldr	r5, [r4, #4]
 8005be0:	60a5      	str	r5, [r4, #8]
 8005be2:	2d00      	cmp	r5, #0
 8005be4:	bfa2      	ittt	ge
 8005be6:	6821      	ldrge	r1, [r4, #0]
 8005be8:	f021 0104 	bicge.w	r1, r1, #4
 8005bec:	6021      	strge	r1, [r4, #0]
 8005bee:	b90e      	cbnz	r6, 8005bf4 <_printf_i+0x118>
 8005bf0:	2d00      	cmp	r5, #0
 8005bf2:	d04d      	beq.n	8005c90 <_printf_i+0x1b4>
 8005bf4:	4615      	mov	r5, r2
 8005bf6:	fbb6 f1f3 	udiv	r1, r6, r3
 8005bfa:	fb03 6711 	mls	r7, r3, r1, r6
 8005bfe:	5dc7      	ldrb	r7, [r0, r7]
 8005c00:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005c04:	4637      	mov	r7, r6
 8005c06:	42bb      	cmp	r3, r7
 8005c08:	460e      	mov	r6, r1
 8005c0a:	d9f4      	bls.n	8005bf6 <_printf_i+0x11a>
 8005c0c:	2b08      	cmp	r3, #8
 8005c0e:	d10b      	bne.n	8005c28 <_printf_i+0x14c>
 8005c10:	6823      	ldr	r3, [r4, #0]
 8005c12:	07de      	lsls	r6, r3, #31
 8005c14:	d508      	bpl.n	8005c28 <_printf_i+0x14c>
 8005c16:	6923      	ldr	r3, [r4, #16]
 8005c18:	6861      	ldr	r1, [r4, #4]
 8005c1a:	4299      	cmp	r1, r3
 8005c1c:	bfde      	ittt	le
 8005c1e:	2330      	movle	r3, #48	; 0x30
 8005c20:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c24:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005c28:	1b52      	subs	r2, r2, r5
 8005c2a:	6122      	str	r2, [r4, #16]
 8005c2c:	f8cd a000 	str.w	sl, [sp]
 8005c30:	464b      	mov	r3, r9
 8005c32:	aa03      	add	r2, sp, #12
 8005c34:	4621      	mov	r1, r4
 8005c36:	4640      	mov	r0, r8
 8005c38:	f7ff fee2 	bl	8005a00 <_printf_common>
 8005c3c:	3001      	adds	r0, #1
 8005c3e:	d14c      	bne.n	8005cda <_printf_i+0x1fe>
 8005c40:	f04f 30ff 	mov.w	r0, #4294967295
 8005c44:	b004      	add	sp, #16
 8005c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c4a:	4835      	ldr	r0, [pc, #212]	; (8005d20 <_printf_i+0x244>)
 8005c4c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005c50:	6829      	ldr	r1, [r5, #0]
 8005c52:	6823      	ldr	r3, [r4, #0]
 8005c54:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c58:	6029      	str	r1, [r5, #0]
 8005c5a:	061d      	lsls	r5, r3, #24
 8005c5c:	d514      	bpl.n	8005c88 <_printf_i+0x1ac>
 8005c5e:	07df      	lsls	r7, r3, #31
 8005c60:	bf44      	itt	mi
 8005c62:	f043 0320 	orrmi.w	r3, r3, #32
 8005c66:	6023      	strmi	r3, [r4, #0]
 8005c68:	b91e      	cbnz	r6, 8005c72 <_printf_i+0x196>
 8005c6a:	6823      	ldr	r3, [r4, #0]
 8005c6c:	f023 0320 	bic.w	r3, r3, #32
 8005c70:	6023      	str	r3, [r4, #0]
 8005c72:	2310      	movs	r3, #16
 8005c74:	e7b0      	b.n	8005bd8 <_printf_i+0xfc>
 8005c76:	6823      	ldr	r3, [r4, #0]
 8005c78:	f043 0320 	orr.w	r3, r3, #32
 8005c7c:	6023      	str	r3, [r4, #0]
 8005c7e:	2378      	movs	r3, #120	; 0x78
 8005c80:	4828      	ldr	r0, [pc, #160]	; (8005d24 <_printf_i+0x248>)
 8005c82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c86:	e7e3      	b.n	8005c50 <_printf_i+0x174>
 8005c88:	0659      	lsls	r1, r3, #25
 8005c8a:	bf48      	it	mi
 8005c8c:	b2b6      	uxthmi	r6, r6
 8005c8e:	e7e6      	b.n	8005c5e <_printf_i+0x182>
 8005c90:	4615      	mov	r5, r2
 8005c92:	e7bb      	b.n	8005c0c <_printf_i+0x130>
 8005c94:	682b      	ldr	r3, [r5, #0]
 8005c96:	6826      	ldr	r6, [r4, #0]
 8005c98:	6961      	ldr	r1, [r4, #20]
 8005c9a:	1d18      	adds	r0, r3, #4
 8005c9c:	6028      	str	r0, [r5, #0]
 8005c9e:	0635      	lsls	r5, r6, #24
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	d501      	bpl.n	8005ca8 <_printf_i+0x1cc>
 8005ca4:	6019      	str	r1, [r3, #0]
 8005ca6:	e002      	b.n	8005cae <_printf_i+0x1d2>
 8005ca8:	0670      	lsls	r0, r6, #25
 8005caa:	d5fb      	bpl.n	8005ca4 <_printf_i+0x1c8>
 8005cac:	8019      	strh	r1, [r3, #0]
 8005cae:	2300      	movs	r3, #0
 8005cb0:	6123      	str	r3, [r4, #16]
 8005cb2:	4615      	mov	r5, r2
 8005cb4:	e7ba      	b.n	8005c2c <_printf_i+0x150>
 8005cb6:	682b      	ldr	r3, [r5, #0]
 8005cb8:	1d1a      	adds	r2, r3, #4
 8005cba:	602a      	str	r2, [r5, #0]
 8005cbc:	681d      	ldr	r5, [r3, #0]
 8005cbe:	6862      	ldr	r2, [r4, #4]
 8005cc0:	2100      	movs	r1, #0
 8005cc2:	4628      	mov	r0, r5
 8005cc4:	f7fa fa8c 	bl	80001e0 <memchr>
 8005cc8:	b108      	cbz	r0, 8005cce <_printf_i+0x1f2>
 8005cca:	1b40      	subs	r0, r0, r5
 8005ccc:	6060      	str	r0, [r4, #4]
 8005cce:	6863      	ldr	r3, [r4, #4]
 8005cd0:	6123      	str	r3, [r4, #16]
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cd8:	e7a8      	b.n	8005c2c <_printf_i+0x150>
 8005cda:	6923      	ldr	r3, [r4, #16]
 8005cdc:	462a      	mov	r2, r5
 8005cde:	4649      	mov	r1, r9
 8005ce0:	4640      	mov	r0, r8
 8005ce2:	47d0      	blx	sl
 8005ce4:	3001      	adds	r0, #1
 8005ce6:	d0ab      	beq.n	8005c40 <_printf_i+0x164>
 8005ce8:	6823      	ldr	r3, [r4, #0]
 8005cea:	079b      	lsls	r3, r3, #30
 8005cec:	d413      	bmi.n	8005d16 <_printf_i+0x23a>
 8005cee:	68e0      	ldr	r0, [r4, #12]
 8005cf0:	9b03      	ldr	r3, [sp, #12]
 8005cf2:	4298      	cmp	r0, r3
 8005cf4:	bfb8      	it	lt
 8005cf6:	4618      	movlt	r0, r3
 8005cf8:	e7a4      	b.n	8005c44 <_printf_i+0x168>
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	4632      	mov	r2, r6
 8005cfe:	4649      	mov	r1, r9
 8005d00:	4640      	mov	r0, r8
 8005d02:	47d0      	blx	sl
 8005d04:	3001      	adds	r0, #1
 8005d06:	d09b      	beq.n	8005c40 <_printf_i+0x164>
 8005d08:	3501      	adds	r5, #1
 8005d0a:	68e3      	ldr	r3, [r4, #12]
 8005d0c:	9903      	ldr	r1, [sp, #12]
 8005d0e:	1a5b      	subs	r3, r3, r1
 8005d10:	42ab      	cmp	r3, r5
 8005d12:	dcf2      	bgt.n	8005cfa <_printf_i+0x21e>
 8005d14:	e7eb      	b.n	8005cee <_printf_i+0x212>
 8005d16:	2500      	movs	r5, #0
 8005d18:	f104 0619 	add.w	r6, r4, #25
 8005d1c:	e7f5      	b.n	8005d0a <_printf_i+0x22e>
 8005d1e:	bf00      	nop
 8005d20:	080087be 	.word	0x080087be
 8005d24:	080087cf 	.word	0x080087cf

08005d28 <siprintf>:
 8005d28:	b40e      	push	{r1, r2, r3}
 8005d2a:	b500      	push	{lr}
 8005d2c:	b09c      	sub	sp, #112	; 0x70
 8005d2e:	ab1d      	add	r3, sp, #116	; 0x74
 8005d30:	9002      	str	r0, [sp, #8]
 8005d32:	9006      	str	r0, [sp, #24]
 8005d34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005d38:	4809      	ldr	r0, [pc, #36]	; (8005d60 <siprintf+0x38>)
 8005d3a:	9107      	str	r1, [sp, #28]
 8005d3c:	9104      	str	r1, [sp, #16]
 8005d3e:	4909      	ldr	r1, [pc, #36]	; (8005d64 <siprintf+0x3c>)
 8005d40:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d44:	9105      	str	r1, [sp, #20]
 8005d46:	6800      	ldr	r0, [r0, #0]
 8005d48:	9301      	str	r3, [sp, #4]
 8005d4a:	a902      	add	r1, sp, #8
 8005d4c:	f001 fb7e 	bl	800744c <_svfiprintf_r>
 8005d50:	9b02      	ldr	r3, [sp, #8]
 8005d52:	2200      	movs	r2, #0
 8005d54:	701a      	strb	r2, [r3, #0]
 8005d56:	b01c      	add	sp, #112	; 0x70
 8005d58:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d5c:	b003      	add	sp, #12
 8005d5e:	4770      	bx	lr
 8005d60:	20000010 	.word	0x20000010
 8005d64:	ffff0208 	.word	0xffff0208

08005d68 <strcpy>:
 8005d68:	4603      	mov	r3, r0
 8005d6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d6e:	f803 2b01 	strb.w	r2, [r3], #1
 8005d72:	2a00      	cmp	r2, #0
 8005d74:	d1f9      	bne.n	8005d6a <strcpy+0x2>
 8005d76:	4770      	bx	lr

08005d78 <quorem>:
 8005d78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d7c:	6903      	ldr	r3, [r0, #16]
 8005d7e:	690c      	ldr	r4, [r1, #16]
 8005d80:	42a3      	cmp	r3, r4
 8005d82:	4607      	mov	r7, r0
 8005d84:	f2c0 8081 	blt.w	8005e8a <quorem+0x112>
 8005d88:	3c01      	subs	r4, #1
 8005d8a:	f101 0814 	add.w	r8, r1, #20
 8005d8e:	f100 0514 	add.w	r5, r0, #20
 8005d92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d96:	9301      	str	r3, [sp, #4]
 8005d98:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005d9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005da0:	3301      	adds	r3, #1
 8005da2:	429a      	cmp	r2, r3
 8005da4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005da8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005dac:	fbb2 f6f3 	udiv	r6, r2, r3
 8005db0:	d331      	bcc.n	8005e16 <quorem+0x9e>
 8005db2:	f04f 0e00 	mov.w	lr, #0
 8005db6:	4640      	mov	r0, r8
 8005db8:	46ac      	mov	ip, r5
 8005dba:	46f2      	mov	sl, lr
 8005dbc:	f850 2b04 	ldr.w	r2, [r0], #4
 8005dc0:	b293      	uxth	r3, r2
 8005dc2:	fb06 e303 	mla	r3, r6, r3, lr
 8005dc6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	ebaa 0303 	sub.w	r3, sl, r3
 8005dd0:	f8dc a000 	ldr.w	sl, [ip]
 8005dd4:	0c12      	lsrs	r2, r2, #16
 8005dd6:	fa13 f38a 	uxtah	r3, r3, sl
 8005dda:	fb06 e202 	mla	r2, r6, r2, lr
 8005dde:	9300      	str	r3, [sp, #0]
 8005de0:	9b00      	ldr	r3, [sp, #0]
 8005de2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005de6:	b292      	uxth	r2, r2
 8005de8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005dec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005df0:	f8bd 3000 	ldrh.w	r3, [sp]
 8005df4:	4581      	cmp	r9, r0
 8005df6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005dfa:	f84c 3b04 	str.w	r3, [ip], #4
 8005dfe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005e02:	d2db      	bcs.n	8005dbc <quorem+0x44>
 8005e04:	f855 300b 	ldr.w	r3, [r5, fp]
 8005e08:	b92b      	cbnz	r3, 8005e16 <quorem+0x9e>
 8005e0a:	9b01      	ldr	r3, [sp, #4]
 8005e0c:	3b04      	subs	r3, #4
 8005e0e:	429d      	cmp	r5, r3
 8005e10:	461a      	mov	r2, r3
 8005e12:	d32e      	bcc.n	8005e72 <quorem+0xfa>
 8005e14:	613c      	str	r4, [r7, #16]
 8005e16:	4638      	mov	r0, r7
 8005e18:	f001 f8c4 	bl	8006fa4 <__mcmp>
 8005e1c:	2800      	cmp	r0, #0
 8005e1e:	db24      	blt.n	8005e6a <quorem+0xf2>
 8005e20:	3601      	adds	r6, #1
 8005e22:	4628      	mov	r0, r5
 8005e24:	f04f 0c00 	mov.w	ip, #0
 8005e28:	f858 2b04 	ldr.w	r2, [r8], #4
 8005e2c:	f8d0 e000 	ldr.w	lr, [r0]
 8005e30:	b293      	uxth	r3, r2
 8005e32:	ebac 0303 	sub.w	r3, ip, r3
 8005e36:	0c12      	lsrs	r2, r2, #16
 8005e38:	fa13 f38e 	uxtah	r3, r3, lr
 8005e3c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005e40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e4a:	45c1      	cmp	r9, r8
 8005e4c:	f840 3b04 	str.w	r3, [r0], #4
 8005e50:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005e54:	d2e8      	bcs.n	8005e28 <quorem+0xb0>
 8005e56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e5e:	b922      	cbnz	r2, 8005e6a <quorem+0xf2>
 8005e60:	3b04      	subs	r3, #4
 8005e62:	429d      	cmp	r5, r3
 8005e64:	461a      	mov	r2, r3
 8005e66:	d30a      	bcc.n	8005e7e <quorem+0x106>
 8005e68:	613c      	str	r4, [r7, #16]
 8005e6a:	4630      	mov	r0, r6
 8005e6c:	b003      	add	sp, #12
 8005e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e72:	6812      	ldr	r2, [r2, #0]
 8005e74:	3b04      	subs	r3, #4
 8005e76:	2a00      	cmp	r2, #0
 8005e78:	d1cc      	bne.n	8005e14 <quorem+0x9c>
 8005e7a:	3c01      	subs	r4, #1
 8005e7c:	e7c7      	b.n	8005e0e <quorem+0x96>
 8005e7e:	6812      	ldr	r2, [r2, #0]
 8005e80:	3b04      	subs	r3, #4
 8005e82:	2a00      	cmp	r2, #0
 8005e84:	d1f0      	bne.n	8005e68 <quorem+0xf0>
 8005e86:	3c01      	subs	r4, #1
 8005e88:	e7eb      	b.n	8005e62 <quorem+0xea>
 8005e8a:	2000      	movs	r0, #0
 8005e8c:	e7ee      	b.n	8005e6c <quorem+0xf4>
	...

08005e90 <_dtoa_r>:
 8005e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e94:	ed2d 8b04 	vpush	{d8-d9}
 8005e98:	ec57 6b10 	vmov	r6, r7, d0
 8005e9c:	b093      	sub	sp, #76	; 0x4c
 8005e9e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005ea0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005ea4:	9106      	str	r1, [sp, #24]
 8005ea6:	ee10 aa10 	vmov	sl, s0
 8005eaa:	4604      	mov	r4, r0
 8005eac:	9209      	str	r2, [sp, #36]	; 0x24
 8005eae:	930c      	str	r3, [sp, #48]	; 0x30
 8005eb0:	46bb      	mov	fp, r7
 8005eb2:	b975      	cbnz	r5, 8005ed2 <_dtoa_r+0x42>
 8005eb4:	2010      	movs	r0, #16
 8005eb6:	f000 fddd 	bl	8006a74 <malloc>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	6260      	str	r0, [r4, #36]	; 0x24
 8005ebe:	b920      	cbnz	r0, 8005eca <_dtoa_r+0x3a>
 8005ec0:	4ba7      	ldr	r3, [pc, #668]	; (8006160 <_dtoa_r+0x2d0>)
 8005ec2:	21ea      	movs	r1, #234	; 0xea
 8005ec4:	48a7      	ldr	r0, [pc, #668]	; (8006164 <_dtoa_r+0x2d4>)
 8005ec6:	f001 fbd1 	bl	800766c <__assert_func>
 8005eca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005ece:	6005      	str	r5, [r0, #0]
 8005ed0:	60c5      	str	r5, [r0, #12]
 8005ed2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ed4:	6819      	ldr	r1, [r3, #0]
 8005ed6:	b151      	cbz	r1, 8005eee <_dtoa_r+0x5e>
 8005ed8:	685a      	ldr	r2, [r3, #4]
 8005eda:	604a      	str	r2, [r1, #4]
 8005edc:	2301      	movs	r3, #1
 8005ede:	4093      	lsls	r3, r2
 8005ee0:	608b      	str	r3, [r1, #8]
 8005ee2:	4620      	mov	r0, r4
 8005ee4:	f000 fe1c 	bl	8006b20 <_Bfree>
 8005ee8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005eea:	2200      	movs	r2, #0
 8005eec:	601a      	str	r2, [r3, #0]
 8005eee:	1e3b      	subs	r3, r7, #0
 8005ef0:	bfaa      	itet	ge
 8005ef2:	2300      	movge	r3, #0
 8005ef4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005ef8:	f8c8 3000 	strge.w	r3, [r8]
 8005efc:	4b9a      	ldr	r3, [pc, #616]	; (8006168 <_dtoa_r+0x2d8>)
 8005efe:	bfbc      	itt	lt
 8005f00:	2201      	movlt	r2, #1
 8005f02:	f8c8 2000 	strlt.w	r2, [r8]
 8005f06:	ea33 030b 	bics.w	r3, r3, fp
 8005f0a:	d11b      	bne.n	8005f44 <_dtoa_r+0xb4>
 8005f0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f0e:	f242 730f 	movw	r3, #9999	; 0x270f
 8005f12:	6013      	str	r3, [r2, #0]
 8005f14:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005f18:	4333      	orrs	r3, r6
 8005f1a:	f000 8592 	beq.w	8006a42 <_dtoa_r+0xbb2>
 8005f1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f20:	b963      	cbnz	r3, 8005f3c <_dtoa_r+0xac>
 8005f22:	4b92      	ldr	r3, [pc, #584]	; (800616c <_dtoa_r+0x2dc>)
 8005f24:	e022      	b.n	8005f6c <_dtoa_r+0xdc>
 8005f26:	4b92      	ldr	r3, [pc, #584]	; (8006170 <_dtoa_r+0x2e0>)
 8005f28:	9301      	str	r3, [sp, #4]
 8005f2a:	3308      	adds	r3, #8
 8005f2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005f2e:	6013      	str	r3, [r2, #0]
 8005f30:	9801      	ldr	r0, [sp, #4]
 8005f32:	b013      	add	sp, #76	; 0x4c
 8005f34:	ecbd 8b04 	vpop	{d8-d9}
 8005f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f3c:	4b8b      	ldr	r3, [pc, #556]	; (800616c <_dtoa_r+0x2dc>)
 8005f3e:	9301      	str	r3, [sp, #4]
 8005f40:	3303      	adds	r3, #3
 8005f42:	e7f3      	b.n	8005f2c <_dtoa_r+0x9c>
 8005f44:	2200      	movs	r2, #0
 8005f46:	2300      	movs	r3, #0
 8005f48:	4650      	mov	r0, sl
 8005f4a:	4659      	mov	r1, fp
 8005f4c:	f7fa fdbc 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f50:	ec4b ab19 	vmov	d9, sl, fp
 8005f54:	4680      	mov	r8, r0
 8005f56:	b158      	cbz	r0, 8005f70 <_dtoa_r+0xe0>
 8005f58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	6013      	str	r3, [r2, #0]
 8005f5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f000 856b 	beq.w	8006a3c <_dtoa_r+0xbac>
 8005f66:	4883      	ldr	r0, [pc, #524]	; (8006174 <_dtoa_r+0x2e4>)
 8005f68:	6018      	str	r0, [r3, #0]
 8005f6a:	1e43      	subs	r3, r0, #1
 8005f6c:	9301      	str	r3, [sp, #4]
 8005f6e:	e7df      	b.n	8005f30 <_dtoa_r+0xa0>
 8005f70:	ec4b ab10 	vmov	d0, sl, fp
 8005f74:	aa10      	add	r2, sp, #64	; 0x40
 8005f76:	a911      	add	r1, sp, #68	; 0x44
 8005f78:	4620      	mov	r0, r4
 8005f7a:	f001 f8b9 	bl	80070f0 <__d2b>
 8005f7e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005f82:	ee08 0a10 	vmov	s16, r0
 8005f86:	2d00      	cmp	r5, #0
 8005f88:	f000 8084 	beq.w	8006094 <_dtoa_r+0x204>
 8005f8c:	ee19 3a90 	vmov	r3, s19
 8005f90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f94:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005f98:	4656      	mov	r6, sl
 8005f9a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005f9e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005fa2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005fa6:	4b74      	ldr	r3, [pc, #464]	; (8006178 <_dtoa_r+0x2e8>)
 8005fa8:	2200      	movs	r2, #0
 8005faa:	4630      	mov	r0, r6
 8005fac:	4639      	mov	r1, r7
 8005fae:	f7fa f96b 	bl	8000288 <__aeabi_dsub>
 8005fb2:	a365      	add	r3, pc, #404	; (adr r3, 8006148 <_dtoa_r+0x2b8>)
 8005fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb8:	f7fa fb1e 	bl	80005f8 <__aeabi_dmul>
 8005fbc:	a364      	add	r3, pc, #400	; (adr r3, 8006150 <_dtoa_r+0x2c0>)
 8005fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc2:	f7fa f963 	bl	800028c <__adddf3>
 8005fc6:	4606      	mov	r6, r0
 8005fc8:	4628      	mov	r0, r5
 8005fca:	460f      	mov	r7, r1
 8005fcc:	f7fa faaa 	bl	8000524 <__aeabi_i2d>
 8005fd0:	a361      	add	r3, pc, #388	; (adr r3, 8006158 <_dtoa_r+0x2c8>)
 8005fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd6:	f7fa fb0f 	bl	80005f8 <__aeabi_dmul>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	460b      	mov	r3, r1
 8005fde:	4630      	mov	r0, r6
 8005fe0:	4639      	mov	r1, r7
 8005fe2:	f7fa f953 	bl	800028c <__adddf3>
 8005fe6:	4606      	mov	r6, r0
 8005fe8:	460f      	mov	r7, r1
 8005fea:	f7fa fdb5 	bl	8000b58 <__aeabi_d2iz>
 8005fee:	2200      	movs	r2, #0
 8005ff0:	9000      	str	r0, [sp, #0]
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	4630      	mov	r0, r6
 8005ff6:	4639      	mov	r1, r7
 8005ff8:	f7fa fd70 	bl	8000adc <__aeabi_dcmplt>
 8005ffc:	b150      	cbz	r0, 8006014 <_dtoa_r+0x184>
 8005ffe:	9800      	ldr	r0, [sp, #0]
 8006000:	f7fa fa90 	bl	8000524 <__aeabi_i2d>
 8006004:	4632      	mov	r2, r6
 8006006:	463b      	mov	r3, r7
 8006008:	f7fa fd5e 	bl	8000ac8 <__aeabi_dcmpeq>
 800600c:	b910      	cbnz	r0, 8006014 <_dtoa_r+0x184>
 800600e:	9b00      	ldr	r3, [sp, #0]
 8006010:	3b01      	subs	r3, #1
 8006012:	9300      	str	r3, [sp, #0]
 8006014:	9b00      	ldr	r3, [sp, #0]
 8006016:	2b16      	cmp	r3, #22
 8006018:	d85a      	bhi.n	80060d0 <_dtoa_r+0x240>
 800601a:	9a00      	ldr	r2, [sp, #0]
 800601c:	4b57      	ldr	r3, [pc, #348]	; (800617c <_dtoa_r+0x2ec>)
 800601e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006026:	ec51 0b19 	vmov	r0, r1, d9
 800602a:	f7fa fd57 	bl	8000adc <__aeabi_dcmplt>
 800602e:	2800      	cmp	r0, #0
 8006030:	d050      	beq.n	80060d4 <_dtoa_r+0x244>
 8006032:	9b00      	ldr	r3, [sp, #0]
 8006034:	3b01      	subs	r3, #1
 8006036:	9300      	str	r3, [sp, #0]
 8006038:	2300      	movs	r3, #0
 800603a:	930b      	str	r3, [sp, #44]	; 0x2c
 800603c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800603e:	1b5d      	subs	r5, r3, r5
 8006040:	1e6b      	subs	r3, r5, #1
 8006042:	9305      	str	r3, [sp, #20]
 8006044:	bf45      	ittet	mi
 8006046:	f1c5 0301 	rsbmi	r3, r5, #1
 800604a:	9304      	strmi	r3, [sp, #16]
 800604c:	2300      	movpl	r3, #0
 800604e:	2300      	movmi	r3, #0
 8006050:	bf4c      	ite	mi
 8006052:	9305      	strmi	r3, [sp, #20]
 8006054:	9304      	strpl	r3, [sp, #16]
 8006056:	9b00      	ldr	r3, [sp, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	db3d      	blt.n	80060d8 <_dtoa_r+0x248>
 800605c:	9b05      	ldr	r3, [sp, #20]
 800605e:	9a00      	ldr	r2, [sp, #0]
 8006060:	920a      	str	r2, [sp, #40]	; 0x28
 8006062:	4413      	add	r3, r2
 8006064:	9305      	str	r3, [sp, #20]
 8006066:	2300      	movs	r3, #0
 8006068:	9307      	str	r3, [sp, #28]
 800606a:	9b06      	ldr	r3, [sp, #24]
 800606c:	2b09      	cmp	r3, #9
 800606e:	f200 8089 	bhi.w	8006184 <_dtoa_r+0x2f4>
 8006072:	2b05      	cmp	r3, #5
 8006074:	bfc4      	itt	gt
 8006076:	3b04      	subgt	r3, #4
 8006078:	9306      	strgt	r3, [sp, #24]
 800607a:	9b06      	ldr	r3, [sp, #24]
 800607c:	f1a3 0302 	sub.w	r3, r3, #2
 8006080:	bfcc      	ite	gt
 8006082:	2500      	movgt	r5, #0
 8006084:	2501      	movle	r5, #1
 8006086:	2b03      	cmp	r3, #3
 8006088:	f200 8087 	bhi.w	800619a <_dtoa_r+0x30a>
 800608c:	e8df f003 	tbb	[pc, r3]
 8006090:	59383a2d 	.word	0x59383a2d
 8006094:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006098:	441d      	add	r5, r3
 800609a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800609e:	2b20      	cmp	r3, #32
 80060a0:	bfc1      	itttt	gt
 80060a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80060a6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80060aa:	fa0b f303 	lslgt.w	r3, fp, r3
 80060ae:	fa26 f000 	lsrgt.w	r0, r6, r0
 80060b2:	bfda      	itte	le
 80060b4:	f1c3 0320 	rsble	r3, r3, #32
 80060b8:	fa06 f003 	lslle.w	r0, r6, r3
 80060bc:	4318      	orrgt	r0, r3
 80060be:	f7fa fa21 	bl	8000504 <__aeabi_ui2d>
 80060c2:	2301      	movs	r3, #1
 80060c4:	4606      	mov	r6, r0
 80060c6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80060ca:	3d01      	subs	r5, #1
 80060cc:	930e      	str	r3, [sp, #56]	; 0x38
 80060ce:	e76a      	b.n	8005fa6 <_dtoa_r+0x116>
 80060d0:	2301      	movs	r3, #1
 80060d2:	e7b2      	b.n	800603a <_dtoa_r+0x1aa>
 80060d4:	900b      	str	r0, [sp, #44]	; 0x2c
 80060d6:	e7b1      	b.n	800603c <_dtoa_r+0x1ac>
 80060d8:	9b04      	ldr	r3, [sp, #16]
 80060da:	9a00      	ldr	r2, [sp, #0]
 80060dc:	1a9b      	subs	r3, r3, r2
 80060de:	9304      	str	r3, [sp, #16]
 80060e0:	4253      	negs	r3, r2
 80060e2:	9307      	str	r3, [sp, #28]
 80060e4:	2300      	movs	r3, #0
 80060e6:	930a      	str	r3, [sp, #40]	; 0x28
 80060e8:	e7bf      	b.n	800606a <_dtoa_r+0x1da>
 80060ea:	2300      	movs	r3, #0
 80060ec:	9308      	str	r3, [sp, #32]
 80060ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	dc55      	bgt.n	80061a0 <_dtoa_r+0x310>
 80060f4:	2301      	movs	r3, #1
 80060f6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80060fa:	461a      	mov	r2, r3
 80060fc:	9209      	str	r2, [sp, #36]	; 0x24
 80060fe:	e00c      	b.n	800611a <_dtoa_r+0x28a>
 8006100:	2301      	movs	r3, #1
 8006102:	e7f3      	b.n	80060ec <_dtoa_r+0x25c>
 8006104:	2300      	movs	r3, #0
 8006106:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006108:	9308      	str	r3, [sp, #32]
 800610a:	9b00      	ldr	r3, [sp, #0]
 800610c:	4413      	add	r3, r2
 800610e:	9302      	str	r3, [sp, #8]
 8006110:	3301      	adds	r3, #1
 8006112:	2b01      	cmp	r3, #1
 8006114:	9303      	str	r3, [sp, #12]
 8006116:	bfb8      	it	lt
 8006118:	2301      	movlt	r3, #1
 800611a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800611c:	2200      	movs	r2, #0
 800611e:	6042      	str	r2, [r0, #4]
 8006120:	2204      	movs	r2, #4
 8006122:	f102 0614 	add.w	r6, r2, #20
 8006126:	429e      	cmp	r6, r3
 8006128:	6841      	ldr	r1, [r0, #4]
 800612a:	d93d      	bls.n	80061a8 <_dtoa_r+0x318>
 800612c:	4620      	mov	r0, r4
 800612e:	f000 fcb7 	bl	8006aa0 <_Balloc>
 8006132:	9001      	str	r0, [sp, #4]
 8006134:	2800      	cmp	r0, #0
 8006136:	d13b      	bne.n	80061b0 <_dtoa_r+0x320>
 8006138:	4b11      	ldr	r3, [pc, #68]	; (8006180 <_dtoa_r+0x2f0>)
 800613a:	4602      	mov	r2, r0
 800613c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006140:	e6c0      	b.n	8005ec4 <_dtoa_r+0x34>
 8006142:	2301      	movs	r3, #1
 8006144:	e7df      	b.n	8006106 <_dtoa_r+0x276>
 8006146:	bf00      	nop
 8006148:	636f4361 	.word	0x636f4361
 800614c:	3fd287a7 	.word	0x3fd287a7
 8006150:	8b60c8b3 	.word	0x8b60c8b3
 8006154:	3fc68a28 	.word	0x3fc68a28
 8006158:	509f79fb 	.word	0x509f79fb
 800615c:	3fd34413 	.word	0x3fd34413
 8006160:	080087ed 	.word	0x080087ed
 8006164:	08008804 	.word	0x08008804
 8006168:	7ff00000 	.word	0x7ff00000
 800616c:	080087e9 	.word	0x080087e9
 8006170:	080087e0 	.word	0x080087e0
 8006174:	080087bd 	.word	0x080087bd
 8006178:	3ff80000 	.word	0x3ff80000
 800617c:	080088f8 	.word	0x080088f8
 8006180:	0800885f 	.word	0x0800885f
 8006184:	2501      	movs	r5, #1
 8006186:	2300      	movs	r3, #0
 8006188:	9306      	str	r3, [sp, #24]
 800618a:	9508      	str	r5, [sp, #32]
 800618c:	f04f 33ff 	mov.w	r3, #4294967295
 8006190:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006194:	2200      	movs	r2, #0
 8006196:	2312      	movs	r3, #18
 8006198:	e7b0      	b.n	80060fc <_dtoa_r+0x26c>
 800619a:	2301      	movs	r3, #1
 800619c:	9308      	str	r3, [sp, #32]
 800619e:	e7f5      	b.n	800618c <_dtoa_r+0x2fc>
 80061a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061a2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80061a6:	e7b8      	b.n	800611a <_dtoa_r+0x28a>
 80061a8:	3101      	adds	r1, #1
 80061aa:	6041      	str	r1, [r0, #4]
 80061ac:	0052      	lsls	r2, r2, #1
 80061ae:	e7b8      	b.n	8006122 <_dtoa_r+0x292>
 80061b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061b2:	9a01      	ldr	r2, [sp, #4]
 80061b4:	601a      	str	r2, [r3, #0]
 80061b6:	9b03      	ldr	r3, [sp, #12]
 80061b8:	2b0e      	cmp	r3, #14
 80061ba:	f200 809d 	bhi.w	80062f8 <_dtoa_r+0x468>
 80061be:	2d00      	cmp	r5, #0
 80061c0:	f000 809a 	beq.w	80062f8 <_dtoa_r+0x468>
 80061c4:	9b00      	ldr	r3, [sp, #0]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	dd32      	ble.n	8006230 <_dtoa_r+0x3a0>
 80061ca:	4ab7      	ldr	r2, [pc, #732]	; (80064a8 <_dtoa_r+0x618>)
 80061cc:	f003 030f 	and.w	r3, r3, #15
 80061d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80061d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80061d8:	9b00      	ldr	r3, [sp, #0]
 80061da:	05d8      	lsls	r0, r3, #23
 80061dc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80061e0:	d516      	bpl.n	8006210 <_dtoa_r+0x380>
 80061e2:	4bb2      	ldr	r3, [pc, #712]	; (80064ac <_dtoa_r+0x61c>)
 80061e4:	ec51 0b19 	vmov	r0, r1, d9
 80061e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80061ec:	f7fa fb2e 	bl	800084c <__aeabi_ddiv>
 80061f0:	f007 070f 	and.w	r7, r7, #15
 80061f4:	4682      	mov	sl, r0
 80061f6:	468b      	mov	fp, r1
 80061f8:	2503      	movs	r5, #3
 80061fa:	4eac      	ldr	r6, [pc, #688]	; (80064ac <_dtoa_r+0x61c>)
 80061fc:	b957      	cbnz	r7, 8006214 <_dtoa_r+0x384>
 80061fe:	4642      	mov	r2, r8
 8006200:	464b      	mov	r3, r9
 8006202:	4650      	mov	r0, sl
 8006204:	4659      	mov	r1, fp
 8006206:	f7fa fb21 	bl	800084c <__aeabi_ddiv>
 800620a:	4682      	mov	sl, r0
 800620c:	468b      	mov	fp, r1
 800620e:	e028      	b.n	8006262 <_dtoa_r+0x3d2>
 8006210:	2502      	movs	r5, #2
 8006212:	e7f2      	b.n	80061fa <_dtoa_r+0x36a>
 8006214:	07f9      	lsls	r1, r7, #31
 8006216:	d508      	bpl.n	800622a <_dtoa_r+0x39a>
 8006218:	4640      	mov	r0, r8
 800621a:	4649      	mov	r1, r9
 800621c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006220:	f7fa f9ea 	bl	80005f8 <__aeabi_dmul>
 8006224:	3501      	adds	r5, #1
 8006226:	4680      	mov	r8, r0
 8006228:	4689      	mov	r9, r1
 800622a:	107f      	asrs	r7, r7, #1
 800622c:	3608      	adds	r6, #8
 800622e:	e7e5      	b.n	80061fc <_dtoa_r+0x36c>
 8006230:	f000 809b 	beq.w	800636a <_dtoa_r+0x4da>
 8006234:	9b00      	ldr	r3, [sp, #0]
 8006236:	4f9d      	ldr	r7, [pc, #628]	; (80064ac <_dtoa_r+0x61c>)
 8006238:	425e      	negs	r6, r3
 800623a:	4b9b      	ldr	r3, [pc, #620]	; (80064a8 <_dtoa_r+0x618>)
 800623c:	f006 020f 	and.w	r2, r6, #15
 8006240:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006248:	ec51 0b19 	vmov	r0, r1, d9
 800624c:	f7fa f9d4 	bl	80005f8 <__aeabi_dmul>
 8006250:	1136      	asrs	r6, r6, #4
 8006252:	4682      	mov	sl, r0
 8006254:	468b      	mov	fp, r1
 8006256:	2300      	movs	r3, #0
 8006258:	2502      	movs	r5, #2
 800625a:	2e00      	cmp	r6, #0
 800625c:	d17a      	bne.n	8006354 <_dtoa_r+0x4c4>
 800625e:	2b00      	cmp	r3, #0
 8006260:	d1d3      	bne.n	800620a <_dtoa_r+0x37a>
 8006262:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006264:	2b00      	cmp	r3, #0
 8006266:	f000 8082 	beq.w	800636e <_dtoa_r+0x4de>
 800626a:	4b91      	ldr	r3, [pc, #580]	; (80064b0 <_dtoa_r+0x620>)
 800626c:	2200      	movs	r2, #0
 800626e:	4650      	mov	r0, sl
 8006270:	4659      	mov	r1, fp
 8006272:	f7fa fc33 	bl	8000adc <__aeabi_dcmplt>
 8006276:	2800      	cmp	r0, #0
 8006278:	d079      	beq.n	800636e <_dtoa_r+0x4de>
 800627a:	9b03      	ldr	r3, [sp, #12]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d076      	beq.n	800636e <_dtoa_r+0x4de>
 8006280:	9b02      	ldr	r3, [sp, #8]
 8006282:	2b00      	cmp	r3, #0
 8006284:	dd36      	ble.n	80062f4 <_dtoa_r+0x464>
 8006286:	9b00      	ldr	r3, [sp, #0]
 8006288:	4650      	mov	r0, sl
 800628a:	4659      	mov	r1, fp
 800628c:	1e5f      	subs	r7, r3, #1
 800628e:	2200      	movs	r2, #0
 8006290:	4b88      	ldr	r3, [pc, #544]	; (80064b4 <_dtoa_r+0x624>)
 8006292:	f7fa f9b1 	bl	80005f8 <__aeabi_dmul>
 8006296:	9e02      	ldr	r6, [sp, #8]
 8006298:	4682      	mov	sl, r0
 800629a:	468b      	mov	fp, r1
 800629c:	3501      	adds	r5, #1
 800629e:	4628      	mov	r0, r5
 80062a0:	f7fa f940 	bl	8000524 <__aeabi_i2d>
 80062a4:	4652      	mov	r2, sl
 80062a6:	465b      	mov	r3, fp
 80062a8:	f7fa f9a6 	bl	80005f8 <__aeabi_dmul>
 80062ac:	4b82      	ldr	r3, [pc, #520]	; (80064b8 <_dtoa_r+0x628>)
 80062ae:	2200      	movs	r2, #0
 80062b0:	f7f9 ffec 	bl	800028c <__adddf3>
 80062b4:	46d0      	mov	r8, sl
 80062b6:	46d9      	mov	r9, fp
 80062b8:	4682      	mov	sl, r0
 80062ba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80062be:	2e00      	cmp	r6, #0
 80062c0:	d158      	bne.n	8006374 <_dtoa_r+0x4e4>
 80062c2:	4b7e      	ldr	r3, [pc, #504]	; (80064bc <_dtoa_r+0x62c>)
 80062c4:	2200      	movs	r2, #0
 80062c6:	4640      	mov	r0, r8
 80062c8:	4649      	mov	r1, r9
 80062ca:	f7f9 ffdd 	bl	8000288 <__aeabi_dsub>
 80062ce:	4652      	mov	r2, sl
 80062d0:	465b      	mov	r3, fp
 80062d2:	4680      	mov	r8, r0
 80062d4:	4689      	mov	r9, r1
 80062d6:	f7fa fc1f 	bl	8000b18 <__aeabi_dcmpgt>
 80062da:	2800      	cmp	r0, #0
 80062dc:	f040 8295 	bne.w	800680a <_dtoa_r+0x97a>
 80062e0:	4652      	mov	r2, sl
 80062e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80062e6:	4640      	mov	r0, r8
 80062e8:	4649      	mov	r1, r9
 80062ea:	f7fa fbf7 	bl	8000adc <__aeabi_dcmplt>
 80062ee:	2800      	cmp	r0, #0
 80062f0:	f040 8289 	bne.w	8006806 <_dtoa_r+0x976>
 80062f4:	ec5b ab19 	vmov	sl, fp, d9
 80062f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	f2c0 8148 	blt.w	8006590 <_dtoa_r+0x700>
 8006300:	9a00      	ldr	r2, [sp, #0]
 8006302:	2a0e      	cmp	r2, #14
 8006304:	f300 8144 	bgt.w	8006590 <_dtoa_r+0x700>
 8006308:	4b67      	ldr	r3, [pc, #412]	; (80064a8 <_dtoa_r+0x618>)
 800630a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800630e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006312:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006314:	2b00      	cmp	r3, #0
 8006316:	f280 80d5 	bge.w	80064c4 <_dtoa_r+0x634>
 800631a:	9b03      	ldr	r3, [sp, #12]
 800631c:	2b00      	cmp	r3, #0
 800631e:	f300 80d1 	bgt.w	80064c4 <_dtoa_r+0x634>
 8006322:	f040 826f 	bne.w	8006804 <_dtoa_r+0x974>
 8006326:	4b65      	ldr	r3, [pc, #404]	; (80064bc <_dtoa_r+0x62c>)
 8006328:	2200      	movs	r2, #0
 800632a:	4640      	mov	r0, r8
 800632c:	4649      	mov	r1, r9
 800632e:	f7fa f963 	bl	80005f8 <__aeabi_dmul>
 8006332:	4652      	mov	r2, sl
 8006334:	465b      	mov	r3, fp
 8006336:	f7fa fbe5 	bl	8000b04 <__aeabi_dcmpge>
 800633a:	9e03      	ldr	r6, [sp, #12]
 800633c:	4637      	mov	r7, r6
 800633e:	2800      	cmp	r0, #0
 8006340:	f040 8245 	bne.w	80067ce <_dtoa_r+0x93e>
 8006344:	9d01      	ldr	r5, [sp, #4]
 8006346:	2331      	movs	r3, #49	; 0x31
 8006348:	f805 3b01 	strb.w	r3, [r5], #1
 800634c:	9b00      	ldr	r3, [sp, #0]
 800634e:	3301      	adds	r3, #1
 8006350:	9300      	str	r3, [sp, #0]
 8006352:	e240      	b.n	80067d6 <_dtoa_r+0x946>
 8006354:	07f2      	lsls	r2, r6, #31
 8006356:	d505      	bpl.n	8006364 <_dtoa_r+0x4d4>
 8006358:	e9d7 2300 	ldrd	r2, r3, [r7]
 800635c:	f7fa f94c 	bl	80005f8 <__aeabi_dmul>
 8006360:	3501      	adds	r5, #1
 8006362:	2301      	movs	r3, #1
 8006364:	1076      	asrs	r6, r6, #1
 8006366:	3708      	adds	r7, #8
 8006368:	e777      	b.n	800625a <_dtoa_r+0x3ca>
 800636a:	2502      	movs	r5, #2
 800636c:	e779      	b.n	8006262 <_dtoa_r+0x3d2>
 800636e:	9f00      	ldr	r7, [sp, #0]
 8006370:	9e03      	ldr	r6, [sp, #12]
 8006372:	e794      	b.n	800629e <_dtoa_r+0x40e>
 8006374:	9901      	ldr	r1, [sp, #4]
 8006376:	4b4c      	ldr	r3, [pc, #304]	; (80064a8 <_dtoa_r+0x618>)
 8006378:	4431      	add	r1, r6
 800637a:	910d      	str	r1, [sp, #52]	; 0x34
 800637c:	9908      	ldr	r1, [sp, #32]
 800637e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006382:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006386:	2900      	cmp	r1, #0
 8006388:	d043      	beq.n	8006412 <_dtoa_r+0x582>
 800638a:	494d      	ldr	r1, [pc, #308]	; (80064c0 <_dtoa_r+0x630>)
 800638c:	2000      	movs	r0, #0
 800638e:	f7fa fa5d 	bl	800084c <__aeabi_ddiv>
 8006392:	4652      	mov	r2, sl
 8006394:	465b      	mov	r3, fp
 8006396:	f7f9 ff77 	bl	8000288 <__aeabi_dsub>
 800639a:	9d01      	ldr	r5, [sp, #4]
 800639c:	4682      	mov	sl, r0
 800639e:	468b      	mov	fp, r1
 80063a0:	4649      	mov	r1, r9
 80063a2:	4640      	mov	r0, r8
 80063a4:	f7fa fbd8 	bl	8000b58 <__aeabi_d2iz>
 80063a8:	4606      	mov	r6, r0
 80063aa:	f7fa f8bb 	bl	8000524 <__aeabi_i2d>
 80063ae:	4602      	mov	r2, r0
 80063b0:	460b      	mov	r3, r1
 80063b2:	4640      	mov	r0, r8
 80063b4:	4649      	mov	r1, r9
 80063b6:	f7f9 ff67 	bl	8000288 <__aeabi_dsub>
 80063ba:	3630      	adds	r6, #48	; 0x30
 80063bc:	f805 6b01 	strb.w	r6, [r5], #1
 80063c0:	4652      	mov	r2, sl
 80063c2:	465b      	mov	r3, fp
 80063c4:	4680      	mov	r8, r0
 80063c6:	4689      	mov	r9, r1
 80063c8:	f7fa fb88 	bl	8000adc <__aeabi_dcmplt>
 80063cc:	2800      	cmp	r0, #0
 80063ce:	d163      	bne.n	8006498 <_dtoa_r+0x608>
 80063d0:	4642      	mov	r2, r8
 80063d2:	464b      	mov	r3, r9
 80063d4:	4936      	ldr	r1, [pc, #216]	; (80064b0 <_dtoa_r+0x620>)
 80063d6:	2000      	movs	r0, #0
 80063d8:	f7f9 ff56 	bl	8000288 <__aeabi_dsub>
 80063dc:	4652      	mov	r2, sl
 80063de:	465b      	mov	r3, fp
 80063e0:	f7fa fb7c 	bl	8000adc <__aeabi_dcmplt>
 80063e4:	2800      	cmp	r0, #0
 80063e6:	f040 80b5 	bne.w	8006554 <_dtoa_r+0x6c4>
 80063ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063ec:	429d      	cmp	r5, r3
 80063ee:	d081      	beq.n	80062f4 <_dtoa_r+0x464>
 80063f0:	4b30      	ldr	r3, [pc, #192]	; (80064b4 <_dtoa_r+0x624>)
 80063f2:	2200      	movs	r2, #0
 80063f4:	4650      	mov	r0, sl
 80063f6:	4659      	mov	r1, fp
 80063f8:	f7fa f8fe 	bl	80005f8 <__aeabi_dmul>
 80063fc:	4b2d      	ldr	r3, [pc, #180]	; (80064b4 <_dtoa_r+0x624>)
 80063fe:	4682      	mov	sl, r0
 8006400:	468b      	mov	fp, r1
 8006402:	4640      	mov	r0, r8
 8006404:	4649      	mov	r1, r9
 8006406:	2200      	movs	r2, #0
 8006408:	f7fa f8f6 	bl	80005f8 <__aeabi_dmul>
 800640c:	4680      	mov	r8, r0
 800640e:	4689      	mov	r9, r1
 8006410:	e7c6      	b.n	80063a0 <_dtoa_r+0x510>
 8006412:	4650      	mov	r0, sl
 8006414:	4659      	mov	r1, fp
 8006416:	f7fa f8ef 	bl	80005f8 <__aeabi_dmul>
 800641a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800641c:	9d01      	ldr	r5, [sp, #4]
 800641e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006420:	4682      	mov	sl, r0
 8006422:	468b      	mov	fp, r1
 8006424:	4649      	mov	r1, r9
 8006426:	4640      	mov	r0, r8
 8006428:	f7fa fb96 	bl	8000b58 <__aeabi_d2iz>
 800642c:	4606      	mov	r6, r0
 800642e:	f7fa f879 	bl	8000524 <__aeabi_i2d>
 8006432:	3630      	adds	r6, #48	; 0x30
 8006434:	4602      	mov	r2, r0
 8006436:	460b      	mov	r3, r1
 8006438:	4640      	mov	r0, r8
 800643a:	4649      	mov	r1, r9
 800643c:	f7f9 ff24 	bl	8000288 <__aeabi_dsub>
 8006440:	f805 6b01 	strb.w	r6, [r5], #1
 8006444:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006446:	429d      	cmp	r5, r3
 8006448:	4680      	mov	r8, r0
 800644a:	4689      	mov	r9, r1
 800644c:	f04f 0200 	mov.w	r2, #0
 8006450:	d124      	bne.n	800649c <_dtoa_r+0x60c>
 8006452:	4b1b      	ldr	r3, [pc, #108]	; (80064c0 <_dtoa_r+0x630>)
 8006454:	4650      	mov	r0, sl
 8006456:	4659      	mov	r1, fp
 8006458:	f7f9 ff18 	bl	800028c <__adddf3>
 800645c:	4602      	mov	r2, r0
 800645e:	460b      	mov	r3, r1
 8006460:	4640      	mov	r0, r8
 8006462:	4649      	mov	r1, r9
 8006464:	f7fa fb58 	bl	8000b18 <__aeabi_dcmpgt>
 8006468:	2800      	cmp	r0, #0
 800646a:	d173      	bne.n	8006554 <_dtoa_r+0x6c4>
 800646c:	4652      	mov	r2, sl
 800646e:	465b      	mov	r3, fp
 8006470:	4913      	ldr	r1, [pc, #76]	; (80064c0 <_dtoa_r+0x630>)
 8006472:	2000      	movs	r0, #0
 8006474:	f7f9 ff08 	bl	8000288 <__aeabi_dsub>
 8006478:	4602      	mov	r2, r0
 800647a:	460b      	mov	r3, r1
 800647c:	4640      	mov	r0, r8
 800647e:	4649      	mov	r1, r9
 8006480:	f7fa fb2c 	bl	8000adc <__aeabi_dcmplt>
 8006484:	2800      	cmp	r0, #0
 8006486:	f43f af35 	beq.w	80062f4 <_dtoa_r+0x464>
 800648a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800648c:	1e6b      	subs	r3, r5, #1
 800648e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006490:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006494:	2b30      	cmp	r3, #48	; 0x30
 8006496:	d0f8      	beq.n	800648a <_dtoa_r+0x5fa>
 8006498:	9700      	str	r7, [sp, #0]
 800649a:	e049      	b.n	8006530 <_dtoa_r+0x6a0>
 800649c:	4b05      	ldr	r3, [pc, #20]	; (80064b4 <_dtoa_r+0x624>)
 800649e:	f7fa f8ab 	bl	80005f8 <__aeabi_dmul>
 80064a2:	4680      	mov	r8, r0
 80064a4:	4689      	mov	r9, r1
 80064a6:	e7bd      	b.n	8006424 <_dtoa_r+0x594>
 80064a8:	080088f8 	.word	0x080088f8
 80064ac:	080088d0 	.word	0x080088d0
 80064b0:	3ff00000 	.word	0x3ff00000
 80064b4:	40240000 	.word	0x40240000
 80064b8:	401c0000 	.word	0x401c0000
 80064bc:	40140000 	.word	0x40140000
 80064c0:	3fe00000 	.word	0x3fe00000
 80064c4:	9d01      	ldr	r5, [sp, #4]
 80064c6:	4656      	mov	r6, sl
 80064c8:	465f      	mov	r7, fp
 80064ca:	4642      	mov	r2, r8
 80064cc:	464b      	mov	r3, r9
 80064ce:	4630      	mov	r0, r6
 80064d0:	4639      	mov	r1, r7
 80064d2:	f7fa f9bb 	bl	800084c <__aeabi_ddiv>
 80064d6:	f7fa fb3f 	bl	8000b58 <__aeabi_d2iz>
 80064da:	4682      	mov	sl, r0
 80064dc:	f7fa f822 	bl	8000524 <__aeabi_i2d>
 80064e0:	4642      	mov	r2, r8
 80064e2:	464b      	mov	r3, r9
 80064e4:	f7fa f888 	bl	80005f8 <__aeabi_dmul>
 80064e8:	4602      	mov	r2, r0
 80064ea:	460b      	mov	r3, r1
 80064ec:	4630      	mov	r0, r6
 80064ee:	4639      	mov	r1, r7
 80064f0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80064f4:	f7f9 fec8 	bl	8000288 <__aeabi_dsub>
 80064f8:	f805 6b01 	strb.w	r6, [r5], #1
 80064fc:	9e01      	ldr	r6, [sp, #4]
 80064fe:	9f03      	ldr	r7, [sp, #12]
 8006500:	1bae      	subs	r6, r5, r6
 8006502:	42b7      	cmp	r7, r6
 8006504:	4602      	mov	r2, r0
 8006506:	460b      	mov	r3, r1
 8006508:	d135      	bne.n	8006576 <_dtoa_r+0x6e6>
 800650a:	f7f9 febf 	bl	800028c <__adddf3>
 800650e:	4642      	mov	r2, r8
 8006510:	464b      	mov	r3, r9
 8006512:	4606      	mov	r6, r0
 8006514:	460f      	mov	r7, r1
 8006516:	f7fa faff 	bl	8000b18 <__aeabi_dcmpgt>
 800651a:	b9d0      	cbnz	r0, 8006552 <_dtoa_r+0x6c2>
 800651c:	4642      	mov	r2, r8
 800651e:	464b      	mov	r3, r9
 8006520:	4630      	mov	r0, r6
 8006522:	4639      	mov	r1, r7
 8006524:	f7fa fad0 	bl	8000ac8 <__aeabi_dcmpeq>
 8006528:	b110      	cbz	r0, 8006530 <_dtoa_r+0x6a0>
 800652a:	f01a 0f01 	tst.w	sl, #1
 800652e:	d110      	bne.n	8006552 <_dtoa_r+0x6c2>
 8006530:	4620      	mov	r0, r4
 8006532:	ee18 1a10 	vmov	r1, s16
 8006536:	f000 faf3 	bl	8006b20 <_Bfree>
 800653a:	2300      	movs	r3, #0
 800653c:	9800      	ldr	r0, [sp, #0]
 800653e:	702b      	strb	r3, [r5, #0]
 8006540:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006542:	3001      	adds	r0, #1
 8006544:	6018      	str	r0, [r3, #0]
 8006546:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006548:	2b00      	cmp	r3, #0
 800654a:	f43f acf1 	beq.w	8005f30 <_dtoa_r+0xa0>
 800654e:	601d      	str	r5, [r3, #0]
 8006550:	e4ee      	b.n	8005f30 <_dtoa_r+0xa0>
 8006552:	9f00      	ldr	r7, [sp, #0]
 8006554:	462b      	mov	r3, r5
 8006556:	461d      	mov	r5, r3
 8006558:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800655c:	2a39      	cmp	r2, #57	; 0x39
 800655e:	d106      	bne.n	800656e <_dtoa_r+0x6de>
 8006560:	9a01      	ldr	r2, [sp, #4]
 8006562:	429a      	cmp	r2, r3
 8006564:	d1f7      	bne.n	8006556 <_dtoa_r+0x6c6>
 8006566:	9901      	ldr	r1, [sp, #4]
 8006568:	2230      	movs	r2, #48	; 0x30
 800656a:	3701      	adds	r7, #1
 800656c:	700a      	strb	r2, [r1, #0]
 800656e:	781a      	ldrb	r2, [r3, #0]
 8006570:	3201      	adds	r2, #1
 8006572:	701a      	strb	r2, [r3, #0]
 8006574:	e790      	b.n	8006498 <_dtoa_r+0x608>
 8006576:	4ba6      	ldr	r3, [pc, #664]	; (8006810 <_dtoa_r+0x980>)
 8006578:	2200      	movs	r2, #0
 800657a:	f7fa f83d 	bl	80005f8 <__aeabi_dmul>
 800657e:	2200      	movs	r2, #0
 8006580:	2300      	movs	r3, #0
 8006582:	4606      	mov	r6, r0
 8006584:	460f      	mov	r7, r1
 8006586:	f7fa fa9f 	bl	8000ac8 <__aeabi_dcmpeq>
 800658a:	2800      	cmp	r0, #0
 800658c:	d09d      	beq.n	80064ca <_dtoa_r+0x63a>
 800658e:	e7cf      	b.n	8006530 <_dtoa_r+0x6a0>
 8006590:	9a08      	ldr	r2, [sp, #32]
 8006592:	2a00      	cmp	r2, #0
 8006594:	f000 80d7 	beq.w	8006746 <_dtoa_r+0x8b6>
 8006598:	9a06      	ldr	r2, [sp, #24]
 800659a:	2a01      	cmp	r2, #1
 800659c:	f300 80ba 	bgt.w	8006714 <_dtoa_r+0x884>
 80065a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80065a2:	2a00      	cmp	r2, #0
 80065a4:	f000 80b2 	beq.w	800670c <_dtoa_r+0x87c>
 80065a8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80065ac:	9e07      	ldr	r6, [sp, #28]
 80065ae:	9d04      	ldr	r5, [sp, #16]
 80065b0:	9a04      	ldr	r2, [sp, #16]
 80065b2:	441a      	add	r2, r3
 80065b4:	9204      	str	r2, [sp, #16]
 80065b6:	9a05      	ldr	r2, [sp, #20]
 80065b8:	2101      	movs	r1, #1
 80065ba:	441a      	add	r2, r3
 80065bc:	4620      	mov	r0, r4
 80065be:	9205      	str	r2, [sp, #20]
 80065c0:	f000 fb66 	bl	8006c90 <__i2b>
 80065c4:	4607      	mov	r7, r0
 80065c6:	2d00      	cmp	r5, #0
 80065c8:	dd0c      	ble.n	80065e4 <_dtoa_r+0x754>
 80065ca:	9b05      	ldr	r3, [sp, #20]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	dd09      	ble.n	80065e4 <_dtoa_r+0x754>
 80065d0:	42ab      	cmp	r3, r5
 80065d2:	9a04      	ldr	r2, [sp, #16]
 80065d4:	bfa8      	it	ge
 80065d6:	462b      	movge	r3, r5
 80065d8:	1ad2      	subs	r2, r2, r3
 80065da:	9204      	str	r2, [sp, #16]
 80065dc:	9a05      	ldr	r2, [sp, #20]
 80065de:	1aed      	subs	r5, r5, r3
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	9305      	str	r3, [sp, #20]
 80065e4:	9b07      	ldr	r3, [sp, #28]
 80065e6:	b31b      	cbz	r3, 8006630 <_dtoa_r+0x7a0>
 80065e8:	9b08      	ldr	r3, [sp, #32]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	f000 80af 	beq.w	800674e <_dtoa_r+0x8be>
 80065f0:	2e00      	cmp	r6, #0
 80065f2:	dd13      	ble.n	800661c <_dtoa_r+0x78c>
 80065f4:	4639      	mov	r1, r7
 80065f6:	4632      	mov	r2, r6
 80065f8:	4620      	mov	r0, r4
 80065fa:	f000 fc09 	bl	8006e10 <__pow5mult>
 80065fe:	ee18 2a10 	vmov	r2, s16
 8006602:	4601      	mov	r1, r0
 8006604:	4607      	mov	r7, r0
 8006606:	4620      	mov	r0, r4
 8006608:	f000 fb58 	bl	8006cbc <__multiply>
 800660c:	ee18 1a10 	vmov	r1, s16
 8006610:	4680      	mov	r8, r0
 8006612:	4620      	mov	r0, r4
 8006614:	f000 fa84 	bl	8006b20 <_Bfree>
 8006618:	ee08 8a10 	vmov	s16, r8
 800661c:	9b07      	ldr	r3, [sp, #28]
 800661e:	1b9a      	subs	r2, r3, r6
 8006620:	d006      	beq.n	8006630 <_dtoa_r+0x7a0>
 8006622:	ee18 1a10 	vmov	r1, s16
 8006626:	4620      	mov	r0, r4
 8006628:	f000 fbf2 	bl	8006e10 <__pow5mult>
 800662c:	ee08 0a10 	vmov	s16, r0
 8006630:	2101      	movs	r1, #1
 8006632:	4620      	mov	r0, r4
 8006634:	f000 fb2c 	bl	8006c90 <__i2b>
 8006638:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800663a:	2b00      	cmp	r3, #0
 800663c:	4606      	mov	r6, r0
 800663e:	f340 8088 	ble.w	8006752 <_dtoa_r+0x8c2>
 8006642:	461a      	mov	r2, r3
 8006644:	4601      	mov	r1, r0
 8006646:	4620      	mov	r0, r4
 8006648:	f000 fbe2 	bl	8006e10 <__pow5mult>
 800664c:	9b06      	ldr	r3, [sp, #24]
 800664e:	2b01      	cmp	r3, #1
 8006650:	4606      	mov	r6, r0
 8006652:	f340 8081 	ble.w	8006758 <_dtoa_r+0x8c8>
 8006656:	f04f 0800 	mov.w	r8, #0
 800665a:	6933      	ldr	r3, [r6, #16]
 800665c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006660:	6918      	ldr	r0, [r3, #16]
 8006662:	f000 fac5 	bl	8006bf0 <__hi0bits>
 8006666:	f1c0 0020 	rsb	r0, r0, #32
 800666a:	9b05      	ldr	r3, [sp, #20]
 800666c:	4418      	add	r0, r3
 800666e:	f010 001f 	ands.w	r0, r0, #31
 8006672:	f000 8092 	beq.w	800679a <_dtoa_r+0x90a>
 8006676:	f1c0 0320 	rsb	r3, r0, #32
 800667a:	2b04      	cmp	r3, #4
 800667c:	f340 808a 	ble.w	8006794 <_dtoa_r+0x904>
 8006680:	f1c0 001c 	rsb	r0, r0, #28
 8006684:	9b04      	ldr	r3, [sp, #16]
 8006686:	4403      	add	r3, r0
 8006688:	9304      	str	r3, [sp, #16]
 800668a:	9b05      	ldr	r3, [sp, #20]
 800668c:	4403      	add	r3, r0
 800668e:	4405      	add	r5, r0
 8006690:	9305      	str	r3, [sp, #20]
 8006692:	9b04      	ldr	r3, [sp, #16]
 8006694:	2b00      	cmp	r3, #0
 8006696:	dd07      	ble.n	80066a8 <_dtoa_r+0x818>
 8006698:	ee18 1a10 	vmov	r1, s16
 800669c:	461a      	mov	r2, r3
 800669e:	4620      	mov	r0, r4
 80066a0:	f000 fc10 	bl	8006ec4 <__lshift>
 80066a4:	ee08 0a10 	vmov	s16, r0
 80066a8:	9b05      	ldr	r3, [sp, #20]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	dd05      	ble.n	80066ba <_dtoa_r+0x82a>
 80066ae:	4631      	mov	r1, r6
 80066b0:	461a      	mov	r2, r3
 80066b2:	4620      	mov	r0, r4
 80066b4:	f000 fc06 	bl	8006ec4 <__lshift>
 80066b8:	4606      	mov	r6, r0
 80066ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d06e      	beq.n	800679e <_dtoa_r+0x90e>
 80066c0:	ee18 0a10 	vmov	r0, s16
 80066c4:	4631      	mov	r1, r6
 80066c6:	f000 fc6d 	bl	8006fa4 <__mcmp>
 80066ca:	2800      	cmp	r0, #0
 80066cc:	da67      	bge.n	800679e <_dtoa_r+0x90e>
 80066ce:	9b00      	ldr	r3, [sp, #0]
 80066d0:	3b01      	subs	r3, #1
 80066d2:	ee18 1a10 	vmov	r1, s16
 80066d6:	9300      	str	r3, [sp, #0]
 80066d8:	220a      	movs	r2, #10
 80066da:	2300      	movs	r3, #0
 80066dc:	4620      	mov	r0, r4
 80066de:	f000 fa41 	bl	8006b64 <__multadd>
 80066e2:	9b08      	ldr	r3, [sp, #32]
 80066e4:	ee08 0a10 	vmov	s16, r0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	f000 81b1 	beq.w	8006a50 <_dtoa_r+0xbc0>
 80066ee:	2300      	movs	r3, #0
 80066f0:	4639      	mov	r1, r7
 80066f2:	220a      	movs	r2, #10
 80066f4:	4620      	mov	r0, r4
 80066f6:	f000 fa35 	bl	8006b64 <__multadd>
 80066fa:	9b02      	ldr	r3, [sp, #8]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	4607      	mov	r7, r0
 8006700:	f300 808e 	bgt.w	8006820 <_dtoa_r+0x990>
 8006704:	9b06      	ldr	r3, [sp, #24]
 8006706:	2b02      	cmp	r3, #2
 8006708:	dc51      	bgt.n	80067ae <_dtoa_r+0x91e>
 800670a:	e089      	b.n	8006820 <_dtoa_r+0x990>
 800670c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800670e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006712:	e74b      	b.n	80065ac <_dtoa_r+0x71c>
 8006714:	9b03      	ldr	r3, [sp, #12]
 8006716:	1e5e      	subs	r6, r3, #1
 8006718:	9b07      	ldr	r3, [sp, #28]
 800671a:	42b3      	cmp	r3, r6
 800671c:	bfbf      	itttt	lt
 800671e:	9b07      	ldrlt	r3, [sp, #28]
 8006720:	9607      	strlt	r6, [sp, #28]
 8006722:	1af2      	sublt	r2, r6, r3
 8006724:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006726:	bfb6      	itet	lt
 8006728:	189b      	addlt	r3, r3, r2
 800672a:	1b9e      	subge	r6, r3, r6
 800672c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800672e:	9b03      	ldr	r3, [sp, #12]
 8006730:	bfb8      	it	lt
 8006732:	2600      	movlt	r6, #0
 8006734:	2b00      	cmp	r3, #0
 8006736:	bfb7      	itett	lt
 8006738:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800673c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006740:	1a9d      	sublt	r5, r3, r2
 8006742:	2300      	movlt	r3, #0
 8006744:	e734      	b.n	80065b0 <_dtoa_r+0x720>
 8006746:	9e07      	ldr	r6, [sp, #28]
 8006748:	9d04      	ldr	r5, [sp, #16]
 800674a:	9f08      	ldr	r7, [sp, #32]
 800674c:	e73b      	b.n	80065c6 <_dtoa_r+0x736>
 800674e:	9a07      	ldr	r2, [sp, #28]
 8006750:	e767      	b.n	8006622 <_dtoa_r+0x792>
 8006752:	9b06      	ldr	r3, [sp, #24]
 8006754:	2b01      	cmp	r3, #1
 8006756:	dc18      	bgt.n	800678a <_dtoa_r+0x8fa>
 8006758:	f1ba 0f00 	cmp.w	sl, #0
 800675c:	d115      	bne.n	800678a <_dtoa_r+0x8fa>
 800675e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006762:	b993      	cbnz	r3, 800678a <_dtoa_r+0x8fa>
 8006764:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006768:	0d1b      	lsrs	r3, r3, #20
 800676a:	051b      	lsls	r3, r3, #20
 800676c:	b183      	cbz	r3, 8006790 <_dtoa_r+0x900>
 800676e:	9b04      	ldr	r3, [sp, #16]
 8006770:	3301      	adds	r3, #1
 8006772:	9304      	str	r3, [sp, #16]
 8006774:	9b05      	ldr	r3, [sp, #20]
 8006776:	3301      	adds	r3, #1
 8006778:	9305      	str	r3, [sp, #20]
 800677a:	f04f 0801 	mov.w	r8, #1
 800677e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006780:	2b00      	cmp	r3, #0
 8006782:	f47f af6a 	bne.w	800665a <_dtoa_r+0x7ca>
 8006786:	2001      	movs	r0, #1
 8006788:	e76f      	b.n	800666a <_dtoa_r+0x7da>
 800678a:	f04f 0800 	mov.w	r8, #0
 800678e:	e7f6      	b.n	800677e <_dtoa_r+0x8ee>
 8006790:	4698      	mov	r8, r3
 8006792:	e7f4      	b.n	800677e <_dtoa_r+0x8ee>
 8006794:	f43f af7d 	beq.w	8006692 <_dtoa_r+0x802>
 8006798:	4618      	mov	r0, r3
 800679a:	301c      	adds	r0, #28
 800679c:	e772      	b.n	8006684 <_dtoa_r+0x7f4>
 800679e:	9b03      	ldr	r3, [sp, #12]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	dc37      	bgt.n	8006814 <_dtoa_r+0x984>
 80067a4:	9b06      	ldr	r3, [sp, #24]
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	dd34      	ble.n	8006814 <_dtoa_r+0x984>
 80067aa:	9b03      	ldr	r3, [sp, #12]
 80067ac:	9302      	str	r3, [sp, #8]
 80067ae:	9b02      	ldr	r3, [sp, #8]
 80067b0:	b96b      	cbnz	r3, 80067ce <_dtoa_r+0x93e>
 80067b2:	4631      	mov	r1, r6
 80067b4:	2205      	movs	r2, #5
 80067b6:	4620      	mov	r0, r4
 80067b8:	f000 f9d4 	bl	8006b64 <__multadd>
 80067bc:	4601      	mov	r1, r0
 80067be:	4606      	mov	r6, r0
 80067c0:	ee18 0a10 	vmov	r0, s16
 80067c4:	f000 fbee 	bl	8006fa4 <__mcmp>
 80067c8:	2800      	cmp	r0, #0
 80067ca:	f73f adbb 	bgt.w	8006344 <_dtoa_r+0x4b4>
 80067ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067d0:	9d01      	ldr	r5, [sp, #4]
 80067d2:	43db      	mvns	r3, r3
 80067d4:	9300      	str	r3, [sp, #0]
 80067d6:	f04f 0800 	mov.w	r8, #0
 80067da:	4631      	mov	r1, r6
 80067dc:	4620      	mov	r0, r4
 80067de:	f000 f99f 	bl	8006b20 <_Bfree>
 80067e2:	2f00      	cmp	r7, #0
 80067e4:	f43f aea4 	beq.w	8006530 <_dtoa_r+0x6a0>
 80067e8:	f1b8 0f00 	cmp.w	r8, #0
 80067ec:	d005      	beq.n	80067fa <_dtoa_r+0x96a>
 80067ee:	45b8      	cmp	r8, r7
 80067f0:	d003      	beq.n	80067fa <_dtoa_r+0x96a>
 80067f2:	4641      	mov	r1, r8
 80067f4:	4620      	mov	r0, r4
 80067f6:	f000 f993 	bl	8006b20 <_Bfree>
 80067fa:	4639      	mov	r1, r7
 80067fc:	4620      	mov	r0, r4
 80067fe:	f000 f98f 	bl	8006b20 <_Bfree>
 8006802:	e695      	b.n	8006530 <_dtoa_r+0x6a0>
 8006804:	2600      	movs	r6, #0
 8006806:	4637      	mov	r7, r6
 8006808:	e7e1      	b.n	80067ce <_dtoa_r+0x93e>
 800680a:	9700      	str	r7, [sp, #0]
 800680c:	4637      	mov	r7, r6
 800680e:	e599      	b.n	8006344 <_dtoa_r+0x4b4>
 8006810:	40240000 	.word	0x40240000
 8006814:	9b08      	ldr	r3, [sp, #32]
 8006816:	2b00      	cmp	r3, #0
 8006818:	f000 80ca 	beq.w	80069b0 <_dtoa_r+0xb20>
 800681c:	9b03      	ldr	r3, [sp, #12]
 800681e:	9302      	str	r3, [sp, #8]
 8006820:	2d00      	cmp	r5, #0
 8006822:	dd05      	ble.n	8006830 <_dtoa_r+0x9a0>
 8006824:	4639      	mov	r1, r7
 8006826:	462a      	mov	r2, r5
 8006828:	4620      	mov	r0, r4
 800682a:	f000 fb4b 	bl	8006ec4 <__lshift>
 800682e:	4607      	mov	r7, r0
 8006830:	f1b8 0f00 	cmp.w	r8, #0
 8006834:	d05b      	beq.n	80068ee <_dtoa_r+0xa5e>
 8006836:	6879      	ldr	r1, [r7, #4]
 8006838:	4620      	mov	r0, r4
 800683a:	f000 f931 	bl	8006aa0 <_Balloc>
 800683e:	4605      	mov	r5, r0
 8006840:	b928      	cbnz	r0, 800684e <_dtoa_r+0x9be>
 8006842:	4b87      	ldr	r3, [pc, #540]	; (8006a60 <_dtoa_r+0xbd0>)
 8006844:	4602      	mov	r2, r0
 8006846:	f240 21ea 	movw	r1, #746	; 0x2ea
 800684a:	f7ff bb3b 	b.w	8005ec4 <_dtoa_r+0x34>
 800684e:	693a      	ldr	r2, [r7, #16]
 8006850:	3202      	adds	r2, #2
 8006852:	0092      	lsls	r2, r2, #2
 8006854:	f107 010c 	add.w	r1, r7, #12
 8006858:	300c      	adds	r0, #12
 800685a:	f000 f913 	bl	8006a84 <memcpy>
 800685e:	2201      	movs	r2, #1
 8006860:	4629      	mov	r1, r5
 8006862:	4620      	mov	r0, r4
 8006864:	f000 fb2e 	bl	8006ec4 <__lshift>
 8006868:	9b01      	ldr	r3, [sp, #4]
 800686a:	f103 0901 	add.w	r9, r3, #1
 800686e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006872:	4413      	add	r3, r2
 8006874:	9305      	str	r3, [sp, #20]
 8006876:	f00a 0301 	and.w	r3, sl, #1
 800687a:	46b8      	mov	r8, r7
 800687c:	9304      	str	r3, [sp, #16]
 800687e:	4607      	mov	r7, r0
 8006880:	4631      	mov	r1, r6
 8006882:	ee18 0a10 	vmov	r0, s16
 8006886:	f7ff fa77 	bl	8005d78 <quorem>
 800688a:	4641      	mov	r1, r8
 800688c:	9002      	str	r0, [sp, #8]
 800688e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006892:	ee18 0a10 	vmov	r0, s16
 8006896:	f000 fb85 	bl	8006fa4 <__mcmp>
 800689a:	463a      	mov	r2, r7
 800689c:	9003      	str	r0, [sp, #12]
 800689e:	4631      	mov	r1, r6
 80068a0:	4620      	mov	r0, r4
 80068a2:	f000 fb9b 	bl	8006fdc <__mdiff>
 80068a6:	68c2      	ldr	r2, [r0, #12]
 80068a8:	f109 3bff 	add.w	fp, r9, #4294967295
 80068ac:	4605      	mov	r5, r0
 80068ae:	bb02      	cbnz	r2, 80068f2 <_dtoa_r+0xa62>
 80068b0:	4601      	mov	r1, r0
 80068b2:	ee18 0a10 	vmov	r0, s16
 80068b6:	f000 fb75 	bl	8006fa4 <__mcmp>
 80068ba:	4602      	mov	r2, r0
 80068bc:	4629      	mov	r1, r5
 80068be:	4620      	mov	r0, r4
 80068c0:	9207      	str	r2, [sp, #28]
 80068c2:	f000 f92d 	bl	8006b20 <_Bfree>
 80068c6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80068ca:	ea43 0102 	orr.w	r1, r3, r2
 80068ce:	9b04      	ldr	r3, [sp, #16]
 80068d0:	430b      	orrs	r3, r1
 80068d2:	464d      	mov	r5, r9
 80068d4:	d10f      	bne.n	80068f6 <_dtoa_r+0xa66>
 80068d6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80068da:	d02a      	beq.n	8006932 <_dtoa_r+0xaa2>
 80068dc:	9b03      	ldr	r3, [sp, #12]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	dd02      	ble.n	80068e8 <_dtoa_r+0xa58>
 80068e2:	9b02      	ldr	r3, [sp, #8]
 80068e4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80068e8:	f88b a000 	strb.w	sl, [fp]
 80068ec:	e775      	b.n	80067da <_dtoa_r+0x94a>
 80068ee:	4638      	mov	r0, r7
 80068f0:	e7ba      	b.n	8006868 <_dtoa_r+0x9d8>
 80068f2:	2201      	movs	r2, #1
 80068f4:	e7e2      	b.n	80068bc <_dtoa_r+0xa2c>
 80068f6:	9b03      	ldr	r3, [sp, #12]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	db04      	blt.n	8006906 <_dtoa_r+0xa76>
 80068fc:	9906      	ldr	r1, [sp, #24]
 80068fe:	430b      	orrs	r3, r1
 8006900:	9904      	ldr	r1, [sp, #16]
 8006902:	430b      	orrs	r3, r1
 8006904:	d122      	bne.n	800694c <_dtoa_r+0xabc>
 8006906:	2a00      	cmp	r2, #0
 8006908:	ddee      	ble.n	80068e8 <_dtoa_r+0xa58>
 800690a:	ee18 1a10 	vmov	r1, s16
 800690e:	2201      	movs	r2, #1
 8006910:	4620      	mov	r0, r4
 8006912:	f000 fad7 	bl	8006ec4 <__lshift>
 8006916:	4631      	mov	r1, r6
 8006918:	ee08 0a10 	vmov	s16, r0
 800691c:	f000 fb42 	bl	8006fa4 <__mcmp>
 8006920:	2800      	cmp	r0, #0
 8006922:	dc03      	bgt.n	800692c <_dtoa_r+0xa9c>
 8006924:	d1e0      	bne.n	80068e8 <_dtoa_r+0xa58>
 8006926:	f01a 0f01 	tst.w	sl, #1
 800692a:	d0dd      	beq.n	80068e8 <_dtoa_r+0xa58>
 800692c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006930:	d1d7      	bne.n	80068e2 <_dtoa_r+0xa52>
 8006932:	2339      	movs	r3, #57	; 0x39
 8006934:	f88b 3000 	strb.w	r3, [fp]
 8006938:	462b      	mov	r3, r5
 800693a:	461d      	mov	r5, r3
 800693c:	3b01      	subs	r3, #1
 800693e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006942:	2a39      	cmp	r2, #57	; 0x39
 8006944:	d071      	beq.n	8006a2a <_dtoa_r+0xb9a>
 8006946:	3201      	adds	r2, #1
 8006948:	701a      	strb	r2, [r3, #0]
 800694a:	e746      	b.n	80067da <_dtoa_r+0x94a>
 800694c:	2a00      	cmp	r2, #0
 800694e:	dd07      	ble.n	8006960 <_dtoa_r+0xad0>
 8006950:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006954:	d0ed      	beq.n	8006932 <_dtoa_r+0xaa2>
 8006956:	f10a 0301 	add.w	r3, sl, #1
 800695a:	f88b 3000 	strb.w	r3, [fp]
 800695e:	e73c      	b.n	80067da <_dtoa_r+0x94a>
 8006960:	9b05      	ldr	r3, [sp, #20]
 8006962:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006966:	4599      	cmp	r9, r3
 8006968:	d047      	beq.n	80069fa <_dtoa_r+0xb6a>
 800696a:	ee18 1a10 	vmov	r1, s16
 800696e:	2300      	movs	r3, #0
 8006970:	220a      	movs	r2, #10
 8006972:	4620      	mov	r0, r4
 8006974:	f000 f8f6 	bl	8006b64 <__multadd>
 8006978:	45b8      	cmp	r8, r7
 800697a:	ee08 0a10 	vmov	s16, r0
 800697e:	f04f 0300 	mov.w	r3, #0
 8006982:	f04f 020a 	mov.w	r2, #10
 8006986:	4641      	mov	r1, r8
 8006988:	4620      	mov	r0, r4
 800698a:	d106      	bne.n	800699a <_dtoa_r+0xb0a>
 800698c:	f000 f8ea 	bl	8006b64 <__multadd>
 8006990:	4680      	mov	r8, r0
 8006992:	4607      	mov	r7, r0
 8006994:	f109 0901 	add.w	r9, r9, #1
 8006998:	e772      	b.n	8006880 <_dtoa_r+0x9f0>
 800699a:	f000 f8e3 	bl	8006b64 <__multadd>
 800699e:	4639      	mov	r1, r7
 80069a0:	4680      	mov	r8, r0
 80069a2:	2300      	movs	r3, #0
 80069a4:	220a      	movs	r2, #10
 80069a6:	4620      	mov	r0, r4
 80069a8:	f000 f8dc 	bl	8006b64 <__multadd>
 80069ac:	4607      	mov	r7, r0
 80069ae:	e7f1      	b.n	8006994 <_dtoa_r+0xb04>
 80069b0:	9b03      	ldr	r3, [sp, #12]
 80069b2:	9302      	str	r3, [sp, #8]
 80069b4:	9d01      	ldr	r5, [sp, #4]
 80069b6:	ee18 0a10 	vmov	r0, s16
 80069ba:	4631      	mov	r1, r6
 80069bc:	f7ff f9dc 	bl	8005d78 <quorem>
 80069c0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80069c4:	9b01      	ldr	r3, [sp, #4]
 80069c6:	f805 ab01 	strb.w	sl, [r5], #1
 80069ca:	1aea      	subs	r2, r5, r3
 80069cc:	9b02      	ldr	r3, [sp, #8]
 80069ce:	4293      	cmp	r3, r2
 80069d0:	dd09      	ble.n	80069e6 <_dtoa_r+0xb56>
 80069d2:	ee18 1a10 	vmov	r1, s16
 80069d6:	2300      	movs	r3, #0
 80069d8:	220a      	movs	r2, #10
 80069da:	4620      	mov	r0, r4
 80069dc:	f000 f8c2 	bl	8006b64 <__multadd>
 80069e0:	ee08 0a10 	vmov	s16, r0
 80069e4:	e7e7      	b.n	80069b6 <_dtoa_r+0xb26>
 80069e6:	9b02      	ldr	r3, [sp, #8]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	bfc8      	it	gt
 80069ec:	461d      	movgt	r5, r3
 80069ee:	9b01      	ldr	r3, [sp, #4]
 80069f0:	bfd8      	it	le
 80069f2:	2501      	movle	r5, #1
 80069f4:	441d      	add	r5, r3
 80069f6:	f04f 0800 	mov.w	r8, #0
 80069fa:	ee18 1a10 	vmov	r1, s16
 80069fe:	2201      	movs	r2, #1
 8006a00:	4620      	mov	r0, r4
 8006a02:	f000 fa5f 	bl	8006ec4 <__lshift>
 8006a06:	4631      	mov	r1, r6
 8006a08:	ee08 0a10 	vmov	s16, r0
 8006a0c:	f000 faca 	bl	8006fa4 <__mcmp>
 8006a10:	2800      	cmp	r0, #0
 8006a12:	dc91      	bgt.n	8006938 <_dtoa_r+0xaa8>
 8006a14:	d102      	bne.n	8006a1c <_dtoa_r+0xb8c>
 8006a16:	f01a 0f01 	tst.w	sl, #1
 8006a1a:	d18d      	bne.n	8006938 <_dtoa_r+0xaa8>
 8006a1c:	462b      	mov	r3, r5
 8006a1e:	461d      	mov	r5, r3
 8006a20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a24:	2a30      	cmp	r2, #48	; 0x30
 8006a26:	d0fa      	beq.n	8006a1e <_dtoa_r+0xb8e>
 8006a28:	e6d7      	b.n	80067da <_dtoa_r+0x94a>
 8006a2a:	9a01      	ldr	r2, [sp, #4]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d184      	bne.n	800693a <_dtoa_r+0xaaa>
 8006a30:	9b00      	ldr	r3, [sp, #0]
 8006a32:	3301      	adds	r3, #1
 8006a34:	9300      	str	r3, [sp, #0]
 8006a36:	2331      	movs	r3, #49	; 0x31
 8006a38:	7013      	strb	r3, [r2, #0]
 8006a3a:	e6ce      	b.n	80067da <_dtoa_r+0x94a>
 8006a3c:	4b09      	ldr	r3, [pc, #36]	; (8006a64 <_dtoa_r+0xbd4>)
 8006a3e:	f7ff ba95 	b.w	8005f6c <_dtoa_r+0xdc>
 8006a42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	f47f aa6e 	bne.w	8005f26 <_dtoa_r+0x96>
 8006a4a:	4b07      	ldr	r3, [pc, #28]	; (8006a68 <_dtoa_r+0xbd8>)
 8006a4c:	f7ff ba8e 	b.w	8005f6c <_dtoa_r+0xdc>
 8006a50:	9b02      	ldr	r3, [sp, #8]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	dcae      	bgt.n	80069b4 <_dtoa_r+0xb24>
 8006a56:	9b06      	ldr	r3, [sp, #24]
 8006a58:	2b02      	cmp	r3, #2
 8006a5a:	f73f aea8 	bgt.w	80067ae <_dtoa_r+0x91e>
 8006a5e:	e7a9      	b.n	80069b4 <_dtoa_r+0xb24>
 8006a60:	0800885f 	.word	0x0800885f
 8006a64:	080087bc 	.word	0x080087bc
 8006a68:	080087e0 	.word	0x080087e0

08006a6c <_localeconv_r>:
 8006a6c:	4800      	ldr	r0, [pc, #0]	; (8006a70 <_localeconv_r+0x4>)
 8006a6e:	4770      	bx	lr
 8006a70:	20000164 	.word	0x20000164

08006a74 <malloc>:
 8006a74:	4b02      	ldr	r3, [pc, #8]	; (8006a80 <malloc+0xc>)
 8006a76:	4601      	mov	r1, r0
 8006a78:	6818      	ldr	r0, [r3, #0]
 8006a7a:	f000 bc17 	b.w	80072ac <_malloc_r>
 8006a7e:	bf00      	nop
 8006a80:	20000010 	.word	0x20000010

08006a84 <memcpy>:
 8006a84:	440a      	add	r2, r1
 8006a86:	4291      	cmp	r1, r2
 8006a88:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a8c:	d100      	bne.n	8006a90 <memcpy+0xc>
 8006a8e:	4770      	bx	lr
 8006a90:	b510      	push	{r4, lr}
 8006a92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a9a:	4291      	cmp	r1, r2
 8006a9c:	d1f9      	bne.n	8006a92 <memcpy+0xe>
 8006a9e:	bd10      	pop	{r4, pc}

08006aa0 <_Balloc>:
 8006aa0:	b570      	push	{r4, r5, r6, lr}
 8006aa2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006aa4:	4604      	mov	r4, r0
 8006aa6:	460d      	mov	r5, r1
 8006aa8:	b976      	cbnz	r6, 8006ac8 <_Balloc+0x28>
 8006aaa:	2010      	movs	r0, #16
 8006aac:	f7ff ffe2 	bl	8006a74 <malloc>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	6260      	str	r0, [r4, #36]	; 0x24
 8006ab4:	b920      	cbnz	r0, 8006ac0 <_Balloc+0x20>
 8006ab6:	4b18      	ldr	r3, [pc, #96]	; (8006b18 <_Balloc+0x78>)
 8006ab8:	4818      	ldr	r0, [pc, #96]	; (8006b1c <_Balloc+0x7c>)
 8006aba:	2166      	movs	r1, #102	; 0x66
 8006abc:	f000 fdd6 	bl	800766c <__assert_func>
 8006ac0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ac4:	6006      	str	r6, [r0, #0]
 8006ac6:	60c6      	str	r6, [r0, #12]
 8006ac8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006aca:	68f3      	ldr	r3, [r6, #12]
 8006acc:	b183      	cbz	r3, 8006af0 <_Balloc+0x50>
 8006ace:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006ad6:	b9b8      	cbnz	r0, 8006b08 <_Balloc+0x68>
 8006ad8:	2101      	movs	r1, #1
 8006ada:	fa01 f605 	lsl.w	r6, r1, r5
 8006ade:	1d72      	adds	r2, r6, #5
 8006ae0:	0092      	lsls	r2, r2, #2
 8006ae2:	4620      	mov	r0, r4
 8006ae4:	f000 fb60 	bl	80071a8 <_calloc_r>
 8006ae8:	b160      	cbz	r0, 8006b04 <_Balloc+0x64>
 8006aea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006aee:	e00e      	b.n	8006b0e <_Balloc+0x6e>
 8006af0:	2221      	movs	r2, #33	; 0x21
 8006af2:	2104      	movs	r1, #4
 8006af4:	4620      	mov	r0, r4
 8006af6:	f000 fb57 	bl	80071a8 <_calloc_r>
 8006afa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006afc:	60f0      	str	r0, [r6, #12]
 8006afe:	68db      	ldr	r3, [r3, #12]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d1e4      	bne.n	8006ace <_Balloc+0x2e>
 8006b04:	2000      	movs	r0, #0
 8006b06:	bd70      	pop	{r4, r5, r6, pc}
 8006b08:	6802      	ldr	r2, [r0, #0]
 8006b0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006b0e:	2300      	movs	r3, #0
 8006b10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006b14:	e7f7      	b.n	8006b06 <_Balloc+0x66>
 8006b16:	bf00      	nop
 8006b18:	080087ed 	.word	0x080087ed
 8006b1c:	08008870 	.word	0x08008870

08006b20 <_Bfree>:
 8006b20:	b570      	push	{r4, r5, r6, lr}
 8006b22:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006b24:	4605      	mov	r5, r0
 8006b26:	460c      	mov	r4, r1
 8006b28:	b976      	cbnz	r6, 8006b48 <_Bfree+0x28>
 8006b2a:	2010      	movs	r0, #16
 8006b2c:	f7ff ffa2 	bl	8006a74 <malloc>
 8006b30:	4602      	mov	r2, r0
 8006b32:	6268      	str	r0, [r5, #36]	; 0x24
 8006b34:	b920      	cbnz	r0, 8006b40 <_Bfree+0x20>
 8006b36:	4b09      	ldr	r3, [pc, #36]	; (8006b5c <_Bfree+0x3c>)
 8006b38:	4809      	ldr	r0, [pc, #36]	; (8006b60 <_Bfree+0x40>)
 8006b3a:	218a      	movs	r1, #138	; 0x8a
 8006b3c:	f000 fd96 	bl	800766c <__assert_func>
 8006b40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b44:	6006      	str	r6, [r0, #0]
 8006b46:	60c6      	str	r6, [r0, #12]
 8006b48:	b13c      	cbz	r4, 8006b5a <_Bfree+0x3a>
 8006b4a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006b4c:	6862      	ldr	r2, [r4, #4]
 8006b4e:	68db      	ldr	r3, [r3, #12]
 8006b50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b54:	6021      	str	r1, [r4, #0]
 8006b56:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006b5a:	bd70      	pop	{r4, r5, r6, pc}
 8006b5c:	080087ed 	.word	0x080087ed
 8006b60:	08008870 	.word	0x08008870

08006b64 <__multadd>:
 8006b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b68:	690d      	ldr	r5, [r1, #16]
 8006b6a:	4607      	mov	r7, r0
 8006b6c:	460c      	mov	r4, r1
 8006b6e:	461e      	mov	r6, r3
 8006b70:	f101 0c14 	add.w	ip, r1, #20
 8006b74:	2000      	movs	r0, #0
 8006b76:	f8dc 3000 	ldr.w	r3, [ip]
 8006b7a:	b299      	uxth	r1, r3
 8006b7c:	fb02 6101 	mla	r1, r2, r1, r6
 8006b80:	0c1e      	lsrs	r6, r3, #16
 8006b82:	0c0b      	lsrs	r3, r1, #16
 8006b84:	fb02 3306 	mla	r3, r2, r6, r3
 8006b88:	b289      	uxth	r1, r1
 8006b8a:	3001      	adds	r0, #1
 8006b8c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006b90:	4285      	cmp	r5, r0
 8006b92:	f84c 1b04 	str.w	r1, [ip], #4
 8006b96:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006b9a:	dcec      	bgt.n	8006b76 <__multadd+0x12>
 8006b9c:	b30e      	cbz	r6, 8006be2 <__multadd+0x7e>
 8006b9e:	68a3      	ldr	r3, [r4, #8]
 8006ba0:	42ab      	cmp	r3, r5
 8006ba2:	dc19      	bgt.n	8006bd8 <__multadd+0x74>
 8006ba4:	6861      	ldr	r1, [r4, #4]
 8006ba6:	4638      	mov	r0, r7
 8006ba8:	3101      	adds	r1, #1
 8006baa:	f7ff ff79 	bl	8006aa0 <_Balloc>
 8006bae:	4680      	mov	r8, r0
 8006bb0:	b928      	cbnz	r0, 8006bbe <__multadd+0x5a>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	4b0c      	ldr	r3, [pc, #48]	; (8006be8 <__multadd+0x84>)
 8006bb6:	480d      	ldr	r0, [pc, #52]	; (8006bec <__multadd+0x88>)
 8006bb8:	21b5      	movs	r1, #181	; 0xb5
 8006bba:	f000 fd57 	bl	800766c <__assert_func>
 8006bbe:	6922      	ldr	r2, [r4, #16]
 8006bc0:	3202      	adds	r2, #2
 8006bc2:	f104 010c 	add.w	r1, r4, #12
 8006bc6:	0092      	lsls	r2, r2, #2
 8006bc8:	300c      	adds	r0, #12
 8006bca:	f7ff ff5b 	bl	8006a84 <memcpy>
 8006bce:	4621      	mov	r1, r4
 8006bd0:	4638      	mov	r0, r7
 8006bd2:	f7ff ffa5 	bl	8006b20 <_Bfree>
 8006bd6:	4644      	mov	r4, r8
 8006bd8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006bdc:	3501      	adds	r5, #1
 8006bde:	615e      	str	r6, [r3, #20]
 8006be0:	6125      	str	r5, [r4, #16]
 8006be2:	4620      	mov	r0, r4
 8006be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006be8:	0800885f 	.word	0x0800885f
 8006bec:	08008870 	.word	0x08008870

08006bf0 <__hi0bits>:
 8006bf0:	0c03      	lsrs	r3, r0, #16
 8006bf2:	041b      	lsls	r3, r3, #16
 8006bf4:	b9d3      	cbnz	r3, 8006c2c <__hi0bits+0x3c>
 8006bf6:	0400      	lsls	r0, r0, #16
 8006bf8:	2310      	movs	r3, #16
 8006bfa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006bfe:	bf04      	itt	eq
 8006c00:	0200      	lsleq	r0, r0, #8
 8006c02:	3308      	addeq	r3, #8
 8006c04:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006c08:	bf04      	itt	eq
 8006c0a:	0100      	lsleq	r0, r0, #4
 8006c0c:	3304      	addeq	r3, #4
 8006c0e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006c12:	bf04      	itt	eq
 8006c14:	0080      	lsleq	r0, r0, #2
 8006c16:	3302      	addeq	r3, #2
 8006c18:	2800      	cmp	r0, #0
 8006c1a:	db05      	blt.n	8006c28 <__hi0bits+0x38>
 8006c1c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006c20:	f103 0301 	add.w	r3, r3, #1
 8006c24:	bf08      	it	eq
 8006c26:	2320      	moveq	r3, #32
 8006c28:	4618      	mov	r0, r3
 8006c2a:	4770      	bx	lr
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	e7e4      	b.n	8006bfa <__hi0bits+0xa>

08006c30 <__lo0bits>:
 8006c30:	6803      	ldr	r3, [r0, #0]
 8006c32:	f013 0207 	ands.w	r2, r3, #7
 8006c36:	4601      	mov	r1, r0
 8006c38:	d00b      	beq.n	8006c52 <__lo0bits+0x22>
 8006c3a:	07da      	lsls	r2, r3, #31
 8006c3c:	d423      	bmi.n	8006c86 <__lo0bits+0x56>
 8006c3e:	0798      	lsls	r0, r3, #30
 8006c40:	bf49      	itett	mi
 8006c42:	085b      	lsrmi	r3, r3, #1
 8006c44:	089b      	lsrpl	r3, r3, #2
 8006c46:	2001      	movmi	r0, #1
 8006c48:	600b      	strmi	r3, [r1, #0]
 8006c4a:	bf5c      	itt	pl
 8006c4c:	600b      	strpl	r3, [r1, #0]
 8006c4e:	2002      	movpl	r0, #2
 8006c50:	4770      	bx	lr
 8006c52:	b298      	uxth	r0, r3
 8006c54:	b9a8      	cbnz	r0, 8006c82 <__lo0bits+0x52>
 8006c56:	0c1b      	lsrs	r3, r3, #16
 8006c58:	2010      	movs	r0, #16
 8006c5a:	b2da      	uxtb	r2, r3
 8006c5c:	b90a      	cbnz	r2, 8006c62 <__lo0bits+0x32>
 8006c5e:	3008      	adds	r0, #8
 8006c60:	0a1b      	lsrs	r3, r3, #8
 8006c62:	071a      	lsls	r2, r3, #28
 8006c64:	bf04      	itt	eq
 8006c66:	091b      	lsreq	r3, r3, #4
 8006c68:	3004      	addeq	r0, #4
 8006c6a:	079a      	lsls	r2, r3, #30
 8006c6c:	bf04      	itt	eq
 8006c6e:	089b      	lsreq	r3, r3, #2
 8006c70:	3002      	addeq	r0, #2
 8006c72:	07da      	lsls	r2, r3, #31
 8006c74:	d403      	bmi.n	8006c7e <__lo0bits+0x4e>
 8006c76:	085b      	lsrs	r3, r3, #1
 8006c78:	f100 0001 	add.w	r0, r0, #1
 8006c7c:	d005      	beq.n	8006c8a <__lo0bits+0x5a>
 8006c7e:	600b      	str	r3, [r1, #0]
 8006c80:	4770      	bx	lr
 8006c82:	4610      	mov	r0, r2
 8006c84:	e7e9      	b.n	8006c5a <__lo0bits+0x2a>
 8006c86:	2000      	movs	r0, #0
 8006c88:	4770      	bx	lr
 8006c8a:	2020      	movs	r0, #32
 8006c8c:	4770      	bx	lr
	...

08006c90 <__i2b>:
 8006c90:	b510      	push	{r4, lr}
 8006c92:	460c      	mov	r4, r1
 8006c94:	2101      	movs	r1, #1
 8006c96:	f7ff ff03 	bl	8006aa0 <_Balloc>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	b928      	cbnz	r0, 8006caa <__i2b+0x1a>
 8006c9e:	4b05      	ldr	r3, [pc, #20]	; (8006cb4 <__i2b+0x24>)
 8006ca0:	4805      	ldr	r0, [pc, #20]	; (8006cb8 <__i2b+0x28>)
 8006ca2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006ca6:	f000 fce1 	bl	800766c <__assert_func>
 8006caa:	2301      	movs	r3, #1
 8006cac:	6144      	str	r4, [r0, #20]
 8006cae:	6103      	str	r3, [r0, #16]
 8006cb0:	bd10      	pop	{r4, pc}
 8006cb2:	bf00      	nop
 8006cb4:	0800885f 	.word	0x0800885f
 8006cb8:	08008870 	.word	0x08008870

08006cbc <__multiply>:
 8006cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cc0:	4691      	mov	r9, r2
 8006cc2:	690a      	ldr	r2, [r1, #16]
 8006cc4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	bfb8      	it	lt
 8006ccc:	460b      	movlt	r3, r1
 8006cce:	460c      	mov	r4, r1
 8006cd0:	bfbc      	itt	lt
 8006cd2:	464c      	movlt	r4, r9
 8006cd4:	4699      	movlt	r9, r3
 8006cd6:	6927      	ldr	r7, [r4, #16]
 8006cd8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006cdc:	68a3      	ldr	r3, [r4, #8]
 8006cde:	6861      	ldr	r1, [r4, #4]
 8006ce0:	eb07 060a 	add.w	r6, r7, sl
 8006ce4:	42b3      	cmp	r3, r6
 8006ce6:	b085      	sub	sp, #20
 8006ce8:	bfb8      	it	lt
 8006cea:	3101      	addlt	r1, #1
 8006cec:	f7ff fed8 	bl	8006aa0 <_Balloc>
 8006cf0:	b930      	cbnz	r0, 8006d00 <__multiply+0x44>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	4b44      	ldr	r3, [pc, #272]	; (8006e08 <__multiply+0x14c>)
 8006cf6:	4845      	ldr	r0, [pc, #276]	; (8006e0c <__multiply+0x150>)
 8006cf8:	f240 115d 	movw	r1, #349	; 0x15d
 8006cfc:	f000 fcb6 	bl	800766c <__assert_func>
 8006d00:	f100 0514 	add.w	r5, r0, #20
 8006d04:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006d08:	462b      	mov	r3, r5
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	4543      	cmp	r3, r8
 8006d0e:	d321      	bcc.n	8006d54 <__multiply+0x98>
 8006d10:	f104 0314 	add.w	r3, r4, #20
 8006d14:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006d18:	f109 0314 	add.w	r3, r9, #20
 8006d1c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006d20:	9202      	str	r2, [sp, #8]
 8006d22:	1b3a      	subs	r2, r7, r4
 8006d24:	3a15      	subs	r2, #21
 8006d26:	f022 0203 	bic.w	r2, r2, #3
 8006d2a:	3204      	adds	r2, #4
 8006d2c:	f104 0115 	add.w	r1, r4, #21
 8006d30:	428f      	cmp	r7, r1
 8006d32:	bf38      	it	cc
 8006d34:	2204      	movcc	r2, #4
 8006d36:	9201      	str	r2, [sp, #4]
 8006d38:	9a02      	ldr	r2, [sp, #8]
 8006d3a:	9303      	str	r3, [sp, #12]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d80c      	bhi.n	8006d5a <__multiply+0x9e>
 8006d40:	2e00      	cmp	r6, #0
 8006d42:	dd03      	ble.n	8006d4c <__multiply+0x90>
 8006d44:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d05a      	beq.n	8006e02 <__multiply+0x146>
 8006d4c:	6106      	str	r6, [r0, #16]
 8006d4e:	b005      	add	sp, #20
 8006d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d54:	f843 2b04 	str.w	r2, [r3], #4
 8006d58:	e7d8      	b.n	8006d0c <__multiply+0x50>
 8006d5a:	f8b3 a000 	ldrh.w	sl, [r3]
 8006d5e:	f1ba 0f00 	cmp.w	sl, #0
 8006d62:	d024      	beq.n	8006dae <__multiply+0xf2>
 8006d64:	f104 0e14 	add.w	lr, r4, #20
 8006d68:	46a9      	mov	r9, r5
 8006d6a:	f04f 0c00 	mov.w	ip, #0
 8006d6e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006d72:	f8d9 1000 	ldr.w	r1, [r9]
 8006d76:	fa1f fb82 	uxth.w	fp, r2
 8006d7a:	b289      	uxth	r1, r1
 8006d7c:	fb0a 110b 	mla	r1, sl, fp, r1
 8006d80:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006d84:	f8d9 2000 	ldr.w	r2, [r9]
 8006d88:	4461      	add	r1, ip
 8006d8a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006d8e:	fb0a c20b 	mla	r2, sl, fp, ip
 8006d92:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006d96:	b289      	uxth	r1, r1
 8006d98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006d9c:	4577      	cmp	r7, lr
 8006d9e:	f849 1b04 	str.w	r1, [r9], #4
 8006da2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006da6:	d8e2      	bhi.n	8006d6e <__multiply+0xb2>
 8006da8:	9a01      	ldr	r2, [sp, #4]
 8006daa:	f845 c002 	str.w	ip, [r5, r2]
 8006dae:	9a03      	ldr	r2, [sp, #12]
 8006db0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006db4:	3304      	adds	r3, #4
 8006db6:	f1b9 0f00 	cmp.w	r9, #0
 8006dba:	d020      	beq.n	8006dfe <__multiply+0x142>
 8006dbc:	6829      	ldr	r1, [r5, #0]
 8006dbe:	f104 0c14 	add.w	ip, r4, #20
 8006dc2:	46ae      	mov	lr, r5
 8006dc4:	f04f 0a00 	mov.w	sl, #0
 8006dc8:	f8bc b000 	ldrh.w	fp, [ip]
 8006dcc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006dd0:	fb09 220b 	mla	r2, r9, fp, r2
 8006dd4:	4492      	add	sl, r2
 8006dd6:	b289      	uxth	r1, r1
 8006dd8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006ddc:	f84e 1b04 	str.w	r1, [lr], #4
 8006de0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006de4:	f8be 1000 	ldrh.w	r1, [lr]
 8006de8:	0c12      	lsrs	r2, r2, #16
 8006dea:	fb09 1102 	mla	r1, r9, r2, r1
 8006dee:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006df2:	4567      	cmp	r7, ip
 8006df4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006df8:	d8e6      	bhi.n	8006dc8 <__multiply+0x10c>
 8006dfa:	9a01      	ldr	r2, [sp, #4]
 8006dfc:	50a9      	str	r1, [r5, r2]
 8006dfe:	3504      	adds	r5, #4
 8006e00:	e79a      	b.n	8006d38 <__multiply+0x7c>
 8006e02:	3e01      	subs	r6, #1
 8006e04:	e79c      	b.n	8006d40 <__multiply+0x84>
 8006e06:	bf00      	nop
 8006e08:	0800885f 	.word	0x0800885f
 8006e0c:	08008870 	.word	0x08008870

08006e10 <__pow5mult>:
 8006e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e14:	4615      	mov	r5, r2
 8006e16:	f012 0203 	ands.w	r2, r2, #3
 8006e1a:	4606      	mov	r6, r0
 8006e1c:	460f      	mov	r7, r1
 8006e1e:	d007      	beq.n	8006e30 <__pow5mult+0x20>
 8006e20:	4c25      	ldr	r4, [pc, #148]	; (8006eb8 <__pow5mult+0xa8>)
 8006e22:	3a01      	subs	r2, #1
 8006e24:	2300      	movs	r3, #0
 8006e26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006e2a:	f7ff fe9b 	bl	8006b64 <__multadd>
 8006e2e:	4607      	mov	r7, r0
 8006e30:	10ad      	asrs	r5, r5, #2
 8006e32:	d03d      	beq.n	8006eb0 <__pow5mult+0xa0>
 8006e34:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006e36:	b97c      	cbnz	r4, 8006e58 <__pow5mult+0x48>
 8006e38:	2010      	movs	r0, #16
 8006e3a:	f7ff fe1b 	bl	8006a74 <malloc>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	6270      	str	r0, [r6, #36]	; 0x24
 8006e42:	b928      	cbnz	r0, 8006e50 <__pow5mult+0x40>
 8006e44:	4b1d      	ldr	r3, [pc, #116]	; (8006ebc <__pow5mult+0xac>)
 8006e46:	481e      	ldr	r0, [pc, #120]	; (8006ec0 <__pow5mult+0xb0>)
 8006e48:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006e4c:	f000 fc0e 	bl	800766c <__assert_func>
 8006e50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006e54:	6004      	str	r4, [r0, #0]
 8006e56:	60c4      	str	r4, [r0, #12]
 8006e58:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006e5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006e60:	b94c      	cbnz	r4, 8006e76 <__pow5mult+0x66>
 8006e62:	f240 2171 	movw	r1, #625	; 0x271
 8006e66:	4630      	mov	r0, r6
 8006e68:	f7ff ff12 	bl	8006c90 <__i2b>
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006e72:	4604      	mov	r4, r0
 8006e74:	6003      	str	r3, [r0, #0]
 8006e76:	f04f 0900 	mov.w	r9, #0
 8006e7a:	07eb      	lsls	r3, r5, #31
 8006e7c:	d50a      	bpl.n	8006e94 <__pow5mult+0x84>
 8006e7e:	4639      	mov	r1, r7
 8006e80:	4622      	mov	r2, r4
 8006e82:	4630      	mov	r0, r6
 8006e84:	f7ff ff1a 	bl	8006cbc <__multiply>
 8006e88:	4639      	mov	r1, r7
 8006e8a:	4680      	mov	r8, r0
 8006e8c:	4630      	mov	r0, r6
 8006e8e:	f7ff fe47 	bl	8006b20 <_Bfree>
 8006e92:	4647      	mov	r7, r8
 8006e94:	106d      	asrs	r5, r5, #1
 8006e96:	d00b      	beq.n	8006eb0 <__pow5mult+0xa0>
 8006e98:	6820      	ldr	r0, [r4, #0]
 8006e9a:	b938      	cbnz	r0, 8006eac <__pow5mult+0x9c>
 8006e9c:	4622      	mov	r2, r4
 8006e9e:	4621      	mov	r1, r4
 8006ea0:	4630      	mov	r0, r6
 8006ea2:	f7ff ff0b 	bl	8006cbc <__multiply>
 8006ea6:	6020      	str	r0, [r4, #0]
 8006ea8:	f8c0 9000 	str.w	r9, [r0]
 8006eac:	4604      	mov	r4, r0
 8006eae:	e7e4      	b.n	8006e7a <__pow5mult+0x6a>
 8006eb0:	4638      	mov	r0, r7
 8006eb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006eb6:	bf00      	nop
 8006eb8:	080089c0 	.word	0x080089c0
 8006ebc:	080087ed 	.word	0x080087ed
 8006ec0:	08008870 	.word	0x08008870

08006ec4 <__lshift>:
 8006ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ec8:	460c      	mov	r4, r1
 8006eca:	6849      	ldr	r1, [r1, #4]
 8006ecc:	6923      	ldr	r3, [r4, #16]
 8006ece:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006ed2:	68a3      	ldr	r3, [r4, #8]
 8006ed4:	4607      	mov	r7, r0
 8006ed6:	4691      	mov	r9, r2
 8006ed8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006edc:	f108 0601 	add.w	r6, r8, #1
 8006ee0:	42b3      	cmp	r3, r6
 8006ee2:	db0b      	blt.n	8006efc <__lshift+0x38>
 8006ee4:	4638      	mov	r0, r7
 8006ee6:	f7ff fddb 	bl	8006aa0 <_Balloc>
 8006eea:	4605      	mov	r5, r0
 8006eec:	b948      	cbnz	r0, 8006f02 <__lshift+0x3e>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	4b2a      	ldr	r3, [pc, #168]	; (8006f9c <__lshift+0xd8>)
 8006ef2:	482b      	ldr	r0, [pc, #172]	; (8006fa0 <__lshift+0xdc>)
 8006ef4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006ef8:	f000 fbb8 	bl	800766c <__assert_func>
 8006efc:	3101      	adds	r1, #1
 8006efe:	005b      	lsls	r3, r3, #1
 8006f00:	e7ee      	b.n	8006ee0 <__lshift+0x1c>
 8006f02:	2300      	movs	r3, #0
 8006f04:	f100 0114 	add.w	r1, r0, #20
 8006f08:	f100 0210 	add.w	r2, r0, #16
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	4553      	cmp	r3, sl
 8006f10:	db37      	blt.n	8006f82 <__lshift+0xbe>
 8006f12:	6920      	ldr	r0, [r4, #16]
 8006f14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006f18:	f104 0314 	add.w	r3, r4, #20
 8006f1c:	f019 091f 	ands.w	r9, r9, #31
 8006f20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006f24:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006f28:	d02f      	beq.n	8006f8a <__lshift+0xc6>
 8006f2a:	f1c9 0e20 	rsb	lr, r9, #32
 8006f2e:	468a      	mov	sl, r1
 8006f30:	f04f 0c00 	mov.w	ip, #0
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	fa02 f209 	lsl.w	r2, r2, r9
 8006f3a:	ea42 020c 	orr.w	r2, r2, ip
 8006f3e:	f84a 2b04 	str.w	r2, [sl], #4
 8006f42:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f46:	4298      	cmp	r0, r3
 8006f48:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006f4c:	d8f2      	bhi.n	8006f34 <__lshift+0x70>
 8006f4e:	1b03      	subs	r3, r0, r4
 8006f50:	3b15      	subs	r3, #21
 8006f52:	f023 0303 	bic.w	r3, r3, #3
 8006f56:	3304      	adds	r3, #4
 8006f58:	f104 0215 	add.w	r2, r4, #21
 8006f5c:	4290      	cmp	r0, r2
 8006f5e:	bf38      	it	cc
 8006f60:	2304      	movcc	r3, #4
 8006f62:	f841 c003 	str.w	ip, [r1, r3]
 8006f66:	f1bc 0f00 	cmp.w	ip, #0
 8006f6a:	d001      	beq.n	8006f70 <__lshift+0xac>
 8006f6c:	f108 0602 	add.w	r6, r8, #2
 8006f70:	3e01      	subs	r6, #1
 8006f72:	4638      	mov	r0, r7
 8006f74:	612e      	str	r6, [r5, #16]
 8006f76:	4621      	mov	r1, r4
 8006f78:	f7ff fdd2 	bl	8006b20 <_Bfree>
 8006f7c:	4628      	mov	r0, r5
 8006f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f82:	f842 0f04 	str.w	r0, [r2, #4]!
 8006f86:	3301      	adds	r3, #1
 8006f88:	e7c1      	b.n	8006f0e <__lshift+0x4a>
 8006f8a:	3904      	subs	r1, #4
 8006f8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f90:	f841 2f04 	str.w	r2, [r1, #4]!
 8006f94:	4298      	cmp	r0, r3
 8006f96:	d8f9      	bhi.n	8006f8c <__lshift+0xc8>
 8006f98:	e7ea      	b.n	8006f70 <__lshift+0xac>
 8006f9a:	bf00      	nop
 8006f9c:	0800885f 	.word	0x0800885f
 8006fa0:	08008870 	.word	0x08008870

08006fa4 <__mcmp>:
 8006fa4:	b530      	push	{r4, r5, lr}
 8006fa6:	6902      	ldr	r2, [r0, #16]
 8006fa8:	690c      	ldr	r4, [r1, #16]
 8006faa:	1b12      	subs	r2, r2, r4
 8006fac:	d10e      	bne.n	8006fcc <__mcmp+0x28>
 8006fae:	f100 0314 	add.w	r3, r0, #20
 8006fb2:	3114      	adds	r1, #20
 8006fb4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006fb8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006fbc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006fc0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006fc4:	42a5      	cmp	r5, r4
 8006fc6:	d003      	beq.n	8006fd0 <__mcmp+0x2c>
 8006fc8:	d305      	bcc.n	8006fd6 <__mcmp+0x32>
 8006fca:	2201      	movs	r2, #1
 8006fcc:	4610      	mov	r0, r2
 8006fce:	bd30      	pop	{r4, r5, pc}
 8006fd0:	4283      	cmp	r3, r0
 8006fd2:	d3f3      	bcc.n	8006fbc <__mcmp+0x18>
 8006fd4:	e7fa      	b.n	8006fcc <__mcmp+0x28>
 8006fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8006fda:	e7f7      	b.n	8006fcc <__mcmp+0x28>

08006fdc <__mdiff>:
 8006fdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fe0:	460c      	mov	r4, r1
 8006fe2:	4606      	mov	r6, r0
 8006fe4:	4611      	mov	r1, r2
 8006fe6:	4620      	mov	r0, r4
 8006fe8:	4690      	mov	r8, r2
 8006fea:	f7ff ffdb 	bl	8006fa4 <__mcmp>
 8006fee:	1e05      	subs	r5, r0, #0
 8006ff0:	d110      	bne.n	8007014 <__mdiff+0x38>
 8006ff2:	4629      	mov	r1, r5
 8006ff4:	4630      	mov	r0, r6
 8006ff6:	f7ff fd53 	bl	8006aa0 <_Balloc>
 8006ffa:	b930      	cbnz	r0, 800700a <__mdiff+0x2e>
 8006ffc:	4b3a      	ldr	r3, [pc, #232]	; (80070e8 <__mdiff+0x10c>)
 8006ffe:	4602      	mov	r2, r0
 8007000:	f240 2132 	movw	r1, #562	; 0x232
 8007004:	4839      	ldr	r0, [pc, #228]	; (80070ec <__mdiff+0x110>)
 8007006:	f000 fb31 	bl	800766c <__assert_func>
 800700a:	2301      	movs	r3, #1
 800700c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007010:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007014:	bfa4      	itt	ge
 8007016:	4643      	movge	r3, r8
 8007018:	46a0      	movge	r8, r4
 800701a:	4630      	mov	r0, r6
 800701c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007020:	bfa6      	itte	ge
 8007022:	461c      	movge	r4, r3
 8007024:	2500      	movge	r5, #0
 8007026:	2501      	movlt	r5, #1
 8007028:	f7ff fd3a 	bl	8006aa0 <_Balloc>
 800702c:	b920      	cbnz	r0, 8007038 <__mdiff+0x5c>
 800702e:	4b2e      	ldr	r3, [pc, #184]	; (80070e8 <__mdiff+0x10c>)
 8007030:	4602      	mov	r2, r0
 8007032:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007036:	e7e5      	b.n	8007004 <__mdiff+0x28>
 8007038:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800703c:	6926      	ldr	r6, [r4, #16]
 800703e:	60c5      	str	r5, [r0, #12]
 8007040:	f104 0914 	add.w	r9, r4, #20
 8007044:	f108 0514 	add.w	r5, r8, #20
 8007048:	f100 0e14 	add.w	lr, r0, #20
 800704c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007050:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007054:	f108 0210 	add.w	r2, r8, #16
 8007058:	46f2      	mov	sl, lr
 800705a:	2100      	movs	r1, #0
 800705c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007060:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007064:	fa1f f883 	uxth.w	r8, r3
 8007068:	fa11 f18b 	uxtah	r1, r1, fp
 800706c:	0c1b      	lsrs	r3, r3, #16
 800706e:	eba1 0808 	sub.w	r8, r1, r8
 8007072:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007076:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800707a:	fa1f f888 	uxth.w	r8, r8
 800707e:	1419      	asrs	r1, r3, #16
 8007080:	454e      	cmp	r6, r9
 8007082:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007086:	f84a 3b04 	str.w	r3, [sl], #4
 800708a:	d8e7      	bhi.n	800705c <__mdiff+0x80>
 800708c:	1b33      	subs	r3, r6, r4
 800708e:	3b15      	subs	r3, #21
 8007090:	f023 0303 	bic.w	r3, r3, #3
 8007094:	3304      	adds	r3, #4
 8007096:	3415      	adds	r4, #21
 8007098:	42a6      	cmp	r6, r4
 800709a:	bf38      	it	cc
 800709c:	2304      	movcc	r3, #4
 800709e:	441d      	add	r5, r3
 80070a0:	4473      	add	r3, lr
 80070a2:	469e      	mov	lr, r3
 80070a4:	462e      	mov	r6, r5
 80070a6:	4566      	cmp	r6, ip
 80070a8:	d30e      	bcc.n	80070c8 <__mdiff+0xec>
 80070aa:	f10c 0203 	add.w	r2, ip, #3
 80070ae:	1b52      	subs	r2, r2, r5
 80070b0:	f022 0203 	bic.w	r2, r2, #3
 80070b4:	3d03      	subs	r5, #3
 80070b6:	45ac      	cmp	ip, r5
 80070b8:	bf38      	it	cc
 80070ba:	2200      	movcc	r2, #0
 80070bc:	441a      	add	r2, r3
 80070be:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80070c2:	b17b      	cbz	r3, 80070e4 <__mdiff+0x108>
 80070c4:	6107      	str	r7, [r0, #16]
 80070c6:	e7a3      	b.n	8007010 <__mdiff+0x34>
 80070c8:	f856 8b04 	ldr.w	r8, [r6], #4
 80070cc:	fa11 f288 	uxtah	r2, r1, r8
 80070d0:	1414      	asrs	r4, r2, #16
 80070d2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80070d6:	b292      	uxth	r2, r2
 80070d8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80070dc:	f84e 2b04 	str.w	r2, [lr], #4
 80070e0:	1421      	asrs	r1, r4, #16
 80070e2:	e7e0      	b.n	80070a6 <__mdiff+0xca>
 80070e4:	3f01      	subs	r7, #1
 80070e6:	e7ea      	b.n	80070be <__mdiff+0xe2>
 80070e8:	0800885f 	.word	0x0800885f
 80070ec:	08008870 	.word	0x08008870

080070f0 <__d2b>:
 80070f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80070f4:	4689      	mov	r9, r1
 80070f6:	2101      	movs	r1, #1
 80070f8:	ec57 6b10 	vmov	r6, r7, d0
 80070fc:	4690      	mov	r8, r2
 80070fe:	f7ff fccf 	bl	8006aa0 <_Balloc>
 8007102:	4604      	mov	r4, r0
 8007104:	b930      	cbnz	r0, 8007114 <__d2b+0x24>
 8007106:	4602      	mov	r2, r0
 8007108:	4b25      	ldr	r3, [pc, #148]	; (80071a0 <__d2b+0xb0>)
 800710a:	4826      	ldr	r0, [pc, #152]	; (80071a4 <__d2b+0xb4>)
 800710c:	f240 310a 	movw	r1, #778	; 0x30a
 8007110:	f000 faac 	bl	800766c <__assert_func>
 8007114:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007118:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800711c:	bb35      	cbnz	r5, 800716c <__d2b+0x7c>
 800711e:	2e00      	cmp	r6, #0
 8007120:	9301      	str	r3, [sp, #4]
 8007122:	d028      	beq.n	8007176 <__d2b+0x86>
 8007124:	4668      	mov	r0, sp
 8007126:	9600      	str	r6, [sp, #0]
 8007128:	f7ff fd82 	bl	8006c30 <__lo0bits>
 800712c:	9900      	ldr	r1, [sp, #0]
 800712e:	b300      	cbz	r0, 8007172 <__d2b+0x82>
 8007130:	9a01      	ldr	r2, [sp, #4]
 8007132:	f1c0 0320 	rsb	r3, r0, #32
 8007136:	fa02 f303 	lsl.w	r3, r2, r3
 800713a:	430b      	orrs	r3, r1
 800713c:	40c2      	lsrs	r2, r0
 800713e:	6163      	str	r3, [r4, #20]
 8007140:	9201      	str	r2, [sp, #4]
 8007142:	9b01      	ldr	r3, [sp, #4]
 8007144:	61a3      	str	r3, [r4, #24]
 8007146:	2b00      	cmp	r3, #0
 8007148:	bf14      	ite	ne
 800714a:	2202      	movne	r2, #2
 800714c:	2201      	moveq	r2, #1
 800714e:	6122      	str	r2, [r4, #16]
 8007150:	b1d5      	cbz	r5, 8007188 <__d2b+0x98>
 8007152:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007156:	4405      	add	r5, r0
 8007158:	f8c9 5000 	str.w	r5, [r9]
 800715c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007160:	f8c8 0000 	str.w	r0, [r8]
 8007164:	4620      	mov	r0, r4
 8007166:	b003      	add	sp, #12
 8007168:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800716c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007170:	e7d5      	b.n	800711e <__d2b+0x2e>
 8007172:	6161      	str	r1, [r4, #20]
 8007174:	e7e5      	b.n	8007142 <__d2b+0x52>
 8007176:	a801      	add	r0, sp, #4
 8007178:	f7ff fd5a 	bl	8006c30 <__lo0bits>
 800717c:	9b01      	ldr	r3, [sp, #4]
 800717e:	6163      	str	r3, [r4, #20]
 8007180:	2201      	movs	r2, #1
 8007182:	6122      	str	r2, [r4, #16]
 8007184:	3020      	adds	r0, #32
 8007186:	e7e3      	b.n	8007150 <__d2b+0x60>
 8007188:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800718c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007190:	f8c9 0000 	str.w	r0, [r9]
 8007194:	6918      	ldr	r0, [r3, #16]
 8007196:	f7ff fd2b 	bl	8006bf0 <__hi0bits>
 800719a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800719e:	e7df      	b.n	8007160 <__d2b+0x70>
 80071a0:	0800885f 	.word	0x0800885f
 80071a4:	08008870 	.word	0x08008870

080071a8 <_calloc_r>:
 80071a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071aa:	fba1 2402 	umull	r2, r4, r1, r2
 80071ae:	b94c      	cbnz	r4, 80071c4 <_calloc_r+0x1c>
 80071b0:	4611      	mov	r1, r2
 80071b2:	9201      	str	r2, [sp, #4]
 80071b4:	f000 f87a 	bl	80072ac <_malloc_r>
 80071b8:	9a01      	ldr	r2, [sp, #4]
 80071ba:	4605      	mov	r5, r0
 80071bc:	b930      	cbnz	r0, 80071cc <_calloc_r+0x24>
 80071be:	4628      	mov	r0, r5
 80071c0:	b003      	add	sp, #12
 80071c2:	bd30      	pop	{r4, r5, pc}
 80071c4:	220c      	movs	r2, #12
 80071c6:	6002      	str	r2, [r0, #0]
 80071c8:	2500      	movs	r5, #0
 80071ca:	e7f8      	b.n	80071be <_calloc_r+0x16>
 80071cc:	4621      	mov	r1, r4
 80071ce:	f7fe f939 	bl	8005444 <memset>
 80071d2:	e7f4      	b.n	80071be <_calloc_r+0x16>

080071d4 <_free_r>:
 80071d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071d6:	2900      	cmp	r1, #0
 80071d8:	d044      	beq.n	8007264 <_free_r+0x90>
 80071da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071de:	9001      	str	r0, [sp, #4]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	f1a1 0404 	sub.w	r4, r1, #4
 80071e6:	bfb8      	it	lt
 80071e8:	18e4      	addlt	r4, r4, r3
 80071ea:	f000 fa9b 	bl	8007724 <__malloc_lock>
 80071ee:	4a1e      	ldr	r2, [pc, #120]	; (8007268 <_free_r+0x94>)
 80071f0:	9801      	ldr	r0, [sp, #4]
 80071f2:	6813      	ldr	r3, [r2, #0]
 80071f4:	b933      	cbnz	r3, 8007204 <_free_r+0x30>
 80071f6:	6063      	str	r3, [r4, #4]
 80071f8:	6014      	str	r4, [r2, #0]
 80071fa:	b003      	add	sp, #12
 80071fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007200:	f000 ba96 	b.w	8007730 <__malloc_unlock>
 8007204:	42a3      	cmp	r3, r4
 8007206:	d908      	bls.n	800721a <_free_r+0x46>
 8007208:	6825      	ldr	r5, [r4, #0]
 800720a:	1961      	adds	r1, r4, r5
 800720c:	428b      	cmp	r3, r1
 800720e:	bf01      	itttt	eq
 8007210:	6819      	ldreq	r1, [r3, #0]
 8007212:	685b      	ldreq	r3, [r3, #4]
 8007214:	1949      	addeq	r1, r1, r5
 8007216:	6021      	streq	r1, [r4, #0]
 8007218:	e7ed      	b.n	80071f6 <_free_r+0x22>
 800721a:	461a      	mov	r2, r3
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	b10b      	cbz	r3, 8007224 <_free_r+0x50>
 8007220:	42a3      	cmp	r3, r4
 8007222:	d9fa      	bls.n	800721a <_free_r+0x46>
 8007224:	6811      	ldr	r1, [r2, #0]
 8007226:	1855      	adds	r5, r2, r1
 8007228:	42a5      	cmp	r5, r4
 800722a:	d10b      	bne.n	8007244 <_free_r+0x70>
 800722c:	6824      	ldr	r4, [r4, #0]
 800722e:	4421      	add	r1, r4
 8007230:	1854      	adds	r4, r2, r1
 8007232:	42a3      	cmp	r3, r4
 8007234:	6011      	str	r1, [r2, #0]
 8007236:	d1e0      	bne.n	80071fa <_free_r+0x26>
 8007238:	681c      	ldr	r4, [r3, #0]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	6053      	str	r3, [r2, #4]
 800723e:	4421      	add	r1, r4
 8007240:	6011      	str	r1, [r2, #0]
 8007242:	e7da      	b.n	80071fa <_free_r+0x26>
 8007244:	d902      	bls.n	800724c <_free_r+0x78>
 8007246:	230c      	movs	r3, #12
 8007248:	6003      	str	r3, [r0, #0]
 800724a:	e7d6      	b.n	80071fa <_free_r+0x26>
 800724c:	6825      	ldr	r5, [r4, #0]
 800724e:	1961      	adds	r1, r4, r5
 8007250:	428b      	cmp	r3, r1
 8007252:	bf04      	itt	eq
 8007254:	6819      	ldreq	r1, [r3, #0]
 8007256:	685b      	ldreq	r3, [r3, #4]
 8007258:	6063      	str	r3, [r4, #4]
 800725a:	bf04      	itt	eq
 800725c:	1949      	addeq	r1, r1, r5
 800725e:	6021      	streq	r1, [r4, #0]
 8007260:	6054      	str	r4, [r2, #4]
 8007262:	e7ca      	b.n	80071fa <_free_r+0x26>
 8007264:	b003      	add	sp, #12
 8007266:	bd30      	pop	{r4, r5, pc}
 8007268:	20000348 	.word	0x20000348

0800726c <sbrk_aligned>:
 800726c:	b570      	push	{r4, r5, r6, lr}
 800726e:	4e0e      	ldr	r6, [pc, #56]	; (80072a8 <sbrk_aligned+0x3c>)
 8007270:	460c      	mov	r4, r1
 8007272:	6831      	ldr	r1, [r6, #0]
 8007274:	4605      	mov	r5, r0
 8007276:	b911      	cbnz	r1, 800727e <sbrk_aligned+0x12>
 8007278:	f000 f9e8 	bl	800764c <_sbrk_r>
 800727c:	6030      	str	r0, [r6, #0]
 800727e:	4621      	mov	r1, r4
 8007280:	4628      	mov	r0, r5
 8007282:	f000 f9e3 	bl	800764c <_sbrk_r>
 8007286:	1c43      	adds	r3, r0, #1
 8007288:	d00a      	beq.n	80072a0 <sbrk_aligned+0x34>
 800728a:	1cc4      	adds	r4, r0, #3
 800728c:	f024 0403 	bic.w	r4, r4, #3
 8007290:	42a0      	cmp	r0, r4
 8007292:	d007      	beq.n	80072a4 <sbrk_aligned+0x38>
 8007294:	1a21      	subs	r1, r4, r0
 8007296:	4628      	mov	r0, r5
 8007298:	f000 f9d8 	bl	800764c <_sbrk_r>
 800729c:	3001      	adds	r0, #1
 800729e:	d101      	bne.n	80072a4 <sbrk_aligned+0x38>
 80072a0:	f04f 34ff 	mov.w	r4, #4294967295
 80072a4:	4620      	mov	r0, r4
 80072a6:	bd70      	pop	{r4, r5, r6, pc}
 80072a8:	2000034c 	.word	0x2000034c

080072ac <_malloc_r>:
 80072ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072b0:	1ccd      	adds	r5, r1, #3
 80072b2:	f025 0503 	bic.w	r5, r5, #3
 80072b6:	3508      	adds	r5, #8
 80072b8:	2d0c      	cmp	r5, #12
 80072ba:	bf38      	it	cc
 80072bc:	250c      	movcc	r5, #12
 80072be:	2d00      	cmp	r5, #0
 80072c0:	4607      	mov	r7, r0
 80072c2:	db01      	blt.n	80072c8 <_malloc_r+0x1c>
 80072c4:	42a9      	cmp	r1, r5
 80072c6:	d905      	bls.n	80072d4 <_malloc_r+0x28>
 80072c8:	230c      	movs	r3, #12
 80072ca:	603b      	str	r3, [r7, #0]
 80072cc:	2600      	movs	r6, #0
 80072ce:	4630      	mov	r0, r6
 80072d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072d4:	4e2e      	ldr	r6, [pc, #184]	; (8007390 <_malloc_r+0xe4>)
 80072d6:	f000 fa25 	bl	8007724 <__malloc_lock>
 80072da:	6833      	ldr	r3, [r6, #0]
 80072dc:	461c      	mov	r4, r3
 80072de:	bb34      	cbnz	r4, 800732e <_malloc_r+0x82>
 80072e0:	4629      	mov	r1, r5
 80072e2:	4638      	mov	r0, r7
 80072e4:	f7ff ffc2 	bl	800726c <sbrk_aligned>
 80072e8:	1c43      	adds	r3, r0, #1
 80072ea:	4604      	mov	r4, r0
 80072ec:	d14d      	bne.n	800738a <_malloc_r+0xde>
 80072ee:	6834      	ldr	r4, [r6, #0]
 80072f0:	4626      	mov	r6, r4
 80072f2:	2e00      	cmp	r6, #0
 80072f4:	d140      	bne.n	8007378 <_malloc_r+0xcc>
 80072f6:	6823      	ldr	r3, [r4, #0]
 80072f8:	4631      	mov	r1, r6
 80072fa:	4638      	mov	r0, r7
 80072fc:	eb04 0803 	add.w	r8, r4, r3
 8007300:	f000 f9a4 	bl	800764c <_sbrk_r>
 8007304:	4580      	cmp	r8, r0
 8007306:	d13a      	bne.n	800737e <_malloc_r+0xd2>
 8007308:	6821      	ldr	r1, [r4, #0]
 800730a:	3503      	adds	r5, #3
 800730c:	1a6d      	subs	r5, r5, r1
 800730e:	f025 0503 	bic.w	r5, r5, #3
 8007312:	3508      	adds	r5, #8
 8007314:	2d0c      	cmp	r5, #12
 8007316:	bf38      	it	cc
 8007318:	250c      	movcc	r5, #12
 800731a:	4629      	mov	r1, r5
 800731c:	4638      	mov	r0, r7
 800731e:	f7ff ffa5 	bl	800726c <sbrk_aligned>
 8007322:	3001      	adds	r0, #1
 8007324:	d02b      	beq.n	800737e <_malloc_r+0xd2>
 8007326:	6823      	ldr	r3, [r4, #0]
 8007328:	442b      	add	r3, r5
 800732a:	6023      	str	r3, [r4, #0]
 800732c:	e00e      	b.n	800734c <_malloc_r+0xa0>
 800732e:	6822      	ldr	r2, [r4, #0]
 8007330:	1b52      	subs	r2, r2, r5
 8007332:	d41e      	bmi.n	8007372 <_malloc_r+0xc6>
 8007334:	2a0b      	cmp	r2, #11
 8007336:	d916      	bls.n	8007366 <_malloc_r+0xba>
 8007338:	1961      	adds	r1, r4, r5
 800733a:	42a3      	cmp	r3, r4
 800733c:	6025      	str	r5, [r4, #0]
 800733e:	bf18      	it	ne
 8007340:	6059      	strne	r1, [r3, #4]
 8007342:	6863      	ldr	r3, [r4, #4]
 8007344:	bf08      	it	eq
 8007346:	6031      	streq	r1, [r6, #0]
 8007348:	5162      	str	r2, [r4, r5]
 800734a:	604b      	str	r3, [r1, #4]
 800734c:	4638      	mov	r0, r7
 800734e:	f104 060b 	add.w	r6, r4, #11
 8007352:	f000 f9ed 	bl	8007730 <__malloc_unlock>
 8007356:	f026 0607 	bic.w	r6, r6, #7
 800735a:	1d23      	adds	r3, r4, #4
 800735c:	1af2      	subs	r2, r6, r3
 800735e:	d0b6      	beq.n	80072ce <_malloc_r+0x22>
 8007360:	1b9b      	subs	r3, r3, r6
 8007362:	50a3      	str	r3, [r4, r2]
 8007364:	e7b3      	b.n	80072ce <_malloc_r+0x22>
 8007366:	6862      	ldr	r2, [r4, #4]
 8007368:	42a3      	cmp	r3, r4
 800736a:	bf0c      	ite	eq
 800736c:	6032      	streq	r2, [r6, #0]
 800736e:	605a      	strne	r2, [r3, #4]
 8007370:	e7ec      	b.n	800734c <_malloc_r+0xa0>
 8007372:	4623      	mov	r3, r4
 8007374:	6864      	ldr	r4, [r4, #4]
 8007376:	e7b2      	b.n	80072de <_malloc_r+0x32>
 8007378:	4634      	mov	r4, r6
 800737a:	6876      	ldr	r6, [r6, #4]
 800737c:	e7b9      	b.n	80072f2 <_malloc_r+0x46>
 800737e:	230c      	movs	r3, #12
 8007380:	603b      	str	r3, [r7, #0]
 8007382:	4638      	mov	r0, r7
 8007384:	f000 f9d4 	bl	8007730 <__malloc_unlock>
 8007388:	e7a1      	b.n	80072ce <_malloc_r+0x22>
 800738a:	6025      	str	r5, [r4, #0]
 800738c:	e7de      	b.n	800734c <_malloc_r+0xa0>
 800738e:	bf00      	nop
 8007390:	20000348 	.word	0x20000348

08007394 <__ssputs_r>:
 8007394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007398:	688e      	ldr	r6, [r1, #8]
 800739a:	429e      	cmp	r6, r3
 800739c:	4682      	mov	sl, r0
 800739e:	460c      	mov	r4, r1
 80073a0:	4690      	mov	r8, r2
 80073a2:	461f      	mov	r7, r3
 80073a4:	d838      	bhi.n	8007418 <__ssputs_r+0x84>
 80073a6:	898a      	ldrh	r2, [r1, #12]
 80073a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80073ac:	d032      	beq.n	8007414 <__ssputs_r+0x80>
 80073ae:	6825      	ldr	r5, [r4, #0]
 80073b0:	6909      	ldr	r1, [r1, #16]
 80073b2:	eba5 0901 	sub.w	r9, r5, r1
 80073b6:	6965      	ldr	r5, [r4, #20]
 80073b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80073bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80073c0:	3301      	adds	r3, #1
 80073c2:	444b      	add	r3, r9
 80073c4:	106d      	asrs	r5, r5, #1
 80073c6:	429d      	cmp	r5, r3
 80073c8:	bf38      	it	cc
 80073ca:	461d      	movcc	r5, r3
 80073cc:	0553      	lsls	r3, r2, #21
 80073ce:	d531      	bpl.n	8007434 <__ssputs_r+0xa0>
 80073d0:	4629      	mov	r1, r5
 80073d2:	f7ff ff6b 	bl	80072ac <_malloc_r>
 80073d6:	4606      	mov	r6, r0
 80073d8:	b950      	cbnz	r0, 80073f0 <__ssputs_r+0x5c>
 80073da:	230c      	movs	r3, #12
 80073dc:	f8ca 3000 	str.w	r3, [sl]
 80073e0:	89a3      	ldrh	r3, [r4, #12]
 80073e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073e6:	81a3      	strh	r3, [r4, #12]
 80073e8:	f04f 30ff 	mov.w	r0, #4294967295
 80073ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073f0:	6921      	ldr	r1, [r4, #16]
 80073f2:	464a      	mov	r2, r9
 80073f4:	f7ff fb46 	bl	8006a84 <memcpy>
 80073f8:	89a3      	ldrh	r3, [r4, #12]
 80073fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80073fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007402:	81a3      	strh	r3, [r4, #12]
 8007404:	6126      	str	r6, [r4, #16]
 8007406:	6165      	str	r5, [r4, #20]
 8007408:	444e      	add	r6, r9
 800740a:	eba5 0509 	sub.w	r5, r5, r9
 800740e:	6026      	str	r6, [r4, #0]
 8007410:	60a5      	str	r5, [r4, #8]
 8007412:	463e      	mov	r6, r7
 8007414:	42be      	cmp	r6, r7
 8007416:	d900      	bls.n	800741a <__ssputs_r+0x86>
 8007418:	463e      	mov	r6, r7
 800741a:	6820      	ldr	r0, [r4, #0]
 800741c:	4632      	mov	r2, r6
 800741e:	4641      	mov	r1, r8
 8007420:	f000 f966 	bl	80076f0 <memmove>
 8007424:	68a3      	ldr	r3, [r4, #8]
 8007426:	1b9b      	subs	r3, r3, r6
 8007428:	60a3      	str	r3, [r4, #8]
 800742a:	6823      	ldr	r3, [r4, #0]
 800742c:	4433      	add	r3, r6
 800742e:	6023      	str	r3, [r4, #0]
 8007430:	2000      	movs	r0, #0
 8007432:	e7db      	b.n	80073ec <__ssputs_r+0x58>
 8007434:	462a      	mov	r2, r5
 8007436:	f000 f981 	bl	800773c <_realloc_r>
 800743a:	4606      	mov	r6, r0
 800743c:	2800      	cmp	r0, #0
 800743e:	d1e1      	bne.n	8007404 <__ssputs_r+0x70>
 8007440:	6921      	ldr	r1, [r4, #16]
 8007442:	4650      	mov	r0, sl
 8007444:	f7ff fec6 	bl	80071d4 <_free_r>
 8007448:	e7c7      	b.n	80073da <__ssputs_r+0x46>
	...

0800744c <_svfiprintf_r>:
 800744c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007450:	4698      	mov	r8, r3
 8007452:	898b      	ldrh	r3, [r1, #12]
 8007454:	061b      	lsls	r3, r3, #24
 8007456:	b09d      	sub	sp, #116	; 0x74
 8007458:	4607      	mov	r7, r0
 800745a:	460d      	mov	r5, r1
 800745c:	4614      	mov	r4, r2
 800745e:	d50e      	bpl.n	800747e <_svfiprintf_r+0x32>
 8007460:	690b      	ldr	r3, [r1, #16]
 8007462:	b963      	cbnz	r3, 800747e <_svfiprintf_r+0x32>
 8007464:	2140      	movs	r1, #64	; 0x40
 8007466:	f7ff ff21 	bl	80072ac <_malloc_r>
 800746a:	6028      	str	r0, [r5, #0]
 800746c:	6128      	str	r0, [r5, #16]
 800746e:	b920      	cbnz	r0, 800747a <_svfiprintf_r+0x2e>
 8007470:	230c      	movs	r3, #12
 8007472:	603b      	str	r3, [r7, #0]
 8007474:	f04f 30ff 	mov.w	r0, #4294967295
 8007478:	e0d1      	b.n	800761e <_svfiprintf_r+0x1d2>
 800747a:	2340      	movs	r3, #64	; 0x40
 800747c:	616b      	str	r3, [r5, #20]
 800747e:	2300      	movs	r3, #0
 8007480:	9309      	str	r3, [sp, #36]	; 0x24
 8007482:	2320      	movs	r3, #32
 8007484:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007488:	f8cd 800c 	str.w	r8, [sp, #12]
 800748c:	2330      	movs	r3, #48	; 0x30
 800748e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007638 <_svfiprintf_r+0x1ec>
 8007492:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007496:	f04f 0901 	mov.w	r9, #1
 800749a:	4623      	mov	r3, r4
 800749c:	469a      	mov	sl, r3
 800749e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074a2:	b10a      	cbz	r2, 80074a8 <_svfiprintf_r+0x5c>
 80074a4:	2a25      	cmp	r2, #37	; 0x25
 80074a6:	d1f9      	bne.n	800749c <_svfiprintf_r+0x50>
 80074a8:	ebba 0b04 	subs.w	fp, sl, r4
 80074ac:	d00b      	beq.n	80074c6 <_svfiprintf_r+0x7a>
 80074ae:	465b      	mov	r3, fp
 80074b0:	4622      	mov	r2, r4
 80074b2:	4629      	mov	r1, r5
 80074b4:	4638      	mov	r0, r7
 80074b6:	f7ff ff6d 	bl	8007394 <__ssputs_r>
 80074ba:	3001      	adds	r0, #1
 80074bc:	f000 80aa 	beq.w	8007614 <_svfiprintf_r+0x1c8>
 80074c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074c2:	445a      	add	r2, fp
 80074c4:	9209      	str	r2, [sp, #36]	; 0x24
 80074c6:	f89a 3000 	ldrb.w	r3, [sl]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	f000 80a2 	beq.w	8007614 <_svfiprintf_r+0x1c8>
 80074d0:	2300      	movs	r3, #0
 80074d2:	f04f 32ff 	mov.w	r2, #4294967295
 80074d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074da:	f10a 0a01 	add.w	sl, sl, #1
 80074de:	9304      	str	r3, [sp, #16]
 80074e0:	9307      	str	r3, [sp, #28]
 80074e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80074e6:	931a      	str	r3, [sp, #104]	; 0x68
 80074e8:	4654      	mov	r4, sl
 80074ea:	2205      	movs	r2, #5
 80074ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074f0:	4851      	ldr	r0, [pc, #324]	; (8007638 <_svfiprintf_r+0x1ec>)
 80074f2:	f7f8 fe75 	bl	80001e0 <memchr>
 80074f6:	9a04      	ldr	r2, [sp, #16]
 80074f8:	b9d8      	cbnz	r0, 8007532 <_svfiprintf_r+0xe6>
 80074fa:	06d0      	lsls	r0, r2, #27
 80074fc:	bf44      	itt	mi
 80074fe:	2320      	movmi	r3, #32
 8007500:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007504:	0711      	lsls	r1, r2, #28
 8007506:	bf44      	itt	mi
 8007508:	232b      	movmi	r3, #43	; 0x2b
 800750a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800750e:	f89a 3000 	ldrb.w	r3, [sl]
 8007512:	2b2a      	cmp	r3, #42	; 0x2a
 8007514:	d015      	beq.n	8007542 <_svfiprintf_r+0xf6>
 8007516:	9a07      	ldr	r2, [sp, #28]
 8007518:	4654      	mov	r4, sl
 800751a:	2000      	movs	r0, #0
 800751c:	f04f 0c0a 	mov.w	ip, #10
 8007520:	4621      	mov	r1, r4
 8007522:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007526:	3b30      	subs	r3, #48	; 0x30
 8007528:	2b09      	cmp	r3, #9
 800752a:	d94e      	bls.n	80075ca <_svfiprintf_r+0x17e>
 800752c:	b1b0      	cbz	r0, 800755c <_svfiprintf_r+0x110>
 800752e:	9207      	str	r2, [sp, #28]
 8007530:	e014      	b.n	800755c <_svfiprintf_r+0x110>
 8007532:	eba0 0308 	sub.w	r3, r0, r8
 8007536:	fa09 f303 	lsl.w	r3, r9, r3
 800753a:	4313      	orrs	r3, r2
 800753c:	9304      	str	r3, [sp, #16]
 800753e:	46a2      	mov	sl, r4
 8007540:	e7d2      	b.n	80074e8 <_svfiprintf_r+0x9c>
 8007542:	9b03      	ldr	r3, [sp, #12]
 8007544:	1d19      	adds	r1, r3, #4
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	9103      	str	r1, [sp, #12]
 800754a:	2b00      	cmp	r3, #0
 800754c:	bfbb      	ittet	lt
 800754e:	425b      	neglt	r3, r3
 8007550:	f042 0202 	orrlt.w	r2, r2, #2
 8007554:	9307      	strge	r3, [sp, #28]
 8007556:	9307      	strlt	r3, [sp, #28]
 8007558:	bfb8      	it	lt
 800755a:	9204      	strlt	r2, [sp, #16]
 800755c:	7823      	ldrb	r3, [r4, #0]
 800755e:	2b2e      	cmp	r3, #46	; 0x2e
 8007560:	d10c      	bne.n	800757c <_svfiprintf_r+0x130>
 8007562:	7863      	ldrb	r3, [r4, #1]
 8007564:	2b2a      	cmp	r3, #42	; 0x2a
 8007566:	d135      	bne.n	80075d4 <_svfiprintf_r+0x188>
 8007568:	9b03      	ldr	r3, [sp, #12]
 800756a:	1d1a      	adds	r2, r3, #4
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	9203      	str	r2, [sp, #12]
 8007570:	2b00      	cmp	r3, #0
 8007572:	bfb8      	it	lt
 8007574:	f04f 33ff 	movlt.w	r3, #4294967295
 8007578:	3402      	adds	r4, #2
 800757a:	9305      	str	r3, [sp, #20]
 800757c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007648 <_svfiprintf_r+0x1fc>
 8007580:	7821      	ldrb	r1, [r4, #0]
 8007582:	2203      	movs	r2, #3
 8007584:	4650      	mov	r0, sl
 8007586:	f7f8 fe2b 	bl	80001e0 <memchr>
 800758a:	b140      	cbz	r0, 800759e <_svfiprintf_r+0x152>
 800758c:	2340      	movs	r3, #64	; 0x40
 800758e:	eba0 000a 	sub.w	r0, r0, sl
 8007592:	fa03 f000 	lsl.w	r0, r3, r0
 8007596:	9b04      	ldr	r3, [sp, #16]
 8007598:	4303      	orrs	r3, r0
 800759a:	3401      	adds	r4, #1
 800759c:	9304      	str	r3, [sp, #16]
 800759e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075a2:	4826      	ldr	r0, [pc, #152]	; (800763c <_svfiprintf_r+0x1f0>)
 80075a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80075a8:	2206      	movs	r2, #6
 80075aa:	f7f8 fe19 	bl	80001e0 <memchr>
 80075ae:	2800      	cmp	r0, #0
 80075b0:	d038      	beq.n	8007624 <_svfiprintf_r+0x1d8>
 80075b2:	4b23      	ldr	r3, [pc, #140]	; (8007640 <_svfiprintf_r+0x1f4>)
 80075b4:	bb1b      	cbnz	r3, 80075fe <_svfiprintf_r+0x1b2>
 80075b6:	9b03      	ldr	r3, [sp, #12]
 80075b8:	3307      	adds	r3, #7
 80075ba:	f023 0307 	bic.w	r3, r3, #7
 80075be:	3308      	adds	r3, #8
 80075c0:	9303      	str	r3, [sp, #12]
 80075c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075c4:	4433      	add	r3, r6
 80075c6:	9309      	str	r3, [sp, #36]	; 0x24
 80075c8:	e767      	b.n	800749a <_svfiprintf_r+0x4e>
 80075ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80075ce:	460c      	mov	r4, r1
 80075d0:	2001      	movs	r0, #1
 80075d2:	e7a5      	b.n	8007520 <_svfiprintf_r+0xd4>
 80075d4:	2300      	movs	r3, #0
 80075d6:	3401      	adds	r4, #1
 80075d8:	9305      	str	r3, [sp, #20]
 80075da:	4619      	mov	r1, r3
 80075dc:	f04f 0c0a 	mov.w	ip, #10
 80075e0:	4620      	mov	r0, r4
 80075e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075e6:	3a30      	subs	r2, #48	; 0x30
 80075e8:	2a09      	cmp	r2, #9
 80075ea:	d903      	bls.n	80075f4 <_svfiprintf_r+0x1a8>
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d0c5      	beq.n	800757c <_svfiprintf_r+0x130>
 80075f0:	9105      	str	r1, [sp, #20]
 80075f2:	e7c3      	b.n	800757c <_svfiprintf_r+0x130>
 80075f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80075f8:	4604      	mov	r4, r0
 80075fa:	2301      	movs	r3, #1
 80075fc:	e7f0      	b.n	80075e0 <_svfiprintf_r+0x194>
 80075fe:	ab03      	add	r3, sp, #12
 8007600:	9300      	str	r3, [sp, #0]
 8007602:	462a      	mov	r2, r5
 8007604:	4b0f      	ldr	r3, [pc, #60]	; (8007644 <_svfiprintf_r+0x1f8>)
 8007606:	a904      	add	r1, sp, #16
 8007608:	4638      	mov	r0, r7
 800760a:	f7fd ffc3 	bl	8005594 <_printf_float>
 800760e:	1c42      	adds	r2, r0, #1
 8007610:	4606      	mov	r6, r0
 8007612:	d1d6      	bne.n	80075c2 <_svfiprintf_r+0x176>
 8007614:	89ab      	ldrh	r3, [r5, #12]
 8007616:	065b      	lsls	r3, r3, #25
 8007618:	f53f af2c 	bmi.w	8007474 <_svfiprintf_r+0x28>
 800761c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800761e:	b01d      	add	sp, #116	; 0x74
 8007620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007624:	ab03      	add	r3, sp, #12
 8007626:	9300      	str	r3, [sp, #0]
 8007628:	462a      	mov	r2, r5
 800762a:	4b06      	ldr	r3, [pc, #24]	; (8007644 <_svfiprintf_r+0x1f8>)
 800762c:	a904      	add	r1, sp, #16
 800762e:	4638      	mov	r0, r7
 8007630:	f7fe fa54 	bl	8005adc <_printf_i>
 8007634:	e7eb      	b.n	800760e <_svfiprintf_r+0x1c2>
 8007636:	bf00      	nop
 8007638:	080089cc 	.word	0x080089cc
 800763c:	080089d6 	.word	0x080089d6
 8007640:	08005595 	.word	0x08005595
 8007644:	08007395 	.word	0x08007395
 8007648:	080089d2 	.word	0x080089d2

0800764c <_sbrk_r>:
 800764c:	b538      	push	{r3, r4, r5, lr}
 800764e:	4d06      	ldr	r5, [pc, #24]	; (8007668 <_sbrk_r+0x1c>)
 8007650:	2300      	movs	r3, #0
 8007652:	4604      	mov	r4, r0
 8007654:	4608      	mov	r0, r1
 8007656:	602b      	str	r3, [r5, #0]
 8007658:	f7fa fc94 	bl	8001f84 <_sbrk>
 800765c:	1c43      	adds	r3, r0, #1
 800765e:	d102      	bne.n	8007666 <_sbrk_r+0x1a>
 8007660:	682b      	ldr	r3, [r5, #0]
 8007662:	b103      	cbz	r3, 8007666 <_sbrk_r+0x1a>
 8007664:	6023      	str	r3, [r4, #0]
 8007666:	bd38      	pop	{r3, r4, r5, pc}
 8007668:	20000350 	.word	0x20000350

0800766c <__assert_func>:
 800766c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800766e:	4614      	mov	r4, r2
 8007670:	461a      	mov	r2, r3
 8007672:	4b09      	ldr	r3, [pc, #36]	; (8007698 <__assert_func+0x2c>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4605      	mov	r5, r0
 8007678:	68d8      	ldr	r0, [r3, #12]
 800767a:	b14c      	cbz	r4, 8007690 <__assert_func+0x24>
 800767c:	4b07      	ldr	r3, [pc, #28]	; (800769c <__assert_func+0x30>)
 800767e:	9100      	str	r1, [sp, #0]
 8007680:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007684:	4906      	ldr	r1, [pc, #24]	; (80076a0 <__assert_func+0x34>)
 8007686:	462b      	mov	r3, r5
 8007688:	f000 f80e 	bl	80076a8 <fiprintf>
 800768c:	f000 faac 	bl	8007be8 <abort>
 8007690:	4b04      	ldr	r3, [pc, #16]	; (80076a4 <__assert_func+0x38>)
 8007692:	461c      	mov	r4, r3
 8007694:	e7f3      	b.n	800767e <__assert_func+0x12>
 8007696:	bf00      	nop
 8007698:	20000010 	.word	0x20000010
 800769c:	080089dd 	.word	0x080089dd
 80076a0:	080089ea 	.word	0x080089ea
 80076a4:	08008a18 	.word	0x08008a18

080076a8 <fiprintf>:
 80076a8:	b40e      	push	{r1, r2, r3}
 80076aa:	b503      	push	{r0, r1, lr}
 80076ac:	4601      	mov	r1, r0
 80076ae:	ab03      	add	r3, sp, #12
 80076b0:	4805      	ldr	r0, [pc, #20]	; (80076c8 <fiprintf+0x20>)
 80076b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80076b6:	6800      	ldr	r0, [r0, #0]
 80076b8:	9301      	str	r3, [sp, #4]
 80076ba:	f000 f897 	bl	80077ec <_vfiprintf_r>
 80076be:	b002      	add	sp, #8
 80076c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80076c4:	b003      	add	sp, #12
 80076c6:	4770      	bx	lr
 80076c8:	20000010 	.word	0x20000010

080076cc <__ascii_mbtowc>:
 80076cc:	b082      	sub	sp, #8
 80076ce:	b901      	cbnz	r1, 80076d2 <__ascii_mbtowc+0x6>
 80076d0:	a901      	add	r1, sp, #4
 80076d2:	b142      	cbz	r2, 80076e6 <__ascii_mbtowc+0x1a>
 80076d4:	b14b      	cbz	r3, 80076ea <__ascii_mbtowc+0x1e>
 80076d6:	7813      	ldrb	r3, [r2, #0]
 80076d8:	600b      	str	r3, [r1, #0]
 80076da:	7812      	ldrb	r2, [r2, #0]
 80076dc:	1e10      	subs	r0, r2, #0
 80076de:	bf18      	it	ne
 80076e0:	2001      	movne	r0, #1
 80076e2:	b002      	add	sp, #8
 80076e4:	4770      	bx	lr
 80076e6:	4610      	mov	r0, r2
 80076e8:	e7fb      	b.n	80076e2 <__ascii_mbtowc+0x16>
 80076ea:	f06f 0001 	mvn.w	r0, #1
 80076ee:	e7f8      	b.n	80076e2 <__ascii_mbtowc+0x16>

080076f0 <memmove>:
 80076f0:	4288      	cmp	r0, r1
 80076f2:	b510      	push	{r4, lr}
 80076f4:	eb01 0402 	add.w	r4, r1, r2
 80076f8:	d902      	bls.n	8007700 <memmove+0x10>
 80076fa:	4284      	cmp	r4, r0
 80076fc:	4623      	mov	r3, r4
 80076fe:	d807      	bhi.n	8007710 <memmove+0x20>
 8007700:	1e43      	subs	r3, r0, #1
 8007702:	42a1      	cmp	r1, r4
 8007704:	d008      	beq.n	8007718 <memmove+0x28>
 8007706:	f811 2b01 	ldrb.w	r2, [r1], #1
 800770a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800770e:	e7f8      	b.n	8007702 <memmove+0x12>
 8007710:	4402      	add	r2, r0
 8007712:	4601      	mov	r1, r0
 8007714:	428a      	cmp	r2, r1
 8007716:	d100      	bne.n	800771a <memmove+0x2a>
 8007718:	bd10      	pop	{r4, pc}
 800771a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800771e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007722:	e7f7      	b.n	8007714 <memmove+0x24>

08007724 <__malloc_lock>:
 8007724:	4801      	ldr	r0, [pc, #4]	; (800772c <__malloc_lock+0x8>)
 8007726:	f000 bc1f 	b.w	8007f68 <__retarget_lock_acquire_recursive>
 800772a:	bf00      	nop
 800772c:	20000354 	.word	0x20000354

08007730 <__malloc_unlock>:
 8007730:	4801      	ldr	r0, [pc, #4]	; (8007738 <__malloc_unlock+0x8>)
 8007732:	f000 bc1a 	b.w	8007f6a <__retarget_lock_release_recursive>
 8007736:	bf00      	nop
 8007738:	20000354 	.word	0x20000354

0800773c <_realloc_r>:
 800773c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007740:	4680      	mov	r8, r0
 8007742:	4614      	mov	r4, r2
 8007744:	460e      	mov	r6, r1
 8007746:	b921      	cbnz	r1, 8007752 <_realloc_r+0x16>
 8007748:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800774c:	4611      	mov	r1, r2
 800774e:	f7ff bdad 	b.w	80072ac <_malloc_r>
 8007752:	b92a      	cbnz	r2, 8007760 <_realloc_r+0x24>
 8007754:	f7ff fd3e 	bl	80071d4 <_free_r>
 8007758:	4625      	mov	r5, r4
 800775a:	4628      	mov	r0, r5
 800775c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007760:	f000 fc6a 	bl	8008038 <_malloc_usable_size_r>
 8007764:	4284      	cmp	r4, r0
 8007766:	4607      	mov	r7, r0
 8007768:	d802      	bhi.n	8007770 <_realloc_r+0x34>
 800776a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800776e:	d812      	bhi.n	8007796 <_realloc_r+0x5a>
 8007770:	4621      	mov	r1, r4
 8007772:	4640      	mov	r0, r8
 8007774:	f7ff fd9a 	bl	80072ac <_malloc_r>
 8007778:	4605      	mov	r5, r0
 800777a:	2800      	cmp	r0, #0
 800777c:	d0ed      	beq.n	800775a <_realloc_r+0x1e>
 800777e:	42bc      	cmp	r4, r7
 8007780:	4622      	mov	r2, r4
 8007782:	4631      	mov	r1, r6
 8007784:	bf28      	it	cs
 8007786:	463a      	movcs	r2, r7
 8007788:	f7ff f97c 	bl	8006a84 <memcpy>
 800778c:	4631      	mov	r1, r6
 800778e:	4640      	mov	r0, r8
 8007790:	f7ff fd20 	bl	80071d4 <_free_r>
 8007794:	e7e1      	b.n	800775a <_realloc_r+0x1e>
 8007796:	4635      	mov	r5, r6
 8007798:	e7df      	b.n	800775a <_realloc_r+0x1e>

0800779a <__sfputc_r>:
 800779a:	6893      	ldr	r3, [r2, #8]
 800779c:	3b01      	subs	r3, #1
 800779e:	2b00      	cmp	r3, #0
 80077a0:	b410      	push	{r4}
 80077a2:	6093      	str	r3, [r2, #8]
 80077a4:	da08      	bge.n	80077b8 <__sfputc_r+0x1e>
 80077a6:	6994      	ldr	r4, [r2, #24]
 80077a8:	42a3      	cmp	r3, r4
 80077aa:	db01      	blt.n	80077b0 <__sfputc_r+0x16>
 80077ac:	290a      	cmp	r1, #10
 80077ae:	d103      	bne.n	80077b8 <__sfputc_r+0x1e>
 80077b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077b4:	f000 b94a 	b.w	8007a4c <__swbuf_r>
 80077b8:	6813      	ldr	r3, [r2, #0]
 80077ba:	1c58      	adds	r0, r3, #1
 80077bc:	6010      	str	r0, [r2, #0]
 80077be:	7019      	strb	r1, [r3, #0]
 80077c0:	4608      	mov	r0, r1
 80077c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077c6:	4770      	bx	lr

080077c8 <__sfputs_r>:
 80077c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ca:	4606      	mov	r6, r0
 80077cc:	460f      	mov	r7, r1
 80077ce:	4614      	mov	r4, r2
 80077d0:	18d5      	adds	r5, r2, r3
 80077d2:	42ac      	cmp	r4, r5
 80077d4:	d101      	bne.n	80077da <__sfputs_r+0x12>
 80077d6:	2000      	movs	r0, #0
 80077d8:	e007      	b.n	80077ea <__sfputs_r+0x22>
 80077da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077de:	463a      	mov	r2, r7
 80077e0:	4630      	mov	r0, r6
 80077e2:	f7ff ffda 	bl	800779a <__sfputc_r>
 80077e6:	1c43      	adds	r3, r0, #1
 80077e8:	d1f3      	bne.n	80077d2 <__sfputs_r+0xa>
 80077ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080077ec <_vfiprintf_r>:
 80077ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077f0:	460d      	mov	r5, r1
 80077f2:	b09d      	sub	sp, #116	; 0x74
 80077f4:	4614      	mov	r4, r2
 80077f6:	4698      	mov	r8, r3
 80077f8:	4606      	mov	r6, r0
 80077fa:	b118      	cbz	r0, 8007804 <_vfiprintf_r+0x18>
 80077fc:	6983      	ldr	r3, [r0, #24]
 80077fe:	b90b      	cbnz	r3, 8007804 <_vfiprintf_r+0x18>
 8007800:	f000 fb14 	bl	8007e2c <__sinit>
 8007804:	4b89      	ldr	r3, [pc, #548]	; (8007a2c <_vfiprintf_r+0x240>)
 8007806:	429d      	cmp	r5, r3
 8007808:	d11b      	bne.n	8007842 <_vfiprintf_r+0x56>
 800780a:	6875      	ldr	r5, [r6, #4]
 800780c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800780e:	07d9      	lsls	r1, r3, #31
 8007810:	d405      	bmi.n	800781e <_vfiprintf_r+0x32>
 8007812:	89ab      	ldrh	r3, [r5, #12]
 8007814:	059a      	lsls	r2, r3, #22
 8007816:	d402      	bmi.n	800781e <_vfiprintf_r+0x32>
 8007818:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800781a:	f000 fba5 	bl	8007f68 <__retarget_lock_acquire_recursive>
 800781e:	89ab      	ldrh	r3, [r5, #12]
 8007820:	071b      	lsls	r3, r3, #28
 8007822:	d501      	bpl.n	8007828 <_vfiprintf_r+0x3c>
 8007824:	692b      	ldr	r3, [r5, #16]
 8007826:	b9eb      	cbnz	r3, 8007864 <_vfiprintf_r+0x78>
 8007828:	4629      	mov	r1, r5
 800782a:	4630      	mov	r0, r6
 800782c:	f000 f96e 	bl	8007b0c <__swsetup_r>
 8007830:	b1c0      	cbz	r0, 8007864 <_vfiprintf_r+0x78>
 8007832:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007834:	07dc      	lsls	r4, r3, #31
 8007836:	d50e      	bpl.n	8007856 <_vfiprintf_r+0x6a>
 8007838:	f04f 30ff 	mov.w	r0, #4294967295
 800783c:	b01d      	add	sp, #116	; 0x74
 800783e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007842:	4b7b      	ldr	r3, [pc, #492]	; (8007a30 <_vfiprintf_r+0x244>)
 8007844:	429d      	cmp	r5, r3
 8007846:	d101      	bne.n	800784c <_vfiprintf_r+0x60>
 8007848:	68b5      	ldr	r5, [r6, #8]
 800784a:	e7df      	b.n	800780c <_vfiprintf_r+0x20>
 800784c:	4b79      	ldr	r3, [pc, #484]	; (8007a34 <_vfiprintf_r+0x248>)
 800784e:	429d      	cmp	r5, r3
 8007850:	bf08      	it	eq
 8007852:	68f5      	ldreq	r5, [r6, #12]
 8007854:	e7da      	b.n	800780c <_vfiprintf_r+0x20>
 8007856:	89ab      	ldrh	r3, [r5, #12]
 8007858:	0598      	lsls	r0, r3, #22
 800785a:	d4ed      	bmi.n	8007838 <_vfiprintf_r+0x4c>
 800785c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800785e:	f000 fb84 	bl	8007f6a <__retarget_lock_release_recursive>
 8007862:	e7e9      	b.n	8007838 <_vfiprintf_r+0x4c>
 8007864:	2300      	movs	r3, #0
 8007866:	9309      	str	r3, [sp, #36]	; 0x24
 8007868:	2320      	movs	r3, #32
 800786a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800786e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007872:	2330      	movs	r3, #48	; 0x30
 8007874:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007a38 <_vfiprintf_r+0x24c>
 8007878:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800787c:	f04f 0901 	mov.w	r9, #1
 8007880:	4623      	mov	r3, r4
 8007882:	469a      	mov	sl, r3
 8007884:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007888:	b10a      	cbz	r2, 800788e <_vfiprintf_r+0xa2>
 800788a:	2a25      	cmp	r2, #37	; 0x25
 800788c:	d1f9      	bne.n	8007882 <_vfiprintf_r+0x96>
 800788e:	ebba 0b04 	subs.w	fp, sl, r4
 8007892:	d00b      	beq.n	80078ac <_vfiprintf_r+0xc0>
 8007894:	465b      	mov	r3, fp
 8007896:	4622      	mov	r2, r4
 8007898:	4629      	mov	r1, r5
 800789a:	4630      	mov	r0, r6
 800789c:	f7ff ff94 	bl	80077c8 <__sfputs_r>
 80078a0:	3001      	adds	r0, #1
 80078a2:	f000 80aa 	beq.w	80079fa <_vfiprintf_r+0x20e>
 80078a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078a8:	445a      	add	r2, fp
 80078aa:	9209      	str	r2, [sp, #36]	; 0x24
 80078ac:	f89a 3000 	ldrb.w	r3, [sl]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	f000 80a2 	beq.w	80079fa <_vfiprintf_r+0x20e>
 80078b6:	2300      	movs	r3, #0
 80078b8:	f04f 32ff 	mov.w	r2, #4294967295
 80078bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078c0:	f10a 0a01 	add.w	sl, sl, #1
 80078c4:	9304      	str	r3, [sp, #16]
 80078c6:	9307      	str	r3, [sp, #28]
 80078c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80078cc:	931a      	str	r3, [sp, #104]	; 0x68
 80078ce:	4654      	mov	r4, sl
 80078d0:	2205      	movs	r2, #5
 80078d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078d6:	4858      	ldr	r0, [pc, #352]	; (8007a38 <_vfiprintf_r+0x24c>)
 80078d8:	f7f8 fc82 	bl	80001e0 <memchr>
 80078dc:	9a04      	ldr	r2, [sp, #16]
 80078de:	b9d8      	cbnz	r0, 8007918 <_vfiprintf_r+0x12c>
 80078e0:	06d1      	lsls	r1, r2, #27
 80078e2:	bf44      	itt	mi
 80078e4:	2320      	movmi	r3, #32
 80078e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078ea:	0713      	lsls	r3, r2, #28
 80078ec:	bf44      	itt	mi
 80078ee:	232b      	movmi	r3, #43	; 0x2b
 80078f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078f4:	f89a 3000 	ldrb.w	r3, [sl]
 80078f8:	2b2a      	cmp	r3, #42	; 0x2a
 80078fa:	d015      	beq.n	8007928 <_vfiprintf_r+0x13c>
 80078fc:	9a07      	ldr	r2, [sp, #28]
 80078fe:	4654      	mov	r4, sl
 8007900:	2000      	movs	r0, #0
 8007902:	f04f 0c0a 	mov.w	ip, #10
 8007906:	4621      	mov	r1, r4
 8007908:	f811 3b01 	ldrb.w	r3, [r1], #1
 800790c:	3b30      	subs	r3, #48	; 0x30
 800790e:	2b09      	cmp	r3, #9
 8007910:	d94e      	bls.n	80079b0 <_vfiprintf_r+0x1c4>
 8007912:	b1b0      	cbz	r0, 8007942 <_vfiprintf_r+0x156>
 8007914:	9207      	str	r2, [sp, #28]
 8007916:	e014      	b.n	8007942 <_vfiprintf_r+0x156>
 8007918:	eba0 0308 	sub.w	r3, r0, r8
 800791c:	fa09 f303 	lsl.w	r3, r9, r3
 8007920:	4313      	orrs	r3, r2
 8007922:	9304      	str	r3, [sp, #16]
 8007924:	46a2      	mov	sl, r4
 8007926:	e7d2      	b.n	80078ce <_vfiprintf_r+0xe2>
 8007928:	9b03      	ldr	r3, [sp, #12]
 800792a:	1d19      	adds	r1, r3, #4
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	9103      	str	r1, [sp, #12]
 8007930:	2b00      	cmp	r3, #0
 8007932:	bfbb      	ittet	lt
 8007934:	425b      	neglt	r3, r3
 8007936:	f042 0202 	orrlt.w	r2, r2, #2
 800793a:	9307      	strge	r3, [sp, #28]
 800793c:	9307      	strlt	r3, [sp, #28]
 800793e:	bfb8      	it	lt
 8007940:	9204      	strlt	r2, [sp, #16]
 8007942:	7823      	ldrb	r3, [r4, #0]
 8007944:	2b2e      	cmp	r3, #46	; 0x2e
 8007946:	d10c      	bne.n	8007962 <_vfiprintf_r+0x176>
 8007948:	7863      	ldrb	r3, [r4, #1]
 800794a:	2b2a      	cmp	r3, #42	; 0x2a
 800794c:	d135      	bne.n	80079ba <_vfiprintf_r+0x1ce>
 800794e:	9b03      	ldr	r3, [sp, #12]
 8007950:	1d1a      	adds	r2, r3, #4
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	9203      	str	r2, [sp, #12]
 8007956:	2b00      	cmp	r3, #0
 8007958:	bfb8      	it	lt
 800795a:	f04f 33ff 	movlt.w	r3, #4294967295
 800795e:	3402      	adds	r4, #2
 8007960:	9305      	str	r3, [sp, #20]
 8007962:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007a48 <_vfiprintf_r+0x25c>
 8007966:	7821      	ldrb	r1, [r4, #0]
 8007968:	2203      	movs	r2, #3
 800796a:	4650      	mov	r0, sl
 800796c:	f7f8 fc38 	bl	80001e0 <memchr>
 8007970:	b140      	cbz	r0, 8007984 <_vfiprintf_r+0x198>
 8007972:	2340      	movs	r3, #64	; 0x40
 8007974:	eba0 000a 	sub.w	r0, r0, sl
 8007978:	fa03 f000 	lsl.w	r0, r3, r0
 800797c:	9b04      	ldr	r3, [sp, #16]
 800797e:	4303      	orrs	r3, r0
 8007980:	3401      	adds	r4, #1
 8007982:	9304      	str	r3, [sp, #16]
 8007984:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007988:	482c      	ldr	r0, [pc, #176]	; (8007a3c <_vfiprintf_r+0x250>)
 800798a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800798e:	2206      	movs	r2, #6
 8007990:	f7f8 fc26 	bl	80001e0 <memchr>
 8007994:	2800      	cmp	r0, #0
 8007996:	d03f      	beq.n	8007a18 <_vfiprintf_r+0x22c>
 8007998:	4b29      	ldr	r3, [pc, #164]	; (8007a40 <_vfiprintf_r+0x254>)
 800799a:	bb1b      	cbnz	r3, 80079e4 <_vfiprintf_r+0x1f8>
 800799c:	9b03      	ldr	r3, [sp, #12]
 800799e:	3307      	adds	r3, #7
 80079a0:	f023 0307 	bic.w	r3, r3, #7
 80079a4:	3308      	adds	r3, #8
 80079a6:	9303      	str	r3, [sp, #12]
 80079a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079aa:	443b      	add	r3, r7
 80079ac:	9309      	str	r3, [sp, #36]	; 0x24
 80079ae:	e767      	b.n	8007880 <_vfiprintf_r+0x94>
 80079b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80079b4:	460c      	mov	r4, r1
 80079b6:	2001      	movs	r0, #1
 80079b8:	e7a5      	b.n	8007906 <_vfiprintf_r+0x11a>
 80079ba:	2300      	movs	r3, #0
 80079bc:	3401      	adds	r4, #1
 80079be:	9305      	str	r3, [sp, #20]
 80079c0:	4619      	mov	r1, r3
 80079c2:	f04f 0c0a 	mov.w	ip, #10
 80079c6:	4620      	mov	r0, r4
 80079c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079cc:	3a30      	subs	r2, #48	; 0x30
 80079ce:	2a09      	cmp	r2, #9
 80079d0:	d903      	bls.n	80079da <_vfiprintf_r+0x1ee>
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d0c5      	beq.n	8007962 <_vfiprintf_r+0x176>
 80079d6:	9105      	str	r1, [sp, #20]
 80079d8:	e7c3      	b.n	8007962 <_vfiprintf_r+0x176>
 80079da:	fb0c 2101 	mla	r1, ip, r1, r2
 80079de:	4604      	mov	r4, r0
 80079e0:	2301      	movs	r3, #1
 80079e2:	e7f0      	b.n	80079c6 <_vfiprintf_r+0x1da>
 80079e4:	ab03      	add	r3, sp, #12
 80079e6:	9300      	str	r3, [sp, #0]
 80079e8:	462a      	mov	r2, r5
 80079ea:	4b16      	ldr	r3, [pc, #88]	; (8007a44 <_vfiprintf_r+0x258>)
 80079ec:	a904      	add	r1, sp, #16
 80079ee:	4630      	mov	r0, r6
 80079f0:	f7fd fdd0 	bl	8005594 <_printf_float>
 80079f4:	4607      	mov	r7, r0
 80079f6:	1c78      	adds	r0, r7, #1
 80079f8:	d1d6      	bne.n	80079a8 <_vfiprintf_r+0x1bc>
 80079fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079fc:	07d9      	lsls	r1, r3, #31
 80079fe:	d405      	bmi.n	8007a0c <_vfiprintf_r+0x220>
 8007a00:	89ab      	ldrh	r3, [r5, #12]
 8007a02:	059a      	lsls	r2, r3, #22
 8007a04:	d402      	bmi.n	8007a0c <_vfiprintf_r+0x220>
 8007a06:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a08:	f000 faaf 	bl	8007f6a <__retarget_lock_release_recursive>
 8007a0c:	89ab      	ldrh	r3, [r5, #12]
 8007a0e:	065b      	lsls	r3, r3, #25
 8007a10:	f53f af12 	bmi.w	8007838 <_vfiprintf_r+0x4c>
 8007a14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a16:	e711      	b.n	800783c <_vfiprintf_r+0x50>
 8007a18:	ab03      	add	r3, sp, #12
 8007a1a:	9300      	str	r3, [sp, #0]
 8007a1c:	462a      	mov	r2, r5
 8007a1e:	4b09      	ldr	r3, [pc, #36]	; (8007a44 <_vfiprintf_r+0x258>)
 8007a20:	a904      	add	r1, sp, #16
 8007a22:	4630      	mov	r0, r6
 8007a24:	f7fe f85a 	bl	8005adc <_printf_i>
 8007a28:	e7e4      	b.n	80079f4 <_vfiprintf_r+0x208>
 8007a2a:	bf00      	nop
 8007a2c:	08008b44 	.word	0x08008b44
 8007a30:	08008b64 	.word	0x08008b64
 8007a34:	08008b24 	.word	0x08008b24
 8007a38:	080089cc 	.word	0x080089cc
 8007a3c:	080089d6 	.word	0x080089d6
 8007a40:	08005595 	.word	0x08005595
 8007a44:	080077c9 	.word	0x080077c9
 8007a48:	080089d2 	.word	0x080089d2

08007a4c <__swbuf_r>:
 8007a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a4e:	460e      	mov	r6, r1
 8007a50:	4614      	mov	r4, r2
 8007a52:	4605      	mov	r5, r0
 8007a54:	b118      	cbz	r0, 8007a5e <__swbuf_r+0x12>
 8007a56:	6983      	ldr	r3, [r0, #24]
 8007a58:	b90b      	cbnz	r3, 8007a5e <__swbuf_r+0x12>
 8007a5a:	f000 f9e7 	bl	8007e2c <__sinit>
 8007a5e:	4b21      	ldr	r3, [pc, #132]	; (8007ae4 <__swbuf_r+0x98>)
 8007a60:	429c      	cmp	r4, r3
 8007a62:	d12b      	bne.n	8007abc <__swbuf_r+0x70>
 8007a64:	686c      	ldr	r4, [r5, #4]
 8007a66:	69a3      	ldr	r3, [r4, #24]
 8007a68:	60a3      	str	r3, [r4, #8]
 8007a6a:	89a3      	ldrh	r3, [r4, #12]
 8007a6c:	071a      	lsls	r2, r3, #28
 8007a6e:	d52f      	bpl.n	8007ad0 <__swbuf_r+0x84>
 8007a70:	6923      	ldr	r3, [r4, #16]
 8007a72:	b36b      	cbz	r3, 8007ad0 <__swbuf_r+0x84>
 8007a74:	6923      	ldr	r3, [r4, #16]
 8007a76:	6820      	ldr	r0, [r4, #0]
 8007a78:	1ac0      	subs	r0, r0, r3
 8007a7a:	6963      	ldr	r3, [r4, #20]
 8007a7c:	b2f6      	uxtb	r6, r6
 8007a7e:	4283      	cmp	r3, r0
 8007a80:	4637      	mov	r7, r6
 8007a82:	dc04      	bgt.n	8007a8e <__swbuf_r+0x42>
 8007a84:	4621      	mov	r1, r4
 8007a86:	4628      	mov	r0, r5
 8007a88:	f000 f93c 	bl	8007d04 <_fflush_r>
 8007a8c:	bb30      	cbnz	r0, 8007adc <__swbuf_r+0x90>
 8007a8e:	68a3      	ldr	r3, [r4, #8]
 8007a90:	3b01      	subs	r3, #1
 8007a92:	60a3      	str	r3, [r4, #8]
 8007a94:	6823      	ldr	r3, [r4, #0]
 8007a96:	1c5a      	adds	r2, r3, #1
 8007a98:	6022      	str	r2, [r4, #0]
 8007a9a:	701e      	strb	r6, [r3, #0]
 8007a9c:	6963      	ldr	r3, [r4, #20]
 8007a9e:	3001      	adds	r0, #1
 8007aa0:	4283      	cmp	r3, r0
 8007aa2:	d004      	beq.n	8007aae <__swbuf_r+0x62>
 8007aa4:	89a3      	ldrh	r3, [r4, #12]
 8007aa6:	07db      	lsls	r3, r3, #31
 8007aa8:	d506      	bpl.n	8007ab8 <__swbuf_r+0x6c>
 8007aaa:	2e0a      	cmp	r6, #10
 8007aac:	d104      	bne.n	8007ab8 <__swbuf_r+0x6c>
 8007aae:	4621      	mov	r1, r4
 8007ab0:	4628      	mov	r0, r5
 8007ab2:	f000 f927 	bl	8007d04 <_fflush_r>
 8007ab6:	b988      	cbnz	r0, 8007adc <__swbuf_r+0x90>
 8007ab8:	4638      	mov	r0, r7
 8007aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007abc:	4b0a      	ldr	r3, [pc, #40]	; (8007ae8 <__swbuf_r+0x9c>)
 8007abe:	429c      	cmp	r4, r3
 8007ac0:	d101      	bne.n	8007ac6 <__swbuf_r+0x7a>
 8007ac2:	68ac      	ldr	r4, [r5, #8]
 8007ac4:	e7cf      	b.n	8007a66 <__swbuf_r+0x1a>
 8007ac6:	4b09      	ldr	r3, [pc, #36]	; (8007aec <__swbuf_r+0xa0>)
 8007ac8:	429c      	cmp	r4, r3
 8007aca:	bf08      	it	eq
 8007acc:	68ec      	ldreq	r4, [r5, #12]
 8007ace:	e7ca      	b.n	8007a66 <__swbuf_r+0x1a>
 8007ad0:	4621      	mov	r1, r4
 8007ad2:	4628      	mov	r0, r5
 8007ad4:	f000 f81a 	bl	8007b0c <__swsetup_r>
 8007ad8:	2800      	cmp	r0, #0
 8007ada:	d0cb      	beq.n	8007a74 <__swbuf_r+0x28>
 8007adc:	f04f 37ff 	mov.w	r7, #4294967295
 8007ae0:	e7ea      	b.n	8007ab8 <__swbuf_r+0x6c>
 8007ae2:	bf00      	nop
 8007ae4:	08008b44 	.word	0x08008b44
 8007ae8:	08008b64 	.word	0x08008b64
 8007aec:	08008b24 	.word	0x08008b24

08007af0 <__ascii_wctomb>:
 8007af0:	b149      	cbz	r1, 8007b06 <__ascii_wctomb+0x16>
 8007af2:	2aff      	cmp	r2, #255	; 0xff
 8007af4:	bf85      	ittet	hi
 8007af6:	238a      	movhi	r3, #138	; 0x8a
 8007af8:	6003      	strhi	r3, [r0, #0]
 8007afa:	700a      	strbls	r2, [r1, #0]
 8007afc:	f04f 30ff 	movhi.w	r0, #4294967295
 8007b00:	bf98      	it	ls
 8007b02:	2001      	movls	r0, #1
 8007b04:	4770      	bx	lr
 8007b06:	4608      	mov	r0, r1
 8007b08:	4770      	bx	lr
	...

08007b0c <__swsetup_r>:
 8007b0c:	4b32      	ldr	r3, [pc, #200]	; (8007bd8 <__swsetup_r+0xcc>)
 8007b0e:	b570      	push	{r4, r5, r6, lr}
 8007b10:	681d      	ldr	r5, [r3, #0]
 8007b12:	4606      	mov	r6, r0
 8007b14:	460c      	mov	r4, r1
 8007b16:	b125      	cbz	r5, 8007b22 <__swsetup_r+0x16>
 8007b18:	69ab      	ldr	r3, [r5, #24]
 8007b1a:	b913      	cbnz	r3, 8007b22 <__swsetup_r+0x16>
 8007b1c:	4628      	mov	r0, r5
 8007b1e:	f000 f985 	bl	8007e2c <__sinit>
 8007b22:	4b2e      	ldr	r3, [pc, #184]	; (8007bdc <__swsetup_r+0xd0>)
 8007b24:	429c      	cmp	r4, r3
 8007b26:	d10f      	bne.n	8007b48 <__swsetup_r+0x3c>
 8007b28:	686c      	ldr	r4, [r5, #4]
 8007b2a:	89a3      	ldrh	r3, [r4, #12]
 8007b2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b30:	0719      	lsls	r1, r3, #28
 8007b32:	d42c      	bmi.n	8007b8e <__swsetup_r+0x82>
 8007b34:	06dd      	lsls	r5, r3, #27
 8007b36:	d411      	bmi.n	8007b5c <__swsetup_r+0x50>
 8007b38:	2309      	movs	r3, #9
 8007b3a:	6033      	str	r3, [r6, #0]
 8007b3c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007b40:	81a3      	strh	r3, [r4, #12]
 8007b42:	f04f 30ff 	mov.w	r0, #4294967295
 8007b46:	e03e      	b.n	8007bc6 <__swsetup_r+0xba>
 8007b48:	4b25      	ldr	r3, [pc, #148]	; (8007be0 <__swsetup_r+0xd4>)
 8007b4a:	429c      	cmp	r4, r3
 8007b4c:	d101      	bne.n	8007b52 <__swsetup_r+0x46>
 8007b4e:	68ac      	ldr	r4, [r5, #8]
 8007b50:	e7eb      	b.n	8007b2a <__swsetup_r+0x1e>
 8007b52:	4b24      	ldr	r3, [pc, #144]	; (8007be4 <__swsetup_r+0xd8>)
 8007b54:	429c      	cmp	r4, r3
 8007b56:	bf08      	it	eq
 8007b58:	68ec      	ldreq	r4, [r5, #12]
 8007b5a:	e7e6      	b.n	8007b2a <__swsetup_r+0x1e>
 8007b5c:	0758      	lsls	r0, r3, #29
 8007b5e:	d512      	bpl.n	8007b86 <__swsetup_r+0x7a>
 8007b60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b62:	b141      	cbz	r1, 8007b76 <__swsetup_r+0x6a>
 8007b64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b68:	4299      	cmp	r1, r3
 8007b6a:	d002      	beq.n	8007b72 <__swsetup_r+0x66>
 8007b6c:	4630      	mov	r0, r6
 8007b6e:	f7ff fb31 	bl	80071d4 <_free_r>
 8007b72:	2300      	movs	r3, #0
 8007b74:	6363      	str	r3, [r4, #52]	; 0x34
 8007b76:	89a3      	ldrh	r3, [r4, #12]
 8007b78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007b7c:	81a3      	strh	r3, [r4, #12]
 8007b7e:	2300      	movs	r3, #0
 8007b80:	6063      	str	r3, [r4, #4]
 8007b82:	6923      	ldr	r3, [r4, #16]
 8007b84:	6023      	str	r3, [r4, #0]
 8007b86:	89a3      	ldrh	r3, [r4, #12]
 8007b88:	f043 0308 	orr.w	r3, r3, #8
 8007b8c:	81a3      	strh	r3, [r4, #12]
 8007b8e:	6923      	ldr	r3, [r4, #16]
 8007b90:	b94b      	cbnz	r3, 8007ba6 <__swsetup_r+0x9a>
 8007b92:	89a3      	ldrh	r3, [r4, #12]
 8007b94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007b98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b9c:	d003      	beq.n	8007ba6 <__swsetup_r+0x9a>
 8007b9e:	4621      	mov	r1, r4
 8007ba0:	4630      	mov	r0, r6
 8007ba2:	f000 fa09 	bl	8007fb8 <__smakebuf_r>
 8007ba6:	89a0      	ldrh	r0, [r4, #12]
 8007ba8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007bac:	f010 0301 	ands.w	r3, r0, #1
 8007bb0:	d00a      	beq.n	8007bc8 <__swsetup_r+0xbc>
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	60a3      	str	r3, [r4, #8]
 8007bb6:	6963      	ldr	r3, [r4, #20]
 8007bb8:	425b      	negs	r3, r3
 8007bba:	61a3      	str	r3, [r4, #24]
 8007bbc:	6923      	ldr	r3, [r4, #16]
 8007bbe:	b943      	cbnz	r3, 8007bd2 <__swsetup_r+0xc6>
 8007bc0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007bc4:	d1ba      	bne.n	8007b3c <__swsetup_r+0x30>
 8007bc6:	bd70      	pop	{r4, r5, r6, pc}
 8007bc8:	0781      	lsls	r1, r0, #30
 8007bca:	bf58      	it	pl
 8007bcc:	6963      	ldrpl	r3, [r4, #20]
 8007bce:	60a3      	str	r3, [r4, #8]
 8007bd0:	e7f4      	b.n	8007bbc <__swsetup_r+0xb0>
 8007bd2:	2000      	movs	r0, #0
 8007bd4:	e7f7      	b.n	8007bc6 <__swsetup_r+0xba>
 8007bd6:	bf00      	nop
 8007bd8:	20000010 	.word	0x20000010
 8007bdc:	08008b44 	.word	0x08008b44
 8007be0:	08008b64 	.word	0x08008b64
 8007be4:	08008b24 	.word	0x08008b24

08007be8 <abort>:
 8007be8:	b508      	push	{r3, lr}
 8007bea:	2006      	movs	r0, #6
 8007bec:	f000 fa54 	bl	8008098 <raise>
 8007bf0:	2001      	movs	r0, #1
 8007bf2:	f7fa f94f 	bl	8001e94 <_exit>
	...

08007bf8 <__sflush_r>:
 8007bf8:	898a      	ldrh	r2, [r1, #12]
 8007bfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bfe:	4605      	mov	r5, r0
 8007c00:	0710      	lsls	r0, r2, #28
 8007c02:	460c      	mov	r4, r1
 8007c04:	d458      	bmi.n	8007cb8 <__sflush_r+0xc0>
 8007c06:	684b      	ldr	r3, [r1, #4]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	dc05      	bgt.n	8007c18 <__sflush_r+0x20>
 8007c0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	dc02      	bgt.n	8007c18 <__sflush_r+0x20>
 8007c12:	2000      	movs	r0, #0
 8007c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c1a:	2e00      	cmp	r6, #0
 8007c1c:	d0f9      	beq.n	8007c12 <__sflush_r+0x1a>
 8007c1e:	2300      	movs	r3, #0
 8007c20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c24:	682f      	ldr	r7, [r5, #0]
 8007c26:	602b      	str	r3, [r5, #0]
 8007c28:	d032      	beq.n	8007c90 <__sflush_r+0x98>
 8007c2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c2c:	89a3      	ldrh	r3, [r4, #12]
 8007c2e:	075a      	lsls	r2, r3, #29
 8007c30:	d505      	bpl.n	8007c3e <__sflush_r+0x46>
 8007c32:	6863      	ldr	r3, [r4, #4]
 8007c34:	1ac0      	subs	r0, r0, r3
 8007c36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c38:	b10b      	cbz	r3, 8007c3e <__sflush_r+0x46>
 8007c3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c3c:	1ac0      	subs	r0, r0, r3
 8007c3e:	2300      	movs	r3, #0
 8007c40:	4602      	mov	r2, r0
 8007c42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c44:	6a21      	ldr	r1, [r4, #32]
 8007c46:	4628      	mov	r0, r5
 8007c48:	47b0      	blx	r6
 8007c4a:	1c43      	adds	r3, r0, #1
 8007c4c:	89a3      	ldrh	r3, [r4, #12]
 8007c4e:	d106      	bne.n	8007c5e <__sflush_r+0x66>
 8007c50:	6829      	ldr	r1, [r5, #0]
 8007c52:	291d      	cmp	r1, #29
 8007c54:	d82c      	bhi.n	8007cb0 <__sflush_r+0xb8>
 8007c56:	4a2a      	ldr	r2, [pc, #168]	; (8007d00 <__sflush_r+0x108>)
 8007c58:	40ca      	lsrs	r2, r1
 8007c5a:	07d6      	lsls	r6, r2, #31
 8007c5c:	d528      	bpl.n	8007cb0 <__sflush_r+0xb8>
 8007c5e:	2200      	movs	r2, #0
 8007c60:	6062      	str	r2, [r4, #4]
 8007c62:	04d9      	lsls	r1, r3, #19
 8007c64:	6922      	ldr	r2, [r4, #16]
 8007c66:	6022      	str	r2, [r4, #0]
 8007c68:	d504      	bpl.n	8007c74 <__sflush_r+0x7c>
 8007c6a:	1c42      	adds	r2, r0, #1
 8007c6c:	d101      	bne.n	8007c72 <__sflush_r+0x7a>
 8007c6e:	682b      	ldr	r3, [r5, #0]
 8007c70:	b903      	cbnz	r3, 8007c74 <__sflush_r+0x7c>
 8007c72:	6560      	str	r0, [r4, #84]	; 0x54
 8007c74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c76:	602f      	str	r7, [r5, #0]
 8007c78:	2900      	cmp	r1, #0
 8007c7a:	d0ca      	beq.n	8007c12 <__sflush_r+0x1a>
 8007c7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c80:	4299      	cmp	r1, r3
 8007c82:	d002      	beq.n	8007c8a <__sflush_r+0x92>
 8007c84:	4628      	mov	r0, r5
 8007c86:	f7ff faa5 	bl	80071d4 <_free_r>
 8007c8a:	2000      	movs	r0, #0
 8007c8c:	6360      	str	r0, [r4, #52]	; 0x34
 8007c8e:	e7c1      	b.n	8007c14 <__sflush_r+0x1c>
 8007c90:	6a21      	ldr	r1, [r4, #32]
 8007c92:	2301      	movs	r3, #1
 8007c94:	4628      	mov	r0, r5
 8007c96:	47b0      	blx	r6
 8007c98:	1c41      	adds	r1, r0, #1
 8007c9a:	d1c7      	bne.n	8007c2c <__sflush_r+0x34>
 8007c9c:	682b      	ldr	r3, [r5, #0]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d0c4      	beq.n	8007c2c <__sflush_r+0x34>
 8007ca2:	2b1d      	cmp	r3, #29
 8007ca4:	d001      	beq.n	8007caa <__sflush_r+0xb2>
 8007ca6:	2b16      	cmp	r3, #22
 8007ca8:	d101      	bne.n	8007cae <__sflush_r+0xb6>
 8007caa:	602f      	str	r7, [r5, #0]
 8007cac:	e7b1      	b.n	8007c12 <__sflush_r+0x1a>
 8007cae:	89a3      	ldrh	r3, [r4, #12]
 8007cb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cb4:	81a3      	strh	r3, [r4, #12]
 8007cb6:	e7ad      	b.n	8007c14 <__sflush_r+0x1c>
 8007cb8:	690f      	ldr	r7, [r1, #16]
 8007cba:	2f00      	cmp	r7, #0
 8007cbc:	d0a9      	beq.n	8007c12 <__sflush_r+0x1a>
 8007cbe:	0793      	lsls	r3, r2, #30
 8007cc0:	680e      	ldr	r6, [r1, #0]
 8007cc2:	bf08      	it	eq
 8007cc4:	694b      	ldreq	r3, [r1, #20]
 8007cc6:	600f      	str	r7, [r1, #0]
 8007cc8:	bf18      	it	ne
 8007cca:	2300      	movne	r3, #0
 8007ccc:	eba6 0807 	sub.w	r8, r6, r7
 8007cd0:	608b      	str	r3, [r1, #8]
 8007cd2:	f1b8 0f00 	cmp.w	r8, #0
 8007cd6:	dd9c      	ble.n	8007c12 <__sflush_r+0x1a>
 8007cd8:	6a21      	ldr	r1, [r4, #32]
 8007cda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007cdc:	4643      	mov	r3, r8
 8007cde:	463a      	mov	r2, r7
 8007ce0:	4628      	mov	r0, r5
 8007ce2:	47b0      	blx	r6
 8007ce4:	2800      	cmp	r0, #0
 8007ce6:	dc06      	bgt.n	8007cf6 <__sflush_r+0xfe>
 8007ce8:	89a3      	ldrh	r3, [r4, #12]
 8007cea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cee:	81a3      	strh	r3, [r4, #12]
 8007cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8007cf4:	e78e      	b.n	8007c14 <__sflush_r+0x1c>
 8007cf6:	4407      	add	r7, r0
 8007cf8:	eba8 0800 	sub.w	r8, r8, r0
 8007cfc:	e7e9      	b.n	8007cd2 <__sflush_r+0xda>
 8007cfe:	bf00      	nop
 8007d00:	20400001 	.word	0x20400001

08007d04 <_fflush_r>:
 8007d04:	b538      	push	{r3, r4, r5, lr}
 8007d06:	690b      	ldr	r3, [r1, #16]
 8007d08:	4605      	mov	r5, r0
 8007d0a:	460c      	mov	r4, r1
 8007d0c:	b913      	cbnz	r3, 8007d14 <_fflush_r+0x10>
 8007d0e:	2500      	movs	r5, #0
 8007d10:	4628      	mov	r0, r5
 8007d12:	bd38      	pop	{r3, r4, r5, pc}
 8007d14:	b118      	cbz	r0, 8007d1e <_fflush_r+0x1a>
 8007d16:	6983      	ldr	r3, [r0, #24]
 8007d18:	b90b      	cbnz	r3, 8007d1e <_fflush_r+0x1a>
 8007d1a:	f000 f887 	bl	8007e2c <__sinit>
 8007d1e:	4b14      	ldr	r3, [pc, #80]	; (8007d70 <_fflush_r+0x6c>)
 8007d20:	429c      	cmp	r4, r3
 8007d22:	d11b      	bne.n	8007d5c <_fflush_r+0x58>
 8007d24:	686c      	ldr	r4, [r5, #4]
 8007d26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d0ef      	beq.n	8007d0e <_fflush_r+0xa>
 8007d2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d30:	07d0      	lsls	r0, r2, #31
 8007d32:	d404      	bmi.n	8007d3e <_fflush_r+0x3a>
 8007d34:	0599      	lsls	r1, r3, #22
 8007d36:	d402      	bmi.n	8007d3e <_fflush_r+0x3a>
 8007d38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d3a:	f000 f915 	bl	8007f68 <__retarget_lock_acquire_recursive>
 8007d3e:	4628      	mov	r0, r5
 8007d40:	4621      	mov	r1, r4
 8007d42:	f7ff ff59 	bl	8007bf8 <__sflush_r>
 8007d46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d48:	07da      	lsls	r2, r3, #31
 8007d4a:	4605      	mov	r5, r0
 8007d4c:	d4e0      	bmi.n	8007d10 <_fflush_r+0xc>
 8007d4e:	89a3      	ldrh	r3, [r4, #12]
 8007d50:	059b      	lsls	r3, r3, #22
 8007d52:	d4dd      	bmi.n	8007d10 <_fflush_r+0xc>
 8007d54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d56:	f000 f908 	bl	8007f6a <__retarget_lock_release_recursive>
 8007d5a:	e7d9      	b.n	8007d10 <_fflush_r+0xc>
 8007d5c:	4b05      	ldr	r3, [pc, #20]	; (8007d74 <_fflush_r+0x70>)
 8007d5e:	429c      	cmp	r4, r3
 8007d60:	d101      	bne.n	8007d66 <_fflush_r+0x62>
 8007d62:	68ac      	ldr	r4, [r5, #8]
 8007d64:	e7df      	b.n	8007d26 <_fflush_r+0x22>
 8007d66:	4b04      	ldr	r3, [pc, #16]	; (8007d78 <_fflush_r+0x74>)
 8007d68:	429c      	cmp	r4, r3
 8007d6a:	bf08      	it	eq
 8007d6c:	68ec      	ldreq	r4, [r5, #12]
 8007d6e:	e7da      	b.n	8007d26 <_fflush_r+0x22>
 8007d70:	08008b44 	.word	0x08008b44
 8007d74:	08008b64 	.word	0x08008b64
 8007d78:	08008b24 	.word	0x08008b24

08007d7c <std>:
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	b510      	push	{r4, lr}
 8007d80:	4604      	mov	r4, r0
 8007d82:	e9c0 3300 	strd	r3, r3, [r0]
 8007d86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d8a:	6083      	str	r3, [r0, #8]
 8007d8c:	8181      	strh	r1, [r0, #12]
 8007d8e:	6643      	str	r3, [r0, #100]	; 0x64
 8007d90:	81c2      	strh	r2, [r0, #14]
 8007d92:	6183      	str	r3, [r0, #24]
 8007d94:	4619      	mov	r1, r3
 8007d96:	2208      	movs	r2, #8
 8007d98:	305c      	adds	r0, #92	; 0x5c
 8007d9a:	f7fd fb53 	bl	8005444 <memset>
 8007d9e:	4b05      	ldr	r3, [pc, #20]	; (8007db4 <std+0x38>)
 8007da0:	6263      	str	r3, [r4, #36]	; 0x24
 8007da2:	4b05      	ldr	r3, [pc, #20]	; (8007db8 <std+0x3c>)
 8007da4:	62a3      	str	r3, [r4, #40]	; 0x28
 8007da6:	4b05      	ldr	r3, [pc, #20]	; (8007dbc <std+0x40>)
 8007da8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007daa:	4b05      	ldr	r3, [pc, #20]	; (8007dc0 <std+0x44>)
 8007dac:	6224      	str	r4, [r4, #32]
 8007dae:	6323      	str	r3, [r4, #48]	; 0x30
 8007db0:	bd10      	pop	{r4, pc}
 8007db2:	bf00      	nop
 8007db4:	080080d1 	.word	0x080080d1
 8007db8:	080080f3 	.word	0x080080f3
 8007dbc:	0800812b 	.word	0x0800812b
 8007dc0:	0800814f 	.word	0x0800814f

08007dc4 <_cleanup_r>:
 8007dc4:	4901      	ldr	r1, [pc, #4]	; (8007dcc <_cleanup_r+0x8>)
 8007dc6:	f000 b8af 	b.w	8007f28 <_fwalk_reent>
 8007dca:	bf00      	nop
 8007dcc:	08007d05 	.word	0x08007d05

08007dd0 <__sfmoreglue>:
 8007dd0:	b570      	push	{r4, r5, r6, lr}
 8007dd2:	2268      	movs	r2, #104	; 0x68
 8007dd4:	1e4d      	subs	r5, r1, #1
 8007dd6:	4355      	muls	r5, r2
 8007dd8:	460e      	mov	r6, r1
 8007dda:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007dde:	f7ff fa65 	bl	80072ac <_malloc_r>
 8007de2:	4604      	mov	r4, r0
 8007de4:	b140      	cbz	r0, 8007df8 <__sfmoreglue+0x28>
 8007de6:	2100      	movs	r1, #0
 8007de8:	e9c0 1600 	strd	r1, r6, [r0]
 8007dec:	300c      	adds	r0, #12
 8007dee:	60a0      	str	r0, [r4, #8]
 8007df0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007df4:	f7fd fb26 	bl	8005444 <memset>
 8007df8:	4620      	mov	r0, r4
 8007dfa:	bd70      	pop	{r4, r5, r6, pc}

08007dfc <__sfp_lock_acquire>:
 8007dfc:	4801      	ldr	r0, [pc, #4]	; (8007e04 <__sfp_lock_acquire+0x8>)
 8007dfe:	f000 b8b3 	b.w	8007f68 <__retarget_lock_acquire_recursive>
 8007e02:	bf00      	nop
 8007e04:	20000355 	.word	0x20000355

08007e08 <__sfp_lock_release>:
 8007e08:	4801      	ldr	r0, [pc, #4]	; (8007e10 <__sfp_lock_release+0x8>)
 8007e0a:	f000 b8ae 	b.w	8007f6a <__retarget_lock_release_recursive>
 8007e0e:	bf00      	nop
 8007e10:	20000355 	.word	0x20000355

08007e14 <__sinit_lock_acquire>:
 8007e14:	4801      	ldr	r0, [pc, #4]	; (8007e1c <__sinit_lock_acquire+0x8>)
 8007e16:	f000 b8a7 	b.w	8007f68 <__retarget_lock_acquire_recursive>
 8007e1a:	bf00      	nop
 8007e1c:	20000356 	.word	0x20000356

08007e20 <__sinit_lock_release>:
 8007e20:	4801      	ldr	r0, [pc, #4]	; (8007e28 <__sinit_lock_release+0x8>)
 8007e22:	f000 b8a2 	b.w	8007f6a <__retarget_lock_release_recursive>
 8007e26:	bf00      	nop
 8007e28:	20000356 	.word	0x20000356

08007e2c <__sinit>:
 8007e2c:	b510      	push	{r4, lr}
 8007e2e:	4604      	mov	r4, r0
 8007e30:	f7ff fff0 	bl	8007e14 <__sinit_lock_acquire>
 8007e34:	69a3      	ldr	r3, [r4, #24]
 8007e36:	b11b      	cbz	r3, 8007e40 <__sinit+0x14>
 8007e38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e3c:	f7ff bff0 	b.w	8007e20 <__sinit_lock_release>
 8007e40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007e44:	6523      	str	r3, [r4, #80]	; 0x50
 8007e46:	4b13      	ldr	r3, [pc, #76]	; (8007e94 <__sinit+0x68>)
 8007e48:	4a13      	ldr	r2, [pc, #76]	; (8007e98 <__sinit+0x6c>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	62a2      	str	r2, [r4, #40]	; 0x28
 8007e4e:	42a3      	cmp	r3, r4
 8007e50:	bf04      	itt	eq
 8007e52:	2301      	moveq	r3, #1
 8007e54:	61a3      	streq	r3, [r4, #24]
 8007e56:	4620      	mov	r0, r4
 8007e58:	f000 f820 	bl	8007e9c <__sfp>
 8007e5c:	6060      	str	r0, [r4, #4]
 8007e5e:	4620      	mov	r0, r4
 8007e60:	f000 f81c 	bl	8007e9c <__sfp>
 8007e64:	60a0      	str	r0, [r4, #8]
 8007e66:	4620      	mov	r0, r4
 8007e68:	f000 f818 	bl	8007e9c <__sfp>
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	60e0      	str	r0, [r4, #12]
 8007e70:	2104      	movs	r1, #4
 8007e72:	6860      	ldr	r0, [r4, #4]
 8007e74:	f7ff ff82 	bl	8007d7c <std>
 8007e78:	68a0      	ldr	r0, [r4, #8]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	2109      	movs	r1, #9
 8007e7e:	f7ff ff7d 	bl	8007d7c <std>
 8007e82:	68e0      	ldr	r0, [r4, #12]
 8007e84:	2202      	movs	r2, #2
 8007e86:	2112      	movs	r1, #18
 8007e88:	f7ff ff78 	bl	8007d7c <std>
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	61a3      	str	r3, [r4, #24]
 8007e90:	e7d2      	b.n	8007e38 <__sinit+0xc>
 8007e92:	bf00      	nop
 8007e94:	080087a8 	.word	0x080087a8
 8007e98:	08007dc5 	.word	0x08007dc5

08007e9c <__sfp>:
 8007e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e9e:	4607      	mov	r7, r0
 8007ea0:	f7ff ffac 	bl	8007dfc <__sfp_lock_acquire>
 8007ea4:	4b1e      	ldr	r3, [pc, #120]	; (8007f20 <__sfp+0x84>)
 8007ea6:	681e      	ldr	r6, [r3, #0]
 8007ea8:	69b3      	ldr	r3, [r6, #24]
 8007eaa:	b913      	cbnz	r3, 8007eb2 <__sfp+0x16>
 8007eac:	4630      	mov	r0, r6
 8007eae:	f7ff ffbd 	bl	8007e2c <__sinit>
 8007eb2:	3648      	adds	r6, #72	; 0x48
 8007eb4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007eb8:	3b01      	subs	r3, #1
 8007eba:	d503      	bpl.n	8007ec4 <__sfp+0x28>
 8007ebc:	6833      	ldr	r3, [r6, #0]
 8007ebe:	b30b      	cbz	r3, 8007f04 <__sfp+0x68>
 8007ec0:	6836      	ldr	r6, [r6, #0]
 8007ec2:	e7f7      	b.n	8007eb4 <__sfp+0x18>
 8007ec4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007ec8:	b9d5      	cbnz	r5, 8007f00 <__sfp+0x64>
 8007eca:	4b16      	ldr	r3, [pc, #88]	; (8007f24 <__sfp+0x88>)
 8007ecc:	60e3      	str	r3, [r4, #12]
 8007ece:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007ed2:	6665      	str	r5, [r4, #100]	; 0x64
 8007ed4:	f000 f847 	bl	8007f66 <__retarget_lock_init_recursive>
 8007ed8:	f7ff ff96 	bl	8007e08 <__sfp_lock_release>
 8007edc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007ee0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007ee4:	6025      	str	r5, [r4, #0]
 8007ee6:	61a5      	str	r5, [r4, #24]
 8007ee8:	2208      	movs	r2, #8
 8007eea:	4629      	mov	r1, r5
 8007eec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007ef0:	f7fd faa8 	bl	8005444 <memset>
 8007ef4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007ef8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007efc:	4620      	mov	r0, r4
 8007efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f00:	3468      	adds	r4, #104	; 0x68
 8007f02:	e7d9      	b.n	8007eb8 <__sfp+0x1c>
 8007f04:	2104      	movs	r1, #4
 8007f06:	4638      	mov	r0, r7
 8007f08:	f7ff ff62 	bl	8007dd0 <__sfmoreglue>
 8007f0c:	4604      	mov	r4, r0
 8007f0e:	6030      	str	r0, [r6, #0]
 8007f10:	2800      	cmp	r0, #0
 8007f12:	d1d5      	bne.n	8007ec0 <__sfp+0x24>
 8007f14:	f7ff ff78 	bl	8007e08 <__sfp_lock_release>
 8007f18:	230c      	movs	r3, #12
 8007f1a:	603b      	str	r3, [r7, #0]
 8007f1c:	e7ee      	b.n	8007efc <__sfp+0x60>
 8007f1e:	bf00      	nop
 8007f20:	080087a8 	.word	0x080087a8
 8007f24:	ffff0001 	.word	0xffff0001

08007f28 <_fwalk_reent>:
 8007f28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f2c:	4606      	mov	r6, r0
 8007f2e:	4688      	mov	r8, r1
 8007f30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007f34:	2700      	movs	r7, #0
 8007f36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f3a:	f1b9 0901 	subs.w	r9, r9, #1
 8007f3e:	d505      	bpl.n	8007f4c <_fwalk_reent+0x24>
 8007f40:	6824      	ldr	r4, [r4, #0]
 8007f42:	2c00      	cmp	r4, #0
 8007f44:	d1f7      	bne.n	8007f36 <_fwalk_reent+0xe>
 8007f46:	4638      	mov	r0, r7
 8007f48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f4c:	89ab      	ldrh	r3, [r5, #12]
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	d907      	bls.n	8007f62 <_fwalk_reent+0x3a>
 8007f52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f56:	3301      	adds	r3, #1
 8007f58:	d003      	beq.n	8007f62 <_fwalk_reent+0x3a>
 8007f5a:	4629      	mov	r1, r5
 8007f5c:	4630      	mov	r0, r6
 8007f5e:	47c0      	blx	r8
 8007f60:	4307      	orrs	r7, r0
 8007f62:	3568      	adds	r5, #104	; 0x68
 8007f64:	e7e9      	b.n	8007f3a <_fwalk_reent+0x12>

08007f66 <__retarget_lock_init_recursive>:
 8007f66:	4770      	bx	lr

08007f68 <__retarget_lock_acquire_recursive>:
 8007f68:	4770      	bx	lr

08007f6a <__retarget_lock_release_recursive>:
 8007f6a:	4770      	bx	lr

08007f6c <__swhatbuf_r>:
 8007f6c:	b570      	push	{r4, r5, r6, lr}
 8007f6e:	460e      	mov	r6, r1
 8007f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f74:	2900      	cmp	r1, #0
 8007f76:	b096      	sub	sp, #88	; 0x58
 8007f78:	4614      	mov	r4, r2
 8007f7a:	461d      	mov	r5, r3
 8007f7c:	da08      	bge.n	8007f90 <__swhatbuf_r+0x24>
 8007f7e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007f82:	2200      	movs	r2, #0
 8007f84:	602a      	str	r2, [r5, #0]
 8007f86:	061a      	lsls	r2, r3, #24
 8007f88:	d410      	bmi.n	8007fac <__swhatbuf_r+0x40>
 8007f8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f8e:	e00e      	b.n	8007fae <__swhatbuf_r+0x42>
 8007f90:	466a      	mov	r2, sp
 8007f92:	f000 f903 	bl	800819c <_fstat_r>
 8007f96:	2800      	cmp	r0, #0
 8007f98:	dbf1      	blt.n	8007f7e <__swhatbuf_r+0x12>
 8007f9a:	9a01      	ldr	r2, [sp, #4]
 8007f9c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007fa0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007fa4:	425a      	negs	r2, r3
 8007fa6:	415a      	adcs	r2, r3
 8007fa8:	602a      	str	r2, [r5, #0]
 8007faa:	e7ee      	b.n	8007f8a <__swhatbuf_r+0x1e>
 8007fac:	2340      	movs	r3, #64	; 0x40
 8007fae:	2000      	movs	r0, #0
 8007fb0:	6023      	str	r3, [r4, #0]
 8007fb2:	b016      	add	sp, #88	; 0x58
 8007fb4:	bd70      	pop	{r4, r5, r6, pc}
	...

08007fb8 <__smakebuf_r>:
 8007fb8:	898b      	ldrh	r3, [r1, #12]
 8007fba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007fbc:	079d      	lsls	r5, r3, #30
 8007fbe:	4606      	mov	r6, r0
 8007fc0:	460c      	mov	r4, r1
 8007fc2:	d507      	bpl.n	8007fd4 <__smakebuf_r+0x1c>
 8007fc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007fc8:	6023      	str	r3, [r4, #0]
 8007fca:	6123      	str	r3, [r4, #16]
 8007fcc:	2301      	movs	r3, #1
 8007fce:	6163      	str	r3, [r4, #20]
 8007fd0:	b002      	add	sp, #8
 8007fd2:	bd70      	pop	{r4, r5, r6, pc}
 8007fd4:	ab01      	add	r3, sp, #4
 8007fd6:	466a      	mov	r2, sp
 8007fd8:	f7ff ffc8 	bl	8007f6c <__swhatbuf_r>
 8007fdc:	9900      	ldr	r1, [sp, #0]
 8007fde:	4605      	mov	r5, r0
 8007fe0:	4630      	mov	r0, r6
 8007fe2:	f7ff f963 	bl	80072ac <_malloc_r>
 8007fe6:	b948      	cbnz	r0, 8007ffc <__smakebuf_r+0x44>
 8007fe8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fec:	059a      	lsls	r2, r3, #22
 8007fee:	d4ef      	bmi.n	8007fd0 <__smakebuf_r+0x18>
 8007ff0:	f023 0303 	bic.w	r3, r3, #3
 8007ff4:	f043 0302 	orr.w	r3, r3, #2
 8007ff8:	81a3      	strh	r3, [r4, #12]
 8007ffa:	e7e3      	b.n	8007fc4 <__smakebuf_r+0xc>
 8007ffc:	4b0d      	ldr	r3, [pc, #52]	; (8008034 <__smakebuf_r+0x7c>)
 8007ffe:	62b3      	str	r3, [r6, #40]	; 0x28
 8008000:	89a3      	ldrh	r3, [r4, #12]
 8008002:	6020      	str	r0, [r4, #0]
 8008004:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008008:	81a3      	strh	r3, [r4, #12]
 800800a:	9b00      	ldr	r3, [sp, #0]
 800800c:	6163      	str	r3, [r4, #20]
 800800e:	9b01      	ldr	r3, [sp, #4]
 8008010:	6120      	str	r0, [r4, #16]
 8008012:	b15b      	cbz	r3, 800802c <__smakebuf_r+0x74>
 8008014:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008018:	4630      	mov	r0, r6
 800801a:	f000 f8d1 	bl	80081c0 <_isatty_r>
 800801e:	b128      	cbz	r0, 800802c <__smakebuf_r+0x74>
 8008020:	89a3      	ldrh	r3, [r4, #12]
 8008022:	f023 0303 	bic.w	r3, r3, #3
 8008026:	f043 0301 	orr.w	r3, r3, #1
 800802a:	81a3      	strh	r3, [r4, #12]
 800802c:	89a0      	ldrh	r0, [r4, #12]
 800802e:	4305      	orrs	r5, r0
 8008030:	81a5      	strh	r5, [r4, #12]
 8008032:	e7cd      	b.n	8007fd0 <__smakebuf_r+0x18>
 8008034:	08007dc5 	.word	0x08007dc5

08008038 <_malloc_usable_size_r>:
 8008038:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800803c:	1f18      	subs	r0, r3, #4
 800803e:	2b00      	cmp	r3, #0
 8008040:	bfbc      	itt	lt
 8008042:	580b      	ldrlt	r3, [r1, r0]
 8008044:	18c0      	addlt	r0, r0, r3
 8008046:	4770      	bx	lr

08008048 <_raise_r>:
 8008048:	291f      	cmp	r1, #31
 800804a:	b538      	push	{r3, r4, r5, lr}
 800804c:	4604      	mov	r4, r0
 800804e:	460d      	mov	r5, r1
 8008050:	d904      	bls.n	800805c <_raise_r+0x14>
 8008052:	2316      	movs	r3, #22
 8008054:	6003      	str	r3, [r0, #0]
 8008056:	f04f 30ff 	mov.w	r0, #4294967295
 800805a:	bd38      	pop	{r3, r4, r5, pc}
 800805c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800805e:	b112      	cbz	r2, 8008066 <_raise_r+0x1e>
 8008060:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008064:	b94b      	cbnz	r3, 800807a <_raise_r+0x32>
 8008066:	4620      	mov	r0, r4
 8008068:	f000 f830 	bl	80080cc <_getpid_r>
 800806c:	462a      	mov	r2, r5
 800806e:	4601      	mov	r1, r0
 8008070:	4620      	mov	r0, r4
 8008072:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008076:	f000 b817 	b.w	80080a8 <_kill_r>
 800807a:	2b01      	cmp	r3, #1
 800807c:	d00a      	beq.n	8008094 <_raise_r+0x4c>
 800807e:	1c59      	adds	r1, r3, #1
 8008080:	d103      	bne.n	800808a <_raise_r+0x42>
 8008082:	2316      	movs	r3, #22
 8008084:	6003      	str	r3, [r0, #0]
 8008086:	2001      	movs	r0, #1
 8008088:	e7e7      	b.n	800805a <_raise_r+0x12>
 800808a:	2400      	movs	r4, #0
 800808c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008090:	4628      	mov	r0, r5
 8008092:	4798      	blx	r3
 8008094:	2000      	movs	r0, #0
 8008096:	e7e0      	b.n	800805a <_raise_r+0x12>

08008098 <raise>:
 8008098:	4b02      	ldr	r3, [pc, #8]	; (80080a4 <raise+0xc>)
 800809a:	4601      	mov	r1, r0
 800809c:	6818      	ldr	r0, [r3, #0]
 800809e:	f7ff bfd3 	b.w	8008048 <_raise_r>
 80080a2:	bf00      	nop
 80080a4:	20000010 	.word	0x20000010

080080a8 <_kill_r>:
 80080a8:	b538      	push	{r3, r4, r5, lr}
 80080aa:	4d07      	ldr	r5, [pc, #28]	; (80080c8 <_kill_r+0x20>)
 80080ac:	2300      	movs	r3, #0
 80080ae:	4604      	mov	r4, r0
 80080b0:	4608      	mov	r0, r1
 80080b2:	4611      	mov	r1, r2
 80080b4:	602b      	str	r3, [r5, #0]
 80080b6:	f7f9 fedd 	bl	8001e74 <_kill>
 80080ba:	1c43      	adds	r3, r0, #1
 80080bc:	d102      	bne.n	80080c4 <_kill_r+0x1c>
 80080be:	682b      	ldr	r3, [r5, #0]
 80080c0:	b103      	cbz	r3, 80080c4 <_kill_r+0x1c>
 80080c2:	6023      	str	r3, [r4, #0]
 80080c4:	bd38      	pop	{r3, r4, r5, pc}
 80080c6:	bf00      	nop
 80080c8:	20000350 	.word	0x20000350

080080cc <_getpid_r>:
 80080cc:	f7f9 beca 	b.w	8001e64 <_getpid>

080080d0 <__sread>:
 80080d0:	b510      	push	{r4, lr}
 80080d2:	460c      	mov	r4, r1
 80080d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080d8:	f000 f894 	bl	8008204 <_read_r>
 80080dc:	2800      	cmp	r0, #0
 80080de:	bfab      	itete	ge
 80080e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80080e2:	89a3      	ldrhlt	r3, [r4, #12]
 80080e4:	181b      	addge	r3, r3, r0
 80080e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80080ea:	bfac      	ite	ge
 80080ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80080ee:	81a3      	strhlt	r3, [r4, #12]
 80080f0:	bd10      	pop	{r4, pc}

080080f2 <__swrite>:
 80080f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080f6:	461f      	mov	r7, r3
 80080f8:	898b      	ldrh	r3, [r1, #12]
 80080fa:	05db      	lsls	r3, r3, #23
 80080fc:	4605      	mov	r5, r0
 80080fe:	460c      	mov	r4, r1
 8008100:	4616      	mov	r6, r2
 8008102:	d505      	bpl.n	8008110 <__swrite+0x1e>
 8008104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008108:	2302      	movs	r3, #2
 800810a:	2200      	movs	r2, #0
 800810c:	f000 f868 	bl	80081e0 <_lseek_r>
 8008110:	89a3      	ldrh	r3, [r4, #12]
 8008112:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008116:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800811a:	81a3      	strh	r3, [r4, #12]
 800811c:	4632      	mov	r2, r6
 800811e:	463b      	mov	r3, r7
 8008120:	4628      	mov	r0, r5
 8008122:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008126:	f000 b817 	b.w	8008158 <_write_r>

0800812a <__sseek>:
 800812a:	b510      	push	{r4, lr}
 800812c:	460c      	mov	r4, r1
 800812e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008132:	f000 f855 	bl	80081e0 <_lseek_r>
 8008136:	1c43      	adds	r3, r0, #1
 8008138:	89a3      	ldrh	r3, [r4, #12]
 800813a:	bf15      	itete	ne
 800813c:	6560      	strne	r0, [r4, #84]	; 0x54
 800813e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008142:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008146:	81a3      	strheq	r3, [r4, #12]
 8008148:	bf18      	it	ne
 800814a:	81a3      	strhne	r3, [r4, #12]
 800814c:	bd10      	pop	{r4, pc}

0800814e <__sclose>:
 800814e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008152:	f000 b813 	b.w	800817c <_close_r>
	...

08008158 <_write_r>:
 8008158:	b538      	push	{r3, r4, r5, lr}
 800815a:	4d07      	ldr	r5, [pc, #28]	; (8008178 <_write_r+0x20>)
 800815c:	4604      	mov	r4, r0
 800815e:	4608      	mov	r0, r1
 8008160:	4611      	mov	r1, r2
 8008162:	2200      	movs	r2, #0
 8008164:	602a      	str	r2, [r5, #0]
 8008166:	461a      	mov	r2, r3
 8008168:	f7f9 febb 	bl	8001ee2 <_write>
 800816c:	1c43      	adds	r3, r0, #1
 800816e:	d102      	bne.n	8008176 <_write_r+0x1e>
 8008170:	682b      	ldr	r3, [r5, #0]
 8008172:	b103      	cbz	r3, 8008176 <_write_r+0x1e>
 8008174:	6023      	str	r3, [r4, #0]
 8008176:	bd38      	pop	{r3, r4, r5, pc}
 8008178:	20000350 	.word	0x20000350

0800817c <_close_r>:
 800817c:	b538      	push	{r3, r4, r5, lr}
 800817e:	4d06      	ldr	r5, [pc, #24]	; (8008198 <_close_r+0x1c>)
 8008180:	2300      	movs	r3, #0
 8008182:	4604      	mov	r4, r0
 8008184:	4608      	mov	r0, r1
 8008186:	602b      	str	r3, [r5, #0]
 8008188:	f7f9 fec7 	bl	8001f1a <_close>
 800818c:	1c43      	adds	r3, r0, #1
 800818e:	d102      	bne.n	8008196 <_close_r+0x1a>
 8008190:	682b      	ldr	r3, [r5, #0]
 8008192:	b103      	cbz	r3, 8008196 <_close_r+0x1a>
 8008194:	6023      	str	r3, [r4, #0]
 8008196:	bd38      	pop	{r3, r4, r5, pc}
 8008198:	20000350 	.word	0x20000350

0800819c <_fstat_r>:
 800819c:	b538      	push	{r3, r4, r5, lr}
 800819e:	4d07      	ldr	r5, [pc, #28]	; (80081bc <_fstat_r+0x20>)
 80081a0:	2300      	movs	r3, #0
 80081a2:	4604      	mov	r4, r0
 80081a4:	4608      	mov	r0, r1
 80081a6:	4611      	mov	r1, r2
 80081a8:	602b      	str	r3, [r5, #0]
 80081aa:	f7f9 fec2 	bl	8001f32 <_fstat>
 80081ae:	1c43      	adds	r3, r0, #1
 80081b0:	d102      	bne.n	80081b8 <_fstat_r+0x1c>
 80081b2:	682b      	ldr	r3, [r5, #0]
 80081b4:	b103      	cbz	r3, 80081b8 <_fstat_r+0x1c>
 80081b6:	6023      	str	r3, [r4, #0]
 80081b8:	bd38      	pop	{r3, r4, r5, pc}
 80081ba:	bf00      	nop
 80081bc:	20000350 	.word	0x20000350

080081c0 <_isatty_r>:
 80081c0:	b538      	push	{r3, r4, r5, lr}
 80081c2:	4d06      	ldr	r5, [pc, #24]	; (80081dc <_isatty_r+0x1c>)
 80081c4:	2300      	movs	r3, #0
 80081c6:	4604      	mov	r4, r0
 80081c8:	4608      	mov	r0, r1
 80081ca:	602b      	str	r3, [r5, #0]
 80081cc:	f7f9 fec1 	bl	8001f52 <_isatty>
 80081d0:	1c43      	adds	r3, r0, #1
 80081d2:	d102      	bne.n	80081da <_isatty_r+0x1a>
 80081d4:	682b      	ldr	r3, [r5, #0]
 80081d6:	b103      	cbz	r3, 80081da <_isatty_r+0x1a>
 80081d8:	6023      	str	r3, [r4, #0]
 80081da:	bd38      	pop	{r3, r4, r5, pc}
 80081dc:	20000350 	.word	0x20000350

080081e0 <_lseek_r>:
 80081e0:	b538      	push	{r3, r4, r5, lr}
 80081e2:	4d07      	ldr	r5, [pc, #28]	; (8008200 <_lseek_r+0x20>)
 80081e4:	4604      	mov	r4, r0
 80081e6:	4608      	mov	r0, r1
 80081e8:	4611      	mov	r1, r2
 80081ea:	2200      	movs	r2, #0
 80081ec:	602a      	str	r2, [r5, #0]
 80081ee:	461a      	mov	r2, r3
 80081f0:	f7f9 feba 	bl	8001f68 <_lseek>
 80081f4:	1c43      	adds	r3, r0, #1
 80081f6:	d102      	bne.n	80081fe <_lseek_r+0x1e>
 80081f8:	682b      	ldr	r3, [r5, #0]
 80081fa:	b103      	cbz	r3, 80081fe <_lseek_r+0x1e>
 80081fc:	6023      	str	r3, [r4, #0]
 80081fe:	bd38      	pop	{r3, r4, r5, pc}
 8008200:	20000350 	.word	0x20000350

08008204 <_read_r>:
 8008204:	b538      	push	{r3, r4, r5, lr}
 8008206:	4d07      	ldr	r5, [pc, #28]	; (8008224 <_read_r+0x20>)
 8008208:	4604      	mov	r4, r0
 800820a:	4608      	mov	r0, r1
 800820c:	4611      	mov	r1, r2
 800820e:	2200      	movs	r2, #0
 8008210:	602a      	str	r2, [r5, #0]
 8008212:	461a      	mov	r2, r3
 8008214:	f7f9 fe48 	bl	8001ea8 <_read>
 8008218:	1c43      	adds	r3, r0, #1
 800821a:	d102      	bne.n	8008222 <_read_r+0x1e>
 800821c:	682b      	ldr	r3, [r5, #0]
 800821e:	b103      	cbz	r3, 8008222 <_read_r+0x1e>
 8008220:	6023      	str	r3, [r4, #0]
 8008222:	bd38      	pop	{r3, r4, r5, pc}
 8008224:	20000350 	.word	0x20000350

08008228 <atan2>:
 8008228:	f000 b802 	b.w	8008230 <__ieee754_atan2>
 800822c:	0000      	movs	r0, r0
	...

08008230 <__ieee754_atan2>:
 8008230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008234:	ec57 6b11 	vmov	r6, r7, d1
 8008238:	4273      	negs	r3, r6
 800823a:	f8df e184 	ldr.w	lr, [pc, #388]	; 80083c0 <__ieee754_atan2+0x190>
 800823e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8008242:	4333      	orrs	r3, r6
 8008244:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008248:	4573      	cmp	r3, lr
 800824a:	ec51 0b10 	vmov	r0, r1, d0
 800824e:	ee11 8a10 	vmov	r8, s2
 8008252:	d80a      	bhi.n	800826a <__ieee754_atan2+0x3a>
 8008254:	4244      	negs	r4, r0
 8008256:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800825a:	4304      	orrs	r4, r0
 800825c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008260:	4574      	cmp	r4, lr
 8008262:	ee10 9a10 	vmov	r9, s0
 8008266:	468c      	mov	ip, r1
 8008268:	d907      	bls.n	800827a <__ieee754_atan2+0x4a>
 800826a:	4632      	mov	r2, r6
 800826c:	463b      	mov	r3, r7
 800826e:	f7f8 f80d 	bl	800028c <__adddf3>
 8008272:	ec41 0b10 	vmov	d0, r0, r1
 8008276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800827a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800827e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008282:	4334      	orrs	r4, r6
 8008284:	d103      	bne.n	800828e <__ieee754_atan2+0x5e>
 8008286:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800828a:	f000 b89d 	b.w	80083c8 <atan>
 800828e:	17bc      	asrs	r4, r7, #30
 8008290:	f004 0402 	and.w	r4, r4, #2
 8008294:	ea53 0909 	orrs.w	r9, r3, r9
 8008298:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800829c:	d107      	bne.n	80082ae <__ieee754_atan2+0x7e>
 800829e:	2c02      	cmp	r4, #2
 80082a0:	d060      	beq.n	8008364 <__ieee754_atan2+0x134>
 80082a2:	2c03      	cmp	r4, #3
 80082a4:	d1e5      	bne.n	8008272 <__ieee754_atan2+0x42>
 80082a6:	a142      	add	r1, pc, #264	; (adr r1, 80083b0 <__ieee754_atan2+0x180>)
 80082a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082ac:	e7e1      	b.n	8008272 <__ieee754_atan2+0x42>
 80082ae:	ea52 0808 	orrs.w	r8, r2, r8
 80082b2:	d106      	bne.n	80082c2 <__ieee754_atan2+0x92>
 80082b4:	f1bc 0f00 	cmp.w	ip, #0
 80082b8:	da5f      	bge.n	800837a <__ieee754_atan2+0x14a>
 80082ba:	a13f      	add	r1, pc, #252	; (adr r1, 80083b8 <__ieee754_atan2+0x188>)
 80082bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082c0:	e7d7      	b.n	8008272 <__ieee754_atan2+0x42>
 80082c2:	4572      	cmp	r2, lr
 80082c4:	d10f      	bne.n	80082e6 <__ieee754_atan2+0xb6>
 80082c6:	4293      	cmp	r3, r2
 80082c8:	f104 34ff 	add.w	r4, r4, #4294967295
 80082cc:	d107      	bne.n	80082de <__ieee754_atan2+0xae>
 80082ce:	2c02      	cmp	r4, #2
 80082d0:	d84c      	bhi.n	800836c <__ieee754_atan2+0x13c>
 80082d2:	4b35      	ldr	r3, [pc, #212]	; (80083a8 <__ieee754_atan2+0x178>)
 80082d4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80082d8:	e9d4 0100 	ldrd	r0, r1, [r4]
 80082dc:	e7c9      	b.n	8008272 <__ieee754_atan2+0x42>
 80082de:	2c02      	cmp	r4, #2
 80082e0:	d848      	bhi.n	8008374 <__ieee754_atan2+0x144>
 80082e2:	4b32      	ldr	r3, [pc, #200]	; (80083ac <__ieee754_atan2+0x17c>)
 80082e4:	e7f6      	b.n	80082d4 <__ieee754_atan2+0xa4>
 80082e6:	4573      	cmp	r3, lr
 80082e8:	d0e4      	beq.n	80082b4 <__ieee754_atan2+0x84>
 80082ea:	1a9b      	subs	r3, r3, r2
 80082ec:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80082f0:	ea4f 5223 	mov.w	r2, r3, asr #20
 80082f4:	da1e      	bge.n	8008334 <__ieee754_atan2+0x104>
 80082f6:	2f00      	cmp	r7, #0
 80082f8:	da01      	bge.n	80082fe <__ieee754_atan2+0xce>
 80082fa:	323c      	adds	r2, #60	; 0x3c
 80082fc:	db1e      	blt.n	800833c <__ieee754_atan2+0x10c>
 80082fe:	4632      	mov	r2, r6
 8008300:	463b      	mov	r3, r7
 8008302:	f7f8 faa3 	bl	800084c <__aeabi_ddiv>
 8008306:	ec41 0b10 	vmov	d0, r0, r1
 800830a:	f000 f9fd 	bl	8008708 <fabs>
 800830e:	f000 f85b 	bl	80083c8 <atan>
 8008312:	ec51 0b10 	vmov	r0, r1, d0
 8008316:	2c01      	cmp	r4, #1
 8008318:	d013      	beq.n	8008342 <__ieee754_atan2+0x112>
 800831a:	2c02      	cmp	r4, #2
 800831c:	d015      	beq.n	800834a <__ieee754_atan2+0x11a>
 800831e:	2c00      	cmp	r4, #0
 8008320:	d0a7      	beq.n	8008272 <__ieee754_atan2+0x42>
 8008322:	a319      	add	r3, pc, #100	; (adr r3, 8008388 <__ieee754_atan2+0x158>)
 8008324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008328:	f7f7 ffae 	bl	8000288 <__aeabi_dsub>
 800832c:	a318      	add	r3, pc, #96	; (adr r3, 8008390 <__ieee754_atan2+0x160>)
 800832e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008332:	e014      	b.n	800835e <__ieee754_atan2+0x12e>
 8008334:	a118      	add	r1, pc, #96	; (adr r1, 8008398 <__ieee754_atan2+0x168>)
 8008336:	e9d1 0100 	ldrd	r0, r1, [r1]
 800833a:	e7ec      	b.n	8008316 <__ieee754_atan2+0xe6>
 800833c:	2000      	movs	r0, #0
 800833e:	2100      	movs	r1, #0
 8008340:	e7e9      	b.n	8008316 <__ieee754_atan2+0xe6>
 8008342:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008346:	4619      	mov	r1, r3
 8008348:	e793      	b.n	8008272 <__ieee754_atan2+0x42>
 800834a:	a30f      	add	r3, pc, #60	; (adr r3, 8008388 <__ieee754_atan2+0x158>)
 800834c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008350:	f7f7 ff9a 	bl	8000288 <__aeabi_dsub>
 8008354:	4602      	mov	r2, r0
 8008356:	460b      	mov	r3, r1
 8008358:	a10d      	add	r1, pc, #52	; (adr r1, 8008390 <__ieee754_atan2+0x160>)
 800835a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800835e:	f7f7 ff93 	bl	8000288 <__aeabi_dsub>
 8008362:	e786      	b.n	8008272 <__ieee754_atan2+0x42>
 8008364:	a10a      	add	r1, pc, #40	; (adr r1, 8008390 <__ieee754_atan2+0x160>)
 8008366:	e9d1 0100 	ldrd	r0, r1, [r1]
 800836a:	e782      	b.n	8008272 <__ieee754_atan2+0x42>
 800836c:	a10c      	add	r1, pc, #48	; (adr r1, 80083a0 <__ieee754_atan2+0x170>)
 800836e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008372:	e77e      	b.n	8008272 <__ieee754_atan2+0x42>
 8008374:	2000      	movs	r0, #0
 8008376:	2100      	movs	r1, #0
 8008378:	e77b      	b.n	8008272 <__ieee754_atan2+0x42>
 800837a:	a107      	add	r1, pc, #28	; (adr r1, 8008398 <__ieee754_atan2+0x168>)
 800837c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008380:	e777      	b.n	8008272 <__ieee754_atan2+0x42>
 8008382:	bf00      	nop
 8008384:	f3af 8000 	nop.w
 8008388:	33145c07 	.word	0x33145c07
 800838c:	3ca1a626 	.word	0x3ca1a626
 8008390:	54442d18 	.word	0x54442d18
 8008394:	400921fb 	.word	0x400921fb
 8008398:	54442d18 	.word	0x54442d18
 800839c:	3ff921fb 	.word	0x3ff921fb
 80083a0:	54442d18 	.word	0x54442d18
 80083a4:	3fe921fb 	.word	0x3fe921fb
 80083a8:	08008b88 	.word	0x08008b88
 80083ac:	08008ba0 	.word	0x08008ba0
 80083b0:	54442d18 	.word	0x54442d18
 80083b4:	c00921fb 	.word	0xc00921fb
 80083b8:	54442d18 	.word	0x54442d18
 80083bc:	bff921fb 	.word	0xbff921fb
 80083c0:	7ff00000 	.word	0x7ff00000
 80083c4:	00000000 	.word	0x00000000

080083c8 <atan>:
 80083c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083cc:	ec55 4b10 	vmov	r4, r5, d0
 80083d0:	4bc3      	ldr	r3, [pc, #780]	; (80086e0 <atan+0x318>)
 80083d2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80083d6:	429e      	cmp	r6, r3
 80083d8:	46ab      	mov	fp, r5
 80083da:	dd18      	ble.n	800840e <atan+0x46>
 80083dc:	4bc1      	ldr	r3, [pc, #772]	; (80086e4 <atan+0x31c>)
 80083de:	429e      	cmp	r6, r3
 80083e0:	dc01      	bgt.n	80083e6 <atan+0x1e>
 80083e2:	d109      	bne.n	80083f8 <atan+0x30>
 80083e4:	b144      	cbz	r4, 80083f8 <atan+0x30>
 80083e6:	4622      	mov	r2, r4
 80083e8:	462b      	mov	r3, r5
 80083ea:	4620      	mov	r0, r4
 80083ec:	4629      	mov	r1, r5
 80083ee:	f7f7 ff4d 	bl	800028c <__adddf3>
 80083f2:	4604      	mov	r4, r0
 80083f4:	460d      	mov	r5, r1
 80083f6:	e006      	b.n	8008406 <atan+0x3e>
 80083f8:	f1bb 0f00 	cmp.w	fp, #0
 80083fc:	f300 8131 	bgt.w	8008662 <atan+0x29a>
 8008400:	a59b      	add	r5, pc, #620	; (adr r5, 8008670 <atan+0x2a8>)
 8008402:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008406:	ec45 4b10 	vmov	d0, r4, r5
 800840a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800840e:	4bb6      	ldr	r3, [pc, #728]	; (80086e8 <atan+0x320>)
 8008410:	429e      	cmp	r6, r3
 8008412:	dc14      	bgt.n	800843e <atan+0x76>
 8008414:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8008418:	429e      	cmp	r6, r3
 800841a:	dc0d      	bgt.n	8008438 <atan+0x70>
 800841c:	a396      	add	r3, pc, #600	; (adr r3, 8008678 <atan+0x2b0>)
 800841e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008422:	ee10 0a10 	vmov	r0, s0
 8008426:	4629      	mov	r1, r5
 8008428:	f7f7 ff30 	bl	800028c <__adddf3>
 800842c:	4baf      	ldr	r3, [pc, #700]	; (80086ec <atan+0x324>)
 800842e:	2200      	movs	r2, #0
 8008430:	f7f8 fb72 	bl	8000b18 <__aeabi_dcmpgt>
 8008434:	2800      	cmp	r0, #0
 8008436:	d1e6      	bne.n	8008406 <atan+0x3e>
 8008438:	f04f 3aff 	mov.w	sl, #4294967295
 800843c:	e02b      	b.n	8008496 <atan+0xce>
 800843e:	f000 f963 	bl	8008708 <fabs>
 8008442:	4bab      	ldr	r3, [pc, #684]	; (80086f0 <atan+0x328>)
 8008444:	429e      	cmp	r6, r3
 8008446:	ec55 4b10 	vmov	r4, r5, d0
 800844a:	f300 80bf 	bgt.w	80085cc <atan+0x204>
 800844e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8008452:	429e      	cmp	r6, r3
 8008454:	f300 80a0 	bgt.w	8008598 <atan+0x1d0>
 8008458:	ee10 2a10 	vmov	r2, s0
 800845c:	ee10 0a10 	vmov	r0, s0
 8008460:	462b      	mov	r3, r5
 8008462:	4629      	mov	r1, r5
 8008464:	f7f7 ff12 	bl	800028c <__adddf3>
 8008468:	4ba0      	ldr	r3, [pc, #640]	; (80086ec <atan+0x324>)
 800846a:	2200      	movs	r2, #0
 800846c:	f7f7 ff0c 	bl	8000288 <__aeabi_dsub>
 8008470:	2200      	movs	r2, #0
 8008472:	4606      	mov	r6, r0
 8008474:	460f      	mov	r7, r1
 8008476:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800847a:	4620      	mov	r0, r4
 800847c:	4629      	mov	r1, r5
 800847e:	f7f7 ff05 	bl	800028c <__adddf3>
 8008482:	4602      	mov	r2, r0
 8008484:	460b      	mov	r3, r1
 8008486:	4630      	mov	r0, r6
 8008488:	4639      	mov	r1, r7
 800848a:	f7f8 f9df 	bl	800084c <__aeabi_ddiv>
 800848e:	f04f 0a00 	mov.w	sl, #0
 8008492:	4604      	mov	r4, r0
 8008494:	460d      	mov	r5, r1
 8008496:	4622      	mov	r2, r4
 8008498:	462b      	mov	r3, r5
 800849a:	4620      	mov	r0, r4
 800849c:	4629      	mov	r1, r5
 800849e:	f7f8 f8ab 	bl	80005f8 <__aeabi_dmul>
 80084a2:	4602      	mov	r2, r0
 80084a4:	460b      	mov	r3, r1
 80084a6:	4680      	mov	r8, r0
 80084a8:	4689      	mov	r9, r1
 80084aa:	f7f8 f8a5 	bl	80005f8 <__aeabi_dmul>
 80084ae:	a374      	add	r3, pc, #464	; (adr r3, 8008680 <atan+0x2b8>)
 80084b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b4:	4606      	mov	r6, r0
 80084b6:	460f      	mov	r7, r1
 80084b8:	f7f8 f89e 	bl	80005f8 <__aeabi_dmul>
 80084bc:	a372      	add	r3, pc, #456	; (adr r3, 8008688 <atan+0x2c0>)
 80084be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c2:	f7f7 fee3 	bl	800028c <__adddf3>
 80084c6:	4632      	mov	r2, r6
 80084c8:	463b      	mov	r3, r7
 80084ca:	f7f8 f895 	bl	80005f8 <__aeabi_dmul>
 80084ce:	a370      	add	r3, pc, #448	; (adr r3, 8008690 <atan+0x2c8>)
 80084d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d4:	f7f7 feda 	bl	800028c <__adddf3>
 80084d8:	4632      	mov	r2, r6
 80084da:	463b      	mov	r3, r7
 80084dc:	f7f8 f88c 	bl	80005f8 <__aeabi_dmul>
 80084e0:	a36d      	add	r3, pc, #436	; (adr r3, 8008698 <atan+0x2d0>)
 80084e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e6:	f7f7 fed1 	bl	800028c <__adddf3>
 80084ea:	4632      	mov	r2, r6
 80084ec:	463b      	mov	r3, r7
 80084ee:	f7f8 f883 	bl	80005f8 <__aeabi_dmul>
 80084f2:	a36b      	add	r3, pc, #428	; (adr r3, 80086a0 <atan+0x2d8>)
 80084f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f8:	f7f7 fec8 	bl	800028c <__adddf3>
 80084fc:	4632      	mov	r2, r6
 80084fe:	463b      	mov	r3, r7
 8008500:	f7f8 f87a 	bl	80005f8 <__aeabi_dmul>
 8008504:	a368      	add	r3, pc, #416	; (adr r3, 80086a8 <atan+0x2e0>)
 8008506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800850a:	f7f7 febf 	bl	800028c <__adddf3>
 800850e:	4642      	mov	r2, r8
 8008510:	464b      	mov	r3, r9
 8008512:	f7f8 f871 	bl	80005f8 <__aeabi_dmul>
 8008516:	a366      	add	r3, pc, #408	; (adr r3, 80086b0 <atan+0x2e8>)
 8008518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800851c:	4680      	mov	r8, r0
 800851e:	4689      	mov	r9, r1
 8008520:	4630      	mov	r0, r6
 8008522:	4639      	mov	r1, r7
 8008524:	f7f8 f868 	bl	80005f8 <__aeabi_dmul>
 8008528:	a363      	add	r3, pc, #396	; (adr r3, 80086b8 <atan+0x2f0>)
 800852a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800852e:	f7f7 feab 	bl	8000288 <__aeabi_dsub>
 8008532:	4632      	mov	r2, r6
 8008534:	463b      	mov	r3, r7
 8008536:	f7f8 f85f 	bl	80005f8 <__aeabi_dmul>
 800853a:	a361      	add	r3, pc, #388	; (adr r3, 80086c0 <atan+0x2f8>)
 800853c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008540:	f7f7 fea2 	bl	8000288 <__aeabi_dsub>
 8008544:	4632      	mov	r2, r6
 8008546:	463b      	mov	r3, r7
 8008548:	f7f8 f856 	bl	80005f8 <__aeabi_dmul>
 800854c:	a35e      	add	r3, pc, #376	; (adr r3, 80086c8 <atan+0x300>)
 800854e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008552:	f7f7 fe99 	bl	8000288 <__aeabi_dsub>
 8008556:	4632      	mov	r2, r6
 8008558:	463b      	mov	r3, r7
 800855a:	f7f8 f84d 	bl	80005f8 <__aeabi_dmul>
 800855e:	a35c      	add	r3, pc, #368	; (adr r3, 80086d0 <atan+0x308>)
 8008560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008564:	f7f7 fe90 	bl	8000288 <__aeabi_dsub>
 8008568:	4632      	mov	r2, r6
 800856a:	463b      	mov	r3, r7
 800856c:	f7f8 f844 	bl	80005f8 <__aeabi_dmul>
 8008570:	4602      	mov	r2, r0
 8008572:	460b      	mov	r3, r1
 8008574:	4640      	mov	r0, r8
 8008576:	4649      	mov	r1, r9
 8008578:	f7f7 fe88 	bl	800028c <__adddf3>
 800857c:	4622      	mov	r2, r4
 800857e:	462b      	mov	r3, r5
 8008580:	f7f8 f83a 	bl	80005f8 <__aeabi_dmul>
 8008584:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008588:	4602      	mov	r2, r0
 800858a:	460b      	mov	r3, r1
 800858c:	d14b      	bne.n	8008626 <atan+0x25e>
 800858e:	4620      	mov	r0, r4
 8008590:	4629      	mov	r1, r5
 8008592:	f7f7 fe79 	bl	8000288 <__aeabi_dsub>
 8008596:	e72c      	b.n	80083f2 <atan+0x2a>
 8008598:	ee10 0a10 	vmov	r0, s0
 800859c:	4b53      	ldr	r3, [pc, #332]	; (80086ec <atan+0x324>)
 800859e:	2200      	movs	r2, #0
 80085a0:	4629      	mov	r1, r5
 80085a2:	f7f7 fe71 	bl	8000288 <__aeabi_dsub>
 80085a6:	4b51      	ldr	r3, [pc, #324]	; (80086ec <atan+0x324>)
 80085a8:	4606      	mov	r6, r0
 80085aa:	460f      	mov	r7, r1
 80085ac:	2200      	movs	r2, #0
 80085ae:	4620      	mov	r0, r4
 80085b0:	4629      	mov	r1, r5
 80085b2:	f7f7 fe6b 	bl	800028c <__adddf3>
 80085b6:	4602      	mov	r2, r0
 80085b8:	460b      	mov	r3, r1
 80085ba:	4630      	mov	r0, r6
 80085bc:	4639      	mov	r1, r7
 80085be:	f7f8 f945 	bl	800084c <__aeabi_ddiv>
 80085c2:	f04f 0a01 	mov.w	sl, #1
 80085c6:	4604      	mov	r4, r0
 80085c8:	460d      	mov	r5, r1
 80085ca:	e764      	b.n	8008496 <atan+0xce>
 80085cc:	4b49      	ldr	r3, [pc, #292]	; (80086f4 <atan+0x32c>)
 80085ce:	429e      	cmp	r6, r3
 80085d0:	da1d      	bge.n	800860e <atan+0x246>
 80085d2:	ee10 0a10 	vmov	r0, s0
 80085d6:	4b48      	ldr	r3, [pc, #288]	; (80086f8 <atan+0x330>)
 80085d8:	2200      	movs	r2, #0
 80085da:	4629      	mov	r1, r5
 80085dc:	f7f7 fe54 	bl	8000288 <__aeabi_dsub>
 80085e0:	4b45      	ldr	r3, [pc, #276]	; (80086f8 <atan+0x330>)
 80085e2:	4606      	mov	r6, r0
 80085e4:	460f      	mov	r7, r1
 80085e6:	2200      	movs	r2, #0
 80085e8:	4620      	mov	r0, r4
 80085ea:	4629      	mov	r1, r5
 80085ec:	f7f8 f804 	bl	80005f8 <__aeabi_dmul>
 80085f0:	4b3e      	ldr	r3, [pc, #248]	; (80086ec <atan+0x324>)
 80085f2:	2200      	movs	r2, #0
 80085f4:	f7f7 fe4a 	bl	800028c <__adddf3>
 80085f8:	4602      	mov	r2, r0
 80085fa:	460b      	mov	r3, r1
 80085fc:	4630      	mov	r0, r6
 80085fe:	4639      	mov	r1, r7
 8008600:	f7f8 f924 	bl	800084c <__aeabi_ddiv>
 8008604:	f04f 0a02 	mov.w	sl, #2
 8008608:	4604      	mov	r4, r0
 800860a:	460d      	mov	r5, r1
 800860c:	e743      	b.n	8008496 <atan+0xce>
 800860e:	462b      	mov	r3, r5
 8008610:	ee10 2a10 	vmov	r2, s0
 8008614:	4939      	ldr	r1, [pc, #228]	; (80086fc <atan+0x334>)
 8008616:	2000      	movs	r0, #0
 8008618:	f7f8 f918 	bl	800084c <__aeabi_ddiv>
 800861c:	f04f 0a03 	mov.w	sl, #3
 8008620:	4604      	mov	r4, r0
 8008622:	460d      	mov	r5, r1
 8008624:	e737      	b.n	8008496 <atan+0xce>
 8008626:	4b36      	ldr	r3, [pc, #216]	; (8008700 <atan+0x338>)
 8008628:	4e36      	ldr	r6, [pc, #216]	; (8008704 <atan+0x33c>)
 800862a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800862e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8008632:	e9da 2300 	ldrd	r2, r3, [sl]
 8008636:	f7f7 fe27 	bl	8000288 <__aeabi_dsub>
 800863a:	4622      	mov	r2, r4
 800863c:	462b      	mov	r3, r5
 800863e:	f7f7 fe23 	bl	8000288 <__aeabi_dsub>
 8008642:	4602      	mov	r2, r0
 8008644:	460b      	mov	r3, r1
 8008646:	e9d6 0100 	ldrd	r0, r1, [r6]
 800864a:	f7f7 fe1d 	bl	8000288 <__aeabi_dsub>
 800864e:	f1bb 0f00 	cmp.w	fp, #0
 8008652:	4604      	mov	r4, r0
 8008654:	460d      	mov	r5, r1
 8008656:	f6bf aed6 	bge.w	8008406 <atan+0x3e>
 800865a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800865e:	461d      	mov	r5, r3
 8008660:	e6d1      	b.n	8008406 <atan+0x3e>
 8008662:	a51d      	add	r5, pc, #116	; (adr r5, 80086d8 <atan+0x310>)
 8008664:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008668:	e6cd      	b.n	8008406 <atan+0x3e>
 800866a:	bf00      	nop
 800866c:	f3af 8000 	nop.w
 8008670:	54442d18 	.word	0x54442d18
 8008674:	bff921fb 	.word	0xbff921fb
 8008678:	8800759c 	.word	0x8800759c
 800867c:	7e37e43c 	.word	0x7e37e43c
 8008680:	e322da11 	.word	0xe322da11
 8008684:	3f90ad3a 	.word	0x3f90ad3a
 8008688:	24760deb 	.word	0x24760deb
 800868c:	3fa97b4b 	.word	0x3fa97b4b
 8008690:	a0d03d51 	.word	0xa0d03d51
 8008694:	3fb10d66 	.word	0x3fb10d66
 8008698:	c54c206e 	.word	0xc54c206e
 800869c:	3fb745cd 	.word	0x3fb745cd
 80086a0:	920083ff 	.word	0x920083ff
 80086a4:	3fc24924 	.word	0x3fc24924
 80086a8:	5555550d 	.word	0x5555550d
 80086ac:	3fd55555 	.word	0x3fd55555
 80086b0:	2c6a6c2f 	.word	0x2c6a6c2f
 80086b4:	bfa2b444 	.word	0xbfa2b444
 80086b8:	52defd9a 	.word	0x52defd9a
 80086bc:	3fadde2d 	.word	0x3fadde2d
 80086c0:	af749a6d 	.word	0xaf749a6d
 80086c4:	3fb3b0f2 	.word	0x3fb3b0f2
 80086c8:	fe231671 	.word	0xfe231671
 80086cc:	3fbc71c6 	.word	0x3fbc71c6
 80086d0:	9998ebc4 	.word	0x9998ebc4
 80086d4:	3fc99999 	.word	0x3fc99999
 80086d8:	54442d18 	.word	0x54442d18
 80086dc:	3ff921fb 	.word	0x3ff921fb
 80086e0:	440fffff 	.word	0x440fffff
 80086e4:	7ff00000 	.word	0x7ff00000
 80086e8:	3fdbffff 	.word	0x3fdbffff
 80086ec:	3ff00000 	.word	0x3ff00000
 80086f0:	3ff2ffff 	.word	0x3ff2ffff
 80086f4:	40038000 	.word	0x40038000
 80086f8:	3ff80000 	.word	0x3ff80000
 80086fc:	bff00000 	.word	0xbff00000
 8008700:	08008bd8 	.word	0x08008bd8
 8008704:	08008bb8 	.word	0x08008bb8

08008708 <fabs>:
 8008708:	ec51 0b10 	vmov	r0, r1, d0
 800870c:	ee10 2a10 	vmov	r2, s0
 8008710:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008714:	ec43 2b10 	vmov	d0, r2, r3
 8008718:	4770      	bx	lr
	...

0800871c <_init>:
 800871c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800871e:	bf00      	nop
 8008720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008722:	bc08      	pop	{r3}
 8008724:	469e      	mov	lr, r3
 8008726:	4770      	bx	lr

08008728 <_fini>:
 8008728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800872a:	bf00      	nop
 800872c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800872e:	bc08      	pop	{r3}
 8008730:	469e      	mov	lr, r3
 8008732:	4770      	bx	lr
