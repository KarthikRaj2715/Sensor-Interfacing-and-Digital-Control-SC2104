
DC Motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000646c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ba0  080065fc  080065fc  000165fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800719c  0800719c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800719c  0800719c  0001719c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071a4  080071a4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071a4  080071a4  000171a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071a8  080071a8  000171a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080071ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00000770  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200007e8  200007e8  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011f9e  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002332  00000000  00000000  00032046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001090  00000000  00000000  00034378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fd0  00000000  00000000  00035408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021bae  00000000  00000000  000363d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013526  00000000  00000000  00057f86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce00a  00000000  00000000  0006b4ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001394b6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a80  00000000  00000000  00139508  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080065e4 	.word	0x080065e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080065e4 	.word	0x080065e4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <HAL_TIM_IC_CaptureCallback>:
int16_t Kp = 0;  // Initial PID values
int16_t Kd = 0;
float_t Ki = 0;


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	counter = __HAL_TIM_GET_COUNTER(htim);
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000582:	4a0f      	ldr	r2, [pc, #60]	; (80005c0 <HAL_TIM_IC_CaptureCallback+0x4c>)
 8000584:	6013      	str	r3, [r2, #0]
	count = (int16_t)counter;
 8000586:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <HAL_TIM_IC_CaptureCallback+0x4c>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	b21a      	sxth	r2, r3
 800058c:	4b0d      	ldr	r3, [pc, #52]	; (80005c4 <HAL_TIM_IC_CaptureCallback+0x50>)
 800058e:	801a      	strh	r2, [r3, #0]
	position = count/2;  // x2 encoding
 8000590:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <HAL_TIM_IC_CaptureCallback+0x50>)
 8000592:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000596:	0fda      	lsrs	r2, r3, #31
 8000598:	4413      	add	r3, r2
 800059a:	105b      	asrs	r3, r3, #1
 800059c:	b21a      	sxth	r2, r3
 800059e:	4b0a      	ldr	r3, [pc, #40]	; (80005c8 <HAL_TIM_IC_CaptureCallback+0x54>)
 80005a0:	801a      	strh	r2, [r3, #0]
	angle = count/2; // x2 encoding
 80005a2:	4b08      	ldr	r3, [pc, #32]	; (80005c4 <HAL_TIM_IC_CaptureCallback+0x50>)
 80005a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005a8:	0fda      	lsrs	r2, r3, #31
 80005aa:	4413      	add	r3, r2
 80005ac:	105b      	asrs	r3, r3, #1
 80005ae:	b21a      	sxth	r2, r3
 80005b0:	4b06      	ldr	r3, [pc, #24]	; (80005cc <HAL_TIM_IC_CaptureCallback+0x58>)
 80005b2:	801a      	strh	r2, [r3, #0]
}
 80005b4:	bf00      	nop
 80005b6:	370c      	adds	r7, #12
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr
 80005c0:	20000368 	.word	0x20000368
 80005c4:	2000036c 	.word	0x2000036c
 80005c8:	20000398 	.word	0x20000398
 80005cc:	2000039a 	.word	0x2000039a

080005d0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin ) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	80fb      	strh	r3, [r7, #6]
     // see EXTI0_IRQHandler() in stm32f4xx_it.c for interrupt
	if ( GPIO_Pin == USER_PB_Pin) {
 80005da:	88fb      	ldrh	r3, [r7, #6]
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d122      	bne.n	8000626 <HAL_GPIO_EXTI_Callback+0x56>
		// toggle LED
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12); // LED - A12
 80005e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005e4:	4812      	ldr	r0, [pc, #72]	; (8000630 <HAL_GPIO_EXTI_Callback+0x60>)
 80005e6:	f002 fba2 	bl	8002d2e <HAL_GPIO_TogglePin>
		if (start == 0){
 80005ea:	4b12      	ldr	r3, [pc, #72]	; (8000634 <HAL_GPIO_EXTI_Callback+0x64>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d116      	bne.n	8000620 <HAL_GPIO_EXTI_Callback+0x50>
			start = 1;
 80005f2:	4b10      	ldr	r3, [pc, #64]	; (8000634 <HAL_GPIO_EXTI_Callback+0x64>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	601a      	str	r2, [r3, #0]
		    // reset all value to Zero
		    TIM2->CNT = 0; // Timer Counter Value
 80005f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005fc:	2200      	movs	r2, #0
 80005fe:	625a      	str	r2, [r3, #36]	; 0x24
		    speed = 0;
 8000600:	4b0d      	ldr	r3, [pc, #52]	; (8000638 <HAL_GPIO_EXTI_Callback+0x68>)
 8000602:	2200      	movs	r2, #0
 8000604:	801a      	strh	r2, [r3, #0]
		    position = 0;  // see SysTick_Handler in stm32f4xx_it.c
 8000606:	4b0d      	ldr	r3, [pc, #52]	; (800063c <HAL_GPIO_EXTI_Callback+0x6c>)
 8000608:	2200      	movs	r2, #0
 800060a:	801a      	strh	r2, [r3, #0]
		    oldpos = 0; // see SysTick_Handler in stm32f4xx_it.c
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <HAL_GPIO_EXTI_Callback+0x70>)
 800060e:	2200      	movs	r2, #0
 8000610:	801a      	strh	r2, [r3, #0]
		    angle = 0;
 8000612:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <HAL_GPIO_EXTI_Callback+0x74>)
 8000614:	2200      	movs	r2, #0
 8000616:	801a      	strh	r2, [r3, #0]
		    pwmVal = 0;
 8000618:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <HAL_GPIO_EXTI_Callback+0x78>)
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
		    }
		else
			start = 0;
 	    }
}
 800061e:	e002      	b.n	8000626 <HAL_GPIO_EXTI_Callback+0x56>
			start = 0;
 8000620:	4b04      	ldr	r3, [pc, #16]	; (8000634 <HAL_GPIO_EXTI_Callback+0x64>)
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
}
 8000626:	bf00      	nop
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40020000 	.word	0x40020000
 8000634:	20000374 	.word	0x20000374
 8000638:	2000036e 	.word	0x2000036e
 800063c:	20000398 	.word	0x20000398
 8000640:	200007c8 	.word	0x200007c8
 8000644:	2000039a 	.word	0x2000039a
 8000648:	20000378 	.word	0x20000378

0800064c <MotorDrive_enable>:

void MotorDrive_enable(void) {
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
	  //Enable PWM through TIM4-CH1/CH4 to drive the DC motor - Rev D board
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);  // on Motor drive A interface
 8000650:	2108      	movs	r1, #8
 8000652:	4808      	ldr	r0, [pc, #32]	; (8000674 <MotorDrive_enable+0x28>)
 8000654:	f003 fa4a 	bl	8003aec <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);  // on Motor drive A interface
 8000658:	210c      	movs	r1, #12
 800065a:	4806      	ldr	r0, [pc, #24]	; (8000674 <MotorDrive_enable+0x28>)
 800065c:	f003 fa46 	bl	8003aec <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);  // on Motor drive D interface
 8000660:	2108      	movs	r1, #8
 8000662:	4805      	ldr	r0, [pc, #20]	; (8000678 <MotorDrive_enable+0x2c>)
 8000664:	f003 fa42 	bl	8003aec <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);  // on Motor drive D interface
 8000668:	210c      	movs	r1, #12
 800066a:	4803      	ldr	r0, [pc, #12]	; (8000678 <MotorDrive_enable+0x2c>)
 800066c:	f003 fa3e 	bl	8003aec <HAL_TIM_PWM_Start>
}
 8000670:	bf00      	nop
 8000672:	bd80      	pop	{r7, pc}
 8000674:	200001c0 	.word	0x200001c0
 8000678:	200000e8 	.word	0x200000e8

0800067c <Motor_stop>:


void Motor_stop(void) {
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
		//Set both IN1 and IN2 pins = '1'
		__HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_3,0);
 8000680:	4b0a      	ldr	r3, [pc, #40]	; (80006ac <Motor_stop+0x30>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_4,0);
 8000688:	4b08      	ldr	r3, [pc, #32]	; (80006ac <Motor_stop+0x30>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2200      	movs	r2, #0
 800068e:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_3,0);
 8000690:	4b07      	ldr	r3, [pc, #28]	; (80006b0 <Motor_stop+0x34>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2200      	movs	r2, #0
 8000696:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_4,0);
 8000698:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <Motor_stop+0x34>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2200      	movs	r2, #0
 800069e:	641a      	str	r2, [r3, #64]	; 0x40
}
 80006a0:	bf00      	nop
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	200001c0 	.word	0x200001c0
 80006b0:	200000e8 	.word	0x200000e8

080006b4 <Motor_direction>:

void Motor_direction(uint8_t forward) {
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	71fb      	strb	r3, [r7, #7]
	if (forward){// move forward
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d008      	beq.n	80006d6 <Motor_direction+0x22>
		__HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_3,0); // set IN1 to maximum PWM (7199) for '1'
 80006c4:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <Motor_direction+0x40>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	2200      	movs	r2, #0
 80006ca:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_3,0); // set IN1 to maximum PWM (7199) for '1' for Drive D
 80006cc:	4b0a      	ldr	r3, [pc, #40]	; (80006f8 <Motor_direction+0x44>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2200      	movs	r2, #0
 80006d2:	63da      	str	r2, [r3, #60]	; 0x3c
	  }
	else { // reverse
		__HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_4,0); // set IN2 to maximum PWM (7199) for '1'
		__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_4,0); // set IN2 to maximum PWM (7199) for '1' for Drive D
	}
}
 80006d4:	e007      	b.n	80006e6 <Motor_direction+0x32>
		__HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_4,0); // set IN2 to maximum PWM (7199) for '1'
 80006d6:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <Motor_direction+0x40>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	2200      	movs	r2, #0
 80006dc:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_4,0); // set IN2 to maximum PWM (7199) for '1' for Drive D
 80006de:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <Motor_direction+0x44>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2200      	movs	r2, #0
 80006e4:	641a      	str	r2, [r3, #64]	; 0x40
}
 80006e6:	bf00      	nop
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	200001c0 	.word	0x200001c0
 80006f8:	200000e8 	.word	0x200000e8

080006fc <Motor_forward>:

void Motor_forward(int  pwmVal){
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
	 // rotate motor in clockwise forward send the values to serial port for display
	 Motor_direction(1); //forward
 8000704:	2001      	movs	r0, #1
 8000706:	f7ff ffd5 	bl	80006b4 <Motor_direction>
	 __HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_4,pwmVal); // output PWM waveform to drive motor A
 800070a:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <Motor_forward+0x3c>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	687a      	ldr	r2, [r7, #4]
 8000710:	641a      	str	r2, [r3, #64]	; 0x40
	 __HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_4,pwmVal); // output PWM waveform to drive motor D - for debugging
 8000712:	4b0a      	ldr	r3, [pc, #40]	; (800073c <Motor_forward+0x40>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	687a      	ldr	r2, [r7, #4]
 8000718:	641a      	str	r2, [r3, #64]	; 0x40

    sprintf(buf, "PWM = %4dF ", pwmVal);
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	4908      	ldr	r1, [pc, #32]	; (8000740 <Motor_forward+0x44>)
 800071e:	4809      	ldr	r0, [pc, #36]	; (8000744 <Motor_forward+0x48>)
 8000720:	f005 faf2 	bl	8005d08 <siprintf>
    OLED_ShowString(0, 20, buf);
 8000724:	4a07      	ldr	r2, [pc, #28]	; (8000744 <Motor_forward+0x48>)
 8000726:	2114      	movs	r1, #20
 8000728:	2000      	movs	r0, #0
 800072a:	f001 fa93 	bl	8001c54 <OLED_ShowString>
    //OLED_Refresh_Gram();
}
 800072e:	bf00      	nop
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	200001c0 	.word	0x200001c0
 800073c:	200000e8 	.word	0x200000e8
 8000740:	080065fc 	.word	0x080065fc
 8000744:	20000384 	.word	0x20000384

08000748 <Motor_reverse>:

void Motor_reverse(int  pwmVal){
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	 // move robot forward send the values to serial port for display
	 Motor_direction(0); //reverse
 8000750:	2000      	movs	r0, #0
 8000752:	f7ff ffaf 	bl	80006b4 <Motor_direction>
	 __HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_3,pwmVal); // output PWM waveform to drive motor A
 8000756:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <Motor_reverse+0x3c>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	687a      	ldr	r2, [r7, #4]
 800075c:	63da      	str	r2, [r3, #60]	; 0x3c
	 __HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_3,pwmVal); // output PWM waveform to drive motor D - for debugging
 800075e:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <Motor_reverse+0x40>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	687a      	ldr	r2, [r7, #4]
 8000764:	63da      	str	r2, [r3, #60]	; 0x3c

    sprintf(buf, "PWM = %4dR ", pwmVal);
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	4908      	ldr	r1, [pc, #32]	; (800078c <Motor_reverse+0x44>)
 800076a:	4809      	ldr	r0, [pc, #36]	; (8000790 <Motor_reverse+0x48>)
 800076c:	f005 facc 	bl	8005d08 <siprintf>
    OLED_ShowString(0, 20, buf);
 8000770:	4a07      	ldr	r2, [pc, #28]	; (8000790 <Motor_reverse+0x48>)
 8000772:	2114      	movs	r1, #20
 8000774:	2000      	movs	r0, #0
 8000776:	f001 fa6d 	bl	8001c54 <OLED_ShowString>
    //OLED_Refresh_Gram();
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	200001c0 	.word	0x200001c0
 8000788:	200000e8 	.word	0x200000e8
 800078c:	08006608 	.word	0x08006608
 8000790:	20000384 	.word	0x20000384

08000794 <PID_Control>:


int16_t PID_Control(){
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
	  //Control Loop
	  if (abs(error)>2){ //more than 2 degree difference
 8000798:	4b95      	ldr	r3, [pc, #596]	; (80009f0 <PID_Control+0x25c>)
 800079a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	bfb8      	it	lt
 80007a2:	425b      	neglt	r3, r3
 80007a4:	b29b      	uxth	r3, r3
 80007a6:	2b02      	cmp	r3, #2
 80007a8:	f240 811f 	bls.w	80009ea <PID_Control+0x256>
		  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10); //Buzzer
    	  angle = (int)(position*360/265);  // supposed to be 260 ticks/rev, measured = 265
 80007ac:	4b91      	ldr	r3, [pc, #580]	; (80009f4 <PID_Control+0x260>)
 80007ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007b2:	461a      	mov	r2, r3
 80007b4:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80007b8:	fb02 f303 	mul.w	r3, r2, r3
 80007bc:	4a8e      	ldr	r2, [pc, #568]	; (80009f8 <PID_Control+0x264>)
 80007be:	fb82 1203 	smull	r1, r2, r2, r3
 80007c2:	1192      	asrs	r2, r2, #6
 80007c4:	17db      	asrs	r3, r3, #31
 80007c6:	1ad3      	subs	r3, r2, r3
 80007c8:	b21a      	sxth	r2, r3
 80007ca:	4b8c      	ldr	r3, [pc, #560]	; (80009fc <PID_Control+0x268>)
 80007cc:	801a      	strh	r2, [r3, #0]
  	      error = target_angle - angle;
 80007ce:	4b8c      	ldr	r3, [pc, #560]	; (8000a00 <PID_Control+0x26c>)
 80007d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007d4:	b29a      	uxth	r2, r3
 80007d6:	4b89      	ldr	r3, [pc, #548]	; (80009fc <PID_Control+0x268>)
 80007d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007dc:	b29b      	uxth	r3, r3
 80007de:	1ad3      	subs	r3, r2, r3
 80007e0:	b29b      	uxth	r3, r3
 80007e2:	b21a      	sxth	r2, r3
 80007e4:	4b82      	ldr	r3, [pc, #520]	; (80009f0 <PID_Control+0x25c>)
 80007e6:	801a      	strh	r2, [r3, #0]

  	    sprintf(buf, "error = %5d, ", (int)error);
 80007e8:	4b81      	ldr	r3, [pc, #516]	; (80009f0 <PID_Control+0x25c>)
 80007ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007ee:	461a      	mov	r2, r3
 80007f0:	4984      	ldr	r1, [pc, #528]	; (8000a04 <PID_Control+0x270>)
 80007f2:	4885      	ldr	r0, [pc, #532]	; (8000a08 <PID_Control+0x274>)
 80007f4:	f005 fa88 	bl	8005d08 <siprintf>
  	    HAL_UART_Transmit(&huart2, buf, 14, HAL_MAX_DELAY); // Send through BT @9600
 80007f8:	f04f 33ff 	mov.w	r3, #4294967295
 80007fc:	220e      	movs	r2, #14
 80007fe:	4982      	ldr	r1, [pc, #520]	; (8000a08 <PID_Control+0x274>)
 8000800:	4882      	ldr	r0, [pc, #520]	; (8000a0c <PID_Control+0x278>)
 8000802:	f004 fa88 	bl	8004d16 <HAL_UART_Transmit>
  	    sprintf(buf, " Kp = %5d, ", Kp);
 8000806:	4b82      	ldr	r3, [pc, #520]	; (8000a10 <PID_Control+0x27c>)
 8000808:	f9b3 3000 	ldrsh.w	r3, [r3]
 800080c:	461a      	mov	r2, r3
 800080e:	4981      	ldr	r1, [pc, #516]	; (8000a14 <PID_Control+0x280>)
 8000810:	487d      	ldr	r0, [pc, #500]	; (8000a08 <PID_Control+0x274>)
 8000812:	f005 fa79 	bl	8005d08 <siprintf>
  	   	HAL_UART_Transmit(&huart2, buf, 14, HAL_MAX_DELAY); // Send through BT @9600
 8000816:	f04f 33ff 	mov.w	r3, #4294967295
 800081a:	220e      	movs	r2, #14
 800081c:	497a      	ldr	r1, [pc, #488]	; (8000a08 <PID_Control+0x274>)
 800081e:	487b      	ldr	r0, [pc, #492]	; (8000a0c <PID_Control+0x278>)
 8000820:	f004 fa79 	bl	8004d16 <HAL_UART_Transmit>

        if (error > 0)
 8000824:	4b72      	ldr	r3, [pc, #456]	; (80009f0 <PID_Control+0x25c>)
 8000826:	f9b3 3000 	ldrsh.w	r3, [r3]
 800082a:	2b00      	cmp	r3, #0
 800082c:	dd03      	ble.n	8000836 <PID_Control+0xa2>
      	  direction = 0; //forward
 800082e:	4b7a      	ldr	r3, [pc, #488]	; (8000a18 <PID_Control+0x284>)
 8000830:	2200      	movs	r2, #0
 8000832:	801a      	strh	r2, [r3, #0]
 8000834:	e002      	b.n	800083c <PID_Control+0xa8>
        else
      	  direction = 1; //reverse direction
 8000836:	4b78      	ldr	r3, [pc, #480]	; (8000a18 <PID_Control+0x284>)
 8000838:	2201      	movs	r2, #1
 800083a:	801a      	strh	r2, [r3, #0]

        millisNow = HAL_GetTick();
 800083c:	f001 feee 	bl	800261c <HAL_GetTick>
 8000840:	4603      	mov	r3, r0
 8000842:	461a      	mov	r2, r3
 8000844:	4b75      	ldr	r3, [pc, #468]	; (8000a1c <PID_Control+0x288>)
 8000846:	601a      	str	r2, [r3, #0]
        dt = (millisNow - millisOld); // time elapsed in millisecond
 8000848:	4b74      	ldr	r3, [pc, #464]	; (8000a1c <PID_Control+0x288>)
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	4b74      	ldr	r3, [pc, #464]	; (8000a20 <PID_Control+0x28c>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	1ad3      	subs	r3, r2, r3
 8000852:	4a74      	ldr	r2, [pc, #464]	; (8000a24 <PID_Control+0x290>)
 8000854:	6013      	str	r3, [r2, #0]
        millisOld = millisNow; // store the current time for next round
 8000856:	4b71      	ldr	r3, [pc, #452]	; (8000a1c <PID_Control+0x288>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a71      	ldr	r2, [pc, #452]	; (8000a20 <PID_Control+0x28c>)
 800085c:	6013      	str	r3, [r2, #0]

        error_area = error_area + error*dt; // area under error for Ki
 800085e:	4b64      	ldr	r3, [pc, #400]	; (80009f0 <PID_Control+0x25c>)
 8000860:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000864:	461a      	mov	r2, r3
 8000866:	4b6f      	ldr	r3, [pc, #444]	; (8000a24 <PID_Control+0x290>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	fb03 f202 	mul.w	r2, r3, r2
 800086e:	4b6e      	ldr	r3, [pc, #440]	; (8000a28 <PID_Control+0x294>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4413      	add	r3, r2
 8000874:	4a6c      	ldr	r2, [pc, #432]	; (8000a28 <PID_Control+0x294>)
 8000876:	6013      	str	r3, [r2, #0]

        error_change = error - error_old; // change in error
 8000878:	4b5d      	ldr	r3, [pc, #372]	; (80009f0 <PID_Control+0x25c>)
 800087a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800087e:	461a      	mov	r2, r3
 8000880:	4b6a      	ldr	r3, [pc, #424]	; (8000a2c <PID_Control+0x298>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	1ad3      	subs	r3, r2, r3
 8000886:	4a6a      	ldr	r2, [pc, #424]	; (8000a30 <PID_Control+0x29c>)
 8000888:	6013      	str	r3, [r2, #0]
  	    error_old = error; //store the error for next round
 800088a:	4b59      	ldr	r3, [pc, #356]	; (80009f0 <PID_Control+0x25c>)
 800088c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000890:	461a      	mov	r2, r3
 8000892:	4b66      	ldr	r3, [pc, #408]	; (8000a2c <PID_Control+0x298>)
 8000894:	601a      	str	r2, [r3, #0]
        error_rate = (error_change)*1000/dt; // for Kd - dt in millsecond
 8000896:	4b66      	ldr	r3, [pc, #408]	; (8000a30 <PID_Control+0x29c>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800089e:	fb03 f202 	mul.w	r2, r3, r2
 80008a2:	4b60      	ldr	r3, [pc, #384]	; (8000a24 <PID_Control+0x290>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80008aa:	4a62      	ldr	r2, [pc, #392]	; (8000a34 <PID_Control+0x2a0>)
 80008ac:	6013      	str	r3, [r2, #0]

		pwmVal = (int)(error*Kp + error_area*Ki/10000);  // PI, D is below
 80008ae:	4b50      	ldr	r3, [pc, #320]	; (80009f0 <PID_Control+0x25c>)
 80008b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008b4:	461a      	mov	r2, r3
 80008b6:	4b56      	ldr	r3, [pc, #344]	; (8000a10 <PID_Control+0x27c>)
 80008b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008bc:	fb02 f303 	mul.w	r3, r2, r3
 80008c0:	ee07 3a90 	vmov	s15, r3
 80008c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008c8:	4b57      	ldr	r3, [pc, #348]	; (8000a28 <PID_Control+0x294>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	ee07 3a90 	vmov	s15, r3
 80008d0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80008d4:	4b58      	ldr	r3, [pc, #352]	; (8000a38 <PID_Control+0x2a4>)
 80008d6:	edd3 7a00 	vldr	s15, [r3]
 80008da:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80008de:	ed9f 6a57 	vldr	s12, [pc, #348]	; 8000a3c <PID_Control+0x2a8>
 80008e2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80008e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008ee:	ee17 2a90 	vmov	r2, s15
 80008f2:	4b53      	ldr	r3, [pc, #332]	; (8000a40 <PID_Control+0x2ac>)
 80008f4:	601a      	str	r2, [r3, #0]
		pwmVal_raw = (int)(error*Kp); // for debugging
 80008f6:	4b3e      	ldr	r3, [pc, #248]	; (80009f0 <PID_Control+0x25c>)
 80008f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008fc:	461a      	mov	r2, r3
 80008fe:	4b44      	ldr	r3, [pc, #272]	; (8000a10 <PID_Control+0x27c>)
 8000900:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000904:	fb02 f303 	mul.w	r3, r2, r3
 8000908:	4a4e      	ldr	r2, [pc, #312]	; (8000a44 <PID_Control+0x2b0>)
 800090a:	6013      	str	r3, [r2, #0]


		// Adjust pwmVal to account for deadzone
		if (pwmVal>0)
 800090c:	4b4c      	ldr	r3, [pc, #304]	; (8000a40 <PID_Control+0x2ac>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2b00      	cmp	r3, #0
 8000912:	dd08      	ble.n	8000926 <PID_Control+0x192>
			pwmVal = pwmVal+pwmMin;
 8000914:	4b4c      	ldr	r3, [pc, #304]	; (8000a48 <PID_Control+0x2b4>)
 8000916:	f9b3 3000 	ldrsh.w	r3, [r3]
 800091a:	461a      	mov	r2, r3
 800091c:	4b48      	ldr	r3, [pc, #288]	; (8000a40 <PID_Control+0x2ac>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4413      	add	r3, r2
 8000922:	4a47      	ldr	r2, [pc, #284]	; (8000a40 <PID_Control+0x2ac>)
 8000924:	6013      	str	r3, [r2, #0]
		if (pwmVal<0)
 8000926:	4b46      	ldr	r3, [pc, #280]	; (8000a40 <PID_Control+0x2ac>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	2b00      	cmp	r3, #0
 800092c:	da07      	bge.n	800093e <PID_Control+0x1aa>
			pwmVal = pwmVal-pwmMin;
 800092e:	4b44      	ldr	r3, [pc, #272]	; (8000a40 <PID_Control+0x2ac>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a45      	ldr	r2, [pc, #276]	; (8000a48 <PID_Control+0x2b4>)
 8000934:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000938:	1a9b      	subs	r3, r3, r2
 800093a:	4a41      	ldr	r2, [pc, #260]	; (8000a40 <PID_Control+0x2ac>)
 800093c:	6013      	str	r3, [r2, #0]

		if (pwmVal > pwmMax)  // Clamp the PWM to its maximum positive value
 800093e:	4b43      	ldr	r3, [pc, #268]	; (8000a4c <PID_Control+0x2b8>)
 8000940:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000944:	461a      	mov	r2, r3
 8000946:	4b3e      	ldr	r3, [pc, #248]	; (8000a40 <PID_Control+0x2ac>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	429a      	cmp	r2, r3
 800094c:	da05      	bge.n	800095a <PID_Control+0x1c6>
		   pwmVal = pwmMax;
 800094e:	4b3f      	ldr	r3, [pc, #252]	; (8000a4c <PID_Control+0x2b8>)
 8000950:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000954:	461a      	mov	r2, r3
 8000956:	4b3a      	ldr	r3, [pc, #232]	; (8000a40 <PID_Control+0x2ac>)
 8000958:	601a      	str	r2, [r3, #0]


		pwmVal = (int)(pwmVal + error_rate*Kd);  // + D which is subtration
 800095a:	4b3d      	ldr	r3, [pc, #244]	; (8000a50 <PID_Control+0x2bc>)
 800095c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000960:	461a      	mov	r2, r3
 8000962:	4b34      	ldr	r3, [pc, #208]	; (8000a34 <PID_Control+0x2a0>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	fb03 f202 	mul.w	r2, r3, r2
 800096a:	4b35      	ldr	r3, [pc, #212]	; (8000a40 <PID_Control+0x2ac>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4413      	add	r3, r2
 8000970:	4a33      	ldr	r2, [pc, #204]	; (8000a40 <PID_Control+0x2ac>)
 8000972:	6013      	str	r3, [r2, #0]

		if (pwmVal < -pwmMax)  // Clamp the PWM to its minimum negative value
 8000974:	4b35      	ldr	r3, [pc, #212]	; (8000a4c <PID_Control+0x2b8>)
 8000976:	f9b3 3000 	ldrsh.w	r3, [r3]
 800097a:	425a      	negs	r2, r3
 800097c:	4b30      	ldr	r3, [pc, #192]	; (8000a40 <PID_Control+0x2ac>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	429a      	cmp	r2, r3
 8000982:	dd05      	ble.n	8000990 <PID_Control+0x1fc>
		   pwmVal = -pwmMax;
 8000984:	4b31      	ldr	r3, [pc, #196]	; (8000a4c <PID_Control+0x2b8>)
 8000986:	f9b3 3000 	ldrsh.w	r3, [r3]
 800098a:	425b      	negs	r3, r3
 800098c:	4a2c      	ldr	r2, [pc, #176]	; (8000a40 <PID_Control+0x2ac>)
 800098e:	6013      	str	r3, [r2, #0]

		sprintf(buf, " Praw = %6d, ", pwmVal_raw);
 8000990:	4b2c      	ldr	r3, [pc, #176]	; (8000a44 <PID_Control+0x2b0>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	461a      	mov	r2, r3
 8000996:	492f      	ldr	r1, [pc, #188]	; (8000a54 <PID_Control+0x2c0>)
 8000998:	481b      	ldr	r0, [pc, #108]	; (8000a08 <PID_Control+0x274>)
 800099a:	f005 f9b5 	bl	8005d08 <siprintf>
		HAL_UART_Transmit(&huart2, buf, 17, HAL_MAX_DELAY); // Send through BT @9600
 800099e:	f04f 33ff 	mov.w	r3, #4294967295
 80009a2:	2211      	movs	r2, #17
 80009a4:	4918      	ldr	r1, [pc, #96]	; (8000a08 <PID_Control+0x274>)
 80009a6:	4819      	ldr	r0, [pc, #100]	; (8000a0c <PID_Control+0x278>)
 80009a8:	f004 f9b5 	bl	8004d16 <HAL_UART_Transmit>

		sprintf(buf, " Pwm = %6d ", pwmVal);
 80009ac:	4b24      	ldr	r3, [pc, #144]	; (8000a40 <PID_Control+0x2ac>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	461a      	mov	r2, r3
 80009b2:	4929      	ldr	r1, [pc, #164]	; (8000a58 <PID_Control+0x2c4>)
 80009b4:	4814      	ldr	r0, [pc, #80]	; (8000a08 <PID_Control+0x274>)
 80009b6:	f005 f9a7 	bl	8005d08 <siprintf>
		HAL_UART_Transmit(&huart2, buf, 17, HAL_MAX_DELAY); // Send through BT @9600
 80009ba:	f04f 33ff 	mov.w	r3, #4294967295
 80009be:	2211      	movs	r2, #17
 80009c0:	4911      	ldr	r1, [pc, #68]	; (8000a08 <PID_Control+0x274>)
 80009c2:	4812      	ldr	r0, [pc, #72]	; (8000a0c <PID_Control+0x278>)
 80009c4:	f004 f9a7 	bl	8004d16 <HAL_UART_Transmit>

		buf[0] = '\r';
 80009c8:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <PID_Control+0x274>)
 80009ca:	220d      	movs	r2, #13
 80009cc:	701a      	strb	r2, [r3, #0]
		buf[1] = '\n';  // move to next line on serial port
 80009ce:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <PID_Control+0x274>)
 80009d0:	220a      	movs	r2, #10
 80009d2:	705a      	strb	r2, [r3, #1]
		HAL_UART_Transmit(&huart2, buf, 2, HAL_MAX_DELAY); // Send through USB port
 80009d4:	f04f 33ff 	mov.w	r3, #4294967295
 80009d8:	2202      	movs	r2, #2
 80009da:	490b      	ldr	r1, [pc, #44]	; (8000a08 <PID_Control+0x274>)
 80009dc:	480b      	ldr	r0, [pc, #44]	; (8000a0c <PID_Control+0x278>)
 80009de:	f004 f99a 	bl	8004d16 <HAL_UART_Transmit>

		return(pwmVal);
 80009e2:	4b17      	ldr	r3, [pc, #92]	; (8000a40 <PID_Control+0x2ac>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	b21b      	sxth	r3, r3
 80009e8:	e7ff      	b.n	80009ea <PID_Control+0x256>
	    } // if loop
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	200003a0 	.word	0x200003a0
 80009f4:	20000398 	.word	0x20000398
 80009f8:	3dd38ff1 	.word	0x3dd38ff1
 80009fc:	2000039a 	.word	0x2000039a
 8000a00:	2000039c 	.word	0x2000039c
 8000a04:	08006614 	.word	0x08006614
 8000a08:	20000384 	.word	0x20000384
 8000a0c:	200002e0 	.word	0x200002e0
 8000a10:	200003c0 	.word	0x200003c0
 8000a14:	08006624 	.word	0x08006624
 8000a18:	2000039e 	.word	0x2000039e
 8000a1c:	200003b8 	.word	0x200003b8
 8000a20:	200003b4 	.word	0x200003b4
 8000a24:	200003bc 	.word	0x200003bc
 8000a28:	200003a4 	.word	0x200003a4
 8000a2c:	200003a8 	.word	0x200003a8
 8000a30:	200003ac 	.word	0x200003ac
 8000a34:	200003b0 	.word	0x200003b0
 8000a38:	200003c4 	.word	0x200003c4
 8000a3c:	461c4000 	.word	0x461c4000
 8000a40:	20000378 	.word	0x20000378
 8000a44:	2000037c 	.word	0x2000037c
 8000a48:	20000004 	.word	0x20000004
 8000a4c:	20000002 	.word	0x20000002
 8000a50:	200003c2 	.word	0x200003c2
 8000a54:	08006630 	.word	0x08006630
 8000a58:	08006640 	.word	0x08006640

08000a5c <serial_uart>:

void serial_uart(){
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
	 // send various values to serial port @ usart 3 for display
		  angle = (int)(position*360/265); //Hall Sensor = 26 poles/13 pulses, DC motor = 20x13 = 260 pulses per revolution
 8000a60:	4b75      	ldr	r3, [pc, #468]	; (8000c38 <serial_uart+0x1dc>)
 8000a62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a66:	461a      	mov	r2, r3
 8000a68:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8000a6c:	fb02 f303 	mul.w	r3, r2, r3
 8000a70:	4a72      	ldr	r2, [pc, #456]	; (8000c3c <serial_uart+0x1e0>)
 8000a72:	fb82 1203 	smull	r1, r2, r2, r3
 8000a76:	1192      	asrs	r2, r2, #6
 8000a78:	17db      	asrs	r3, r3, #31
 8000a7a:	1ad3      	subs	r3, r2, r3
 8000a7c:	b21a      	sxth	r2, r3
 8000a7e:	4b70      	ldr	r3, [pc, #448]	; (8000c40 <serial_uart+0x1e4>)
 8000a80:	801a      	strh	r2, [r3, #0]
		                                   // measured value = 265 pulses per revolution
		  sprintf(buf, "%5d", angle);
 8000a82:	4b6f      	ldr	r3, [pc, #444]	; (8000c40 <serial_uart+0x1e4>)
 8000a84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	496e      	ldr	r1, [pc, #440]	; (8000c44 <serial_uart+0x1e8>)
 8000a8c:	486e      	ldr	r0, [pc, #440]	; (8000c48 <serial_uart+0x1ec>)
 8000a8e:	f005 f93b 	bl	8005d08 <siprintf>
	      OLED_ShowString(60, 10, buf);
 8000a92:	4a6d      	ldr	r2, [pc, #436]	; (8000c48 <serial_uart+0x1ec>)
 8000a94:	210a      	movs	r1, #10
 8000a96:	203c      	movs	r0, #60	; 0x3c
 8000a98:	f001 f8dc 	bl	8001c54 <OLED_ShowString>
	      //also send to serial port
	      HAL_UART_Transmit(&huart3, buf, 5, HAL_MAX_DELAY); // Send to Uart3 USB port
 8000a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa0:	2205      	movs	r2, #5
 8000aa2:	4969      	ldr	r1, [pc, #420]	; (8000c48 <serial_uart+0x1ec>)
 8000aa4:	4869      	ldr	r0, [pc, #420]	; (8000c4c <serial_uart+0x1f0>)
 8000aa6:	f004 f936 	bl	8004d16 <HAL_UART_Transmit>

	      buf[0]=',';  // comma separator
 8000aaa:	4b67      	ldr	r3, [pc, #412]	; (8000c48 <serial_uart+0x1ec>)
 8000aac:	222c      	movs	r2, #44	; 0x2c
 8000aae:	701a      	strb	r2, [r3, #0]
	      HAL_UART_Transmit(&huart3, buf, 1, HAL_MAX_DELAY); // Send to Uart3 USB port
 8000ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	4964      	ldr	r1, [pc, #400]	; (8000c48 <serial_uart+0x1ec>)
 8000ab8:	4864      	ldr	r0, [pc, #400]	; (8000c4c <serial_uart+0x1f0>)
 8000aba:	f004 f92c 	bl	8004d16 <HAL_UART_Transmit>

	      sprintf(buf, "%5d", target_angle);
 8000abe:	4b64      	ldr	r3, [pc, #400]	; (8000c50 <serial_uart+0x1f4>)
 8000ac0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	495f      	ldr	r1, [pc, #380]	; (8000c44 <serial_uart+0x1e8>)
 8000ac8:	485f      	ldr	r0, [pc, #380]	; (8000c48 <serial_uart+0x1ec>)
 8000aca:	f005 f91d 	bl	8005d08 <siprintf>
	   	  HAL_UART_Transmit(&huart3, buf, 5, HAL_MAX_DELAY); // Send to Uart3 USB port
 8000ace:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad2:	2205      	movs	r2, #5
 8000ad4:	495c      	ldr	r1, [pc, #368]	; (8000c48 <serial_uart+0x1ec>)
 8000ad6:	485d      	ldr	r0, [pc, #372]	; (8000c4c <serial_uart+0x1f0>)
 8000ad8:	f004 f91d 	bl	8004d16 <HAL_UART_Transmit>

	   	  buf[0]=',';
 8000adc:	4b5a      	ldr	r3, [pc, #360]	; (8000c48 <serial_uart+0x1ec>)
 8000ade:	222c      	movs	r2, #44	; 0x2c
 8000ae0:	701a      	strb	r2, [r3, #0]
	   	  HAL_UART_Transmit(&huart3, buf, 1, HAL_MAX_DELAY); // Send to Uart3 USB port
 8000ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	4957      	ldr	r1, [pc, #348]	; (8000c48 <serial_uart+0x1ec>)
 8000aea:	4858      	ldr	r0, [pc, #352]	; (8000c4c <serial_uart+0x1f0>)
 8000aec:	f004 f913 	bl	8004d16 <HAL_UART_Transmit>

	   	  sprintf(buf, "%5d", error);
 8000af0:	4b58      	ldr	r3, [pc, #352]	; (8000c54 <serial_uart+0x1f8>)
 8000af2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000af6:	461a      	mov	r2, r3
 8000af8:	4952      	ldr	r1, [pc, #328]	; (8000c44 <serial_uart+0x1e8>)
 8000afa:	4853      	ldr	r0, [pc, #332]	; (8000c48 <serial_uart+0x1ec>)
 8000afc:	f005 f904 	bl	8005d08 <siprintf>
	   	  HAL_UART_Transmit(&huart3, buf, 5, HAL_MAX_DELAY); // Send to Uart3 USB port
 8000b00:	f04f 33ff 	mov.w	r3, #4294967295
 8000b04:	2205      	movs	r2, #5
 8000b06:	4950      	ldr	r1, [pc, #320]	; (8000c48 <serial_uart+0x1ec>)
 8000b08:	4850      	ldr	r0, [pc, #320]	; (8000c4c <serial_uart+0x1f0>)
 8000b0a:	f004 f904 	bl	8004d16 <HAL_UART_Transmit>

	   	  buf[0]=',';
 8000b0e:	4b4e      	ldr	r3, [pc, #312]	; (8000c48 <serial_uart+0x1ec>)
 8000b10:	222c      	movs	r2, #44	; 0x2c
 8000b12:	701a      	strb	r2, [r3, #0]
	      HAL_UART_Transmit(&huart3, buf, 1, HAL_MAX_DELAY); // Send to Uart3 USB port
 8000b14:	f04f 33ff 	mov.w	r3, #4294967295
 8000b18:	2201      	movs	r2, #1
 8000b1a:	494b      	ldr	r1, [pc, #300]	; (8000c48 <serial_uart+0x1ec>)
 8000b1c:	484b      	ldr	r0, [pc, #300]	; (8000c4c <serial_uart+0x1f0>)
 8000b1e:	f004 f8fa 	bl	8004d16 <HAL_UART_Transmit>

	      sprintf(buf, "%5d", pwmVal);
 8000b22:	4b4d      	ldr	r3, [pc, #308]	; (8000c58 <serial_uart+0x1fc>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	461a      	mov	r2, r3
 8000b28:	4946      	ldr	r1, [pc, #280]	; (8000c44 <serial_uart+0x1e8>)
 8000b2a:	4847      	ldr	r0, [pc, #284]	; (8000c48 <serial_uart+0x1ec>)
 8000b2c:	f005 f8ec 	bl	8005d08 <siprintf>
	      HAL_UART_Transmit(&huart3, buf, 5, HAL_MAX_DELAY); // Send to Uart3 USB port
 8000b30:	f04f 33ff 	mov.w	r3, #4294967295
 8000b34:	2205      	movs	r2, #5
 8000b36:	4944      	ldr	r1, [pc, #272]	; (8000c48 <serial_uart+0x1ec>)
 8000b38:	4844      	ldr	r0, [pc, #272]	; (8000c4c <serial_uart+0x1f0>)
 8000b3a:	f004 f8ec 	bl	8004d16 <HAL_UART_Transmit>
	      OLED_ShowString(40, 20, buf);
 8000b3e:	4a42      	ldr	r2, [pc, #264]	; (8000c48 <serial_uart+0x1ec>)
 8000b40:	2114      	movs	r1, #20
 8000b42:	2028      	movs	r0, #40	; 0x28
 8000b44:	f001 f886 	bl	8001c54 <OLED_ShowString>

	   	  buf[0]=',';
 8000b48:	4b3f      	ldr	r3, [pc, #252]	; (8000c48 <serial_uart+0x1ec>)
 8000b4a:	222c      	movs	r2, #44	; 0x2c
 8000b4c:	701a      	strb	r2, [r3, #0]
	   	  HAL_UART_Transmit(&huart3, buf, 1, HAL_MAX_DELAY); // Send to Uart3 USB port
 8000b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b52:	2201      	movs	r2, #1
 8000b54:	493c      	ldr	r1, [pc, #240]	; (8000c48 <serial_uart+0x1ec>)
 8000b56:	483d      	ldr	r0, [pc, #244]	; (8000c4c <serial_uart+0x1f0>)
 8000b58:	f004 f8dd 	bl	8004d16 <HAL_UART_Transmit>

	   	  sprintf(buf, "%5d", error_area);
 8000b5c:	4b3f      	ldr	r3, [pc, #252]	; (8000c5c <serial_uart+0x200>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	461a      	mov	r2, r3
 8000b62:	4938      	ldr	r1, [pc, #224]	; (8000c44 <serial_uart+0x1e8>)
 8000b64:	4838      	ldr	r0, [pc, #224]	; (8000c48 <serial_uart+0x1ec>)
 8000b66:	f005 f8cf 	bl	8005d08 <siprintf>
	   	  HAL_UART_Transmit(&huart3, buf, 5, HAL_MAX_DELAY); // Send to Uart3 USB port
 8000b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6e:	2205      	movs	r2, #5
 8000b70:	4935      	ldr	r1, [pc, #212]	; (8000c48 <serial_uart+0x1ec>)
 8000b72:	4836      	ldr	r0, [pc, #216]	; (8000c4c <serial_uart+0x1f0>)
 8000b74:	f004 f8cf 	bl	8004d16 <HAL_UART_Transmit>

	   	  buf[0]=',';
 8000b78:	4b33      	ldr	r3, [pc, #204]	; (8000c48 <serial_uart+0x1ec>)
 8000b7a:	222c      	movs	r2, #44	; 0x2c
 8000b7c:	701a      	strb	r2, [r3, #0]
	   	  HAL_UART_Transmit(&huart3, buf, 1, HAL_MAX_DELAY); // Send to Uart3 USB port
 8000b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b82:	2201      	movs	r2, #1
 8000b84:	4930      	ldr	r1, [pc, #192]	; (8000c48 <serial_uart+0x1ec>)
 8000b86:	4831      	ldr	r0, [pc, #196]	; (8000c4c <serial_uart+0x1f0>)
 8000b88:	f004 f8c5 	bl	8004d16 <HAL_UART_Transmit>

	   	  sprintf(buf, "%5d", error_change);
 8000b8c:	4b34      	ldr	r3, [pc, #208]	; (8000c60 <serial_uart+0x204>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	461a      	mov	r2, r3
 8000b92:	492c      	ldr	r1, [pc, #176]	; (8000c44 <serial_uart+0x1e8>)
 8000b94:	482c      	ldr	r0, [pc, #176]	; (8000c48 <serial_uart+0x1ec>)
 8000b96:	f005 f8b7 	bl	8005d08 <siprintf>
	   	  HAL_UART_Transmit(&huart3, buf, 5, HAL_MAX_DELAY); // Send to Uart3 USB port
 8000b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b9e:	2205      	movs	r2, #5
 8000ba0:	4929      	ldr	r1, [pc, #164]	; (8000c48 <serial_uart+0x1ec>)
 8000ba2:	482a      	ldr	r0, [pc, #168]	; (8000c4c <serial_uart+0x1f0>)
 8000ba4:	f004 f8b7 	bl	8004d16 <HAL_UART_Transmit>

	   	  buf[0]=',';
 8000ba8:	4b27      	ldr	r3, [pc, #156]	; (8000c48 <serial_uart+0x1ec>)
 8000baa:	222c      	movs	r2, #44	; 0x2c
 8000bac:	701a      	strb	r2, [r3, #0]
	   	  HAL_UART_Transmit(&huart3, buf, 1, HAL_MAX_DELAY); // Send to Uart3 USB port
 8000bae:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	4924      	ldr	r1, [pc, #144]	; (8000c48 <serial_uart+0x1ec>)
 8000bb6:	4825      	ldr	r0, [pc, #148]	; (8000c4c <serial_uart+0x1f0>)
 8000bb8:	f004 f8ad 	bl	8004d16 <HAL_UART_Transmit>

	   	  sprintf(buf, "%5d", error_rate);
 8000bbc:	4b29      	ldr	r3, [pc, #164]	; (8000c64 <serial_uart+0x208>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	4920      	ldr	r1, [pc, #128]	; (8000c44 <serial_uart+0x1e8>)
 8000bc4:	4820      	ldr	r0, [pc, #128]	; (8000c48 <serial_uart+0x1ec>)
 8000bc6:	f005 f89f 	bl	8005d08 <siprintf>
	   	  HAL_UART_Transmit(&huart3, buf, 5, HAL_MAX_DELAY); // Send to Uart3 USB port
 8000bca:	f04f 33ff 	mov.w	r3, #4294967295
 8000bce:	2205      	movs	r2, #5
 8000bd0:	491d      	ldr	r1, [pc, #116]	; (8000c48 <serial_uart+0x1ec>)
 8000bd2:	481e      	ldr	r0, [pc, #120]	; (8000c4c <serial_uart+0x1f0>)
 8000bd4:	f004 f89f 	bl	8004d16 <HAL_UART_Transmit>

	      buf[0]=',';
 8000bd8:	4b1b      	ldr	r3, [pc, #108]	; (8000c48 <serial_uart+0x1ec>)
 8000bda:	222c      	movs	r2, #44	; 0x2c
 8000bdc:	701a      	strb	r2, [r3, #0]
	   	  HAL_UART_Transmit(&huart3, buf, 1, HAL_MAX_DELAY); // Send to Uart3 USB port
 8000bde:	f04f 33ff 	mov.w	r3, #4294967295
 8000be2:	2201      	movs	r2, #1
 8000be4:	4918      	ldr	r1, [pc, #96]	; (8000c48 <serial_uart+0x1ec>)
 8000be6:	4819      	ldr	r0, [pc, #100]	; (8000c4c <serial_uart+0x1f0>)
 8000be8:	f004 f895 	bl	8004d16 <HAL_UART_Transmit>

	  	  sprintf(buf, "%4d ", speed);  // RPM speed of the DC motor
 8000bec:	4b1e      	ldr	r3, [pc, #120]	; (8000c68 <serial_uart+0x20c>)
 8000bee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	491d      	ldr	r1, [pc, #116]	; (8000c6c <serial_uart+0x210>)
 8000bf6:	4814      	ldr	r0, [pc, #80]	; (8000c48 <serial_uart+0x1ec>)
 8000bf8:	f005 f886 	bl	8005d08 <siprintf>
	   	  HAL_UART_Transmit(&huart3, buf, 5, HAL_MAX_DELAY); // Send to Uart3 USB port
 8000bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8000c00:	2205      	movs	r2, #5
 8000c02:	4911      	ldr	r1, [pc, #68]	; (8000c48 <serial_uart+0x1ec>)
 8000c04:	4811      	ldr	r0, [pc, #68]	; (8000c4c <serial_uart+0x1f0>)
 8000c06:	f004 f886 	bl	8004d16 <HAL_UART_Transmit>
	  	  OLED_ShowString(40, 30, buf);
 8000c0a:	4a0f      	ldr	r2, [pc, #60]	; (8000c48 <serial_uart+0x1ec>)
 8000c0c:	211e      	movs	r1, #30
 8000c0e:	2028      	movs	r0, #40	; 0x28
 8000c10:	f001 f820 	bl	8001c54 <OLED_ShowString>
	      OLED_Refresh_Gram();
 8000c14:	f000 fef4 	bl	8001a00 <OLED_Refresh_Gram>

	   	  buf[0] = '\r';
 8000c18:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <serial_uart+0x1ec>)
 8000c1a:	220d      	movs	r2, #13
 8000c1c:	701a      	strb	r2, [r3, #0]
	   	  buf[1] = '\n';  // move to next line on serial port
 8000c1e:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <serial_uart+0x1ec>)
 8000c20:	220a      	movs	r2, #10
 8000c22:	705a      	strb	r2, [r3, #1]
	   	  HAL_UART_Transmit(&huart3, buf, 2, HAL_MAX_DELAY); // Send through USB port
 8000c24:	f04f 33ff 	mov.w	r3, #4294967295
 8000c28:	2202      	movs	r2, #2
 8000c2a:	4907      	ldr	r1, [pc, #28]	; (8000c48 <serial_uart+0x1ec>)
 8000c2c:	4807      	ldr	r0, [pc, #28]	; (8000c4c <serial_uart+0x1f0>)
 8000c2e:	f004 f872 	bl	8004d16 <HAL_UART_Transmit>
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20000398 	.word	0x20000398
 8000c3c:	3dd38ff1 	.word	0x3dd38ff1
 8000c40:	2000039a 	.word	0x2000039a
 8000c44:	0800664c 	.word	0x0800664c
 8000c48:	20000384 	.word	0x20000384
 8000c4c:	20000324 	.word	0x20000324
 8000c50:	2000039c 	.word	0x2000039c
 8000c54:	200003a0 	.word	0x200003a0
 8000c58:	20000378 	.word	0x20000378
 8000c5c:	200003a4 	.word	0x200003a4
 8000c60:	200003ac 	.word	0x200003ac
 8000c64:	200003b0 	.word	0x200003b0
 8000c68:	2000036e 	.word	0x2000036e
 8000c6c:	08006650 	.word	0x08006650

08000c70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c76:	f001 fc6b 	bl	8002550 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c7a:	f000 f9cf 	bl	800101c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c7e:	f000 fdb9 	bl	80017f4 <MX_GPIO_Init>
  MX_TIM8_Init();
 8000c82:	f000 fcc9 	bl	8001618 <MX_TIM8_Init>
  MX_TIM2_Init();
 8000c86:	f000 fb25 	bl	80012d4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000c8a:	f000 fd5f 	bl	800174c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000c8e:	f000 fa5b 	bl	8001148 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000c92:	f000 fd85 	bl	80017a0 <MX_USART3_UART_Init>
  MX_I2C2_Init();
 8000c96:	f000 fa29 	bl	80010ec <MX_I2C2_Init>
  MX_TIM5_Init();
 8000c9a:	f000 fc69 	bl	8001570 <MX_TIM5_Init>
  MX_TIM4_Init();
 8000c9e:	f000 fbe5 	bl	800146c <MX_TIM4_Init>
  MX_TIM3_Init();
 8000ca2:	f000 fb6b 	bl	800137c <MX_TIM3_Init>
  MX_TIM11_Init();
 8000ca6:	f000 fd07 	bl	80016b8 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */


  MotorDrive_enable(); // enable PWM needed to drive MotroDrive A and D
 8000caa:	f7ff fccf 	bl	800064c <MotorDrive_enable>

  // start TIM2/TIM5-Encoder to read Motor rotation in interrupt mode
  // Hall sensors produce 13 ticks/counts per turn, gear ratio = 20
  // 260 count per rotation of output (wheel)
  // 360 degree = 260 ticks/counts
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL); // Motor Drive A
 8000cae:	213c      	movs	r1, #60	; 0x3c
 8000cb0:	48b5      	ldr	r0, [pc, #724]	; (8000f88 <main+0x318>)
 8000cb2:	f003 f889 	bl	8003dc8 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL); // Motor Drive D
 8000cb6:	213c      	movs	r1, #60	; 0x3c
 8000cb8:	48b4      	ldr	r0, [pc, #720]	; (8000f8c <main+0x31c>)
 8000cba:	f003 f885 	bl	8003dc8 <HAL_TIM_Encoder_Start_IT>
  rpm = (int)((1000/no_of_tick) * 60/260 * 1/dt);  // For calculating motor rpm - by multiplying it with speed value
 8000cbe:	4bb4      	ldr	r3, [pc, #720]	; (8000f90 <main+0x320>)
 8000cc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cca:	fb93 f2f2 	sdiv	r2, r3, r2
 8000cce:	4613      	mov	r3, r2
 8000cd0:	011b      	lsls	r3, r3, #4
 8000cd2:	1a9b      	subs	r3, r3, r2
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	4aaf      	ldr	r2, [pc, #700]	; (8000f94 <main+0x324>)
 8000cd8:	fb82 1203 	smull	r1, r2, r2, r3
 8000cdc:	11d2      	asrs	r2, r2, #7
 8000cde:	17db      	asrs	r3, r3, #31
 8000ce0:	1ad2      	subs	r2, r2, r3
 8000ce2:	4bad      	ldr	r3, [pc, #692]	; (8000f98 <main+0x328>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	fb92 f3f3 	sdiv	r3, r2, r3
 8000cea:	b21a      	sxth	r2, r3
 8000cec:	4bab      	ldr	r3, [pc, #684]	; (8000f9c <main+0x32c>)
 8000cee:	801a      	strh	r2, [r3, #0]

  OLED_Init();
 8000cf0:	f000 ffe2 	bl	8001cb8 <OLED_Init>
  OLED_ShowString(10, 5, "SC2104/CE3002"); // show message on OLED display at line 5)
 8000cf4:	4aaa      	ldr	r2, [pc, #680]	; (8000fa0 <main+0x330>)
 8000cf6:	2105      	movs	r1, #5
 8000cf8:	200a      	movs	r0, #10
 8000cfa:	f000 ffab 	bl	8001c54 <OLED_ShowString>
  OLED_ShowString(40, 30, "Lab 4"); // show message on OLED display at line 30)
 8000cfe:	4aa9      	ldr	r2, [pc, #676]	; (8000fa4 <main+0x334>)
 8000d00:	211e      	movs	r1, #30
 8000d02:	2028      	movs	r0, #40	; 0x28
 8000d04:	f000 ffa6 	bl	8001c54 <OLED_ShowString>
  oled_buf = "Motor Control"; // anther way to show message through buffer
 8000d08:	4ba7      	ldr	r3, [pc, #668]	; (8000fa8 <main+0x338>)
 8000d0a:	613b      	str	r3, [r7, #16]
  OLED_ShowString(10,50, oled_buf); //another message at line 50
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	2132      	movs	r1, #50	; 0x32
 8000d10:	200a      	movs	r0, #10
 8000d12:	f000 ff9f 	bl	8001c54 <OLED_ShowString>

  uint8_t sbuf[] = "SC2104\n\r";  // send to serial port
 8000d16:	4aa5      	ldr	r2, [pc, #660]	; (8000fac <main+0x33c>)
 8000d18:	1d3b      	adds	r3, r7, #4
 8000d1a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d1c:	c303      	stmia	r3!, {r0, r1}
 8000d1e:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart3, sbuf, sizeof(sbuf), HAL_MAX_DELAY); // Send through Serial Port @115200
 8000d20:	1d39      	adds	r1, r7, #4
 8000d22:	f04f 33ff 	mov.w	r3, #4294967295
 8000d26:	2209      	movs	r2, #9
 8000d28:	48a1      	ldr	r0, [pc, #644]	; (8000fb0 <main+0x340>)
 8000d2a:	f003 fff4 	bl	8004d16 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, sbuf, sizeof(sbuf), HAL_MAX_DELAY); // Send through BT @9600
 8000d2e:	1d39      	adds	r1, r7, #4
 8000d30:	f04f 33ff 	mov.w	r3, #4294967295
 8000d34:	2209      	movs	r2, #9
 8000d36:	489f      	ldr	r0, [pc, #636]	; (8000fb4 <main+0x344>)
 8000d38:	f003 ffed 	bl	8004d16 <HAL_UART_Transmit>

  OLED_Refresh_Gram();
 8000d3c:	f000 fe60 	bl	8001a00 <OLED_Refresh_Gram>
  HAL_Delay(3000); // pause for 3 second to show message
 8000d40:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d44:	f001 fc76 	bl	8002634 <HAL_Delay>
  OLED_Clear(); // get display ready
 8000d48:	f000 fe92 	bl	8001a70 <OLED_Clear>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  start = 0;
 8000d4c:	4b9a      	ldr	r3, [pc, #616]	; (8000fb8 <main+0x348>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
  angle = 0;
 8000d52:	4b9a      	ldr	r3, [pc, #616]	; (8000fbc <main+0x34c>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	801a      	strh	r2, [r3, #0]
  target_angle = 1000; // rotate 1000 degree
 8000d58:	4b99      	ldr	r3, [pc, #612]	; (8000fc0 <main+0x350>)
 8000d5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d5e:	801a      	strh	r2, [r3, #0]
  error = target_angle - angle;
 8000d60:	4b97      	ldr	r3, [pc, #604]	; (8000fc0 <main+0x350>)
 8000d62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d66:	b29a      	uxth	r2, r3
 8000d68:	4b94      	ldr	r3, [pc, #592]	; (8000fbc <main+0x34c>)
 8000d6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	b21a      	sxth	r2, r3
 8000d76:	4b93      	ldr	r3, [pc, #588]	; (8000fc4 <main+0x354>)
 8000d78:	801a      	strh	r2, [r3, #0]
  error_old = 0;
 8000d7a:	4b93      	ldr	r3, [pc, #588]	; (8000fc8 <main+0x358>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
  error_area = 0;
 8000d80:	4b92      	ldr	r3, [pc, #584]	; (8000fcc <main+0x35c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]

  // motor drive here
  OLED_Clear();
 8000d86:	f000 fe73 	bl	8001a70 <OLED_Clear>
  OLED_ShowString(0, 0, "Target: ");
 8000d8a:	4a91      	ldr	r2, [pc, #580]	; (8000fd0 <main+0x360>)
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	2000      	movs	r0, #0
 8000d90:	f000 ff60 	bl	8001c54 <OLED_ShowString>
  OLED_ShowString(0, 10, "Rotated: ");
 8000d94:	4a8f      	ldr	r2, [pc, #572]	; (8000fd4 <main+0x364>)
 8000d96:	210a      	movs	r1, #10
 8000d98:	2000      	movs	r0, #0
 8000d9a:	f000 ff5b 	bl	8001c54 <OLED_ShowString>
  OLED_ShowString(0, 30, "RPM = ");
 8000d9e:	4a8e      	ldr	r2, [pc, #568]	; (8000fd8 <main+0x368>)
 8000da0:	211e      	movs	r1, #30
 8000da2:	2000      	movs	r0, #0
 8000da4:	f000 ff56 	bl	8001c54 <OLED_ShowString>
  sprintf(buf, "%4d", target_angle);//Hall Sensor = 26 poles/13 pulses, DC motor = 20x13 = 260 pulse per revolution
 8000da8:	4b85      	ldr	r3, [pc, #532]	; (8000fc0 <main+0x350>)
 8000daa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dae:	461a      	mov	r2, r3
 8000db0:	498a      	ldr	r1, [pc, #552]	; (8000fdc <main+0x36c>)
 8000db2:	488b      	ldr	r0, [pc, #556]	; (8000fe0 <main+0x370>)
 8000db4:	f004 ffa8 	bl	8005d08 <siprintf>
  OLED_ShowString(60, 0, buf);
 8000db8:	4a89      	ldr	r2, [pc, #548]	; (8000fe0 <main+0x370>)
 8000dba:	2100      	movs	r1, #0
 8000dbc:	203c      	movs	r0, #60	; 0x3c
 8000dbe:	f000 ff49 	bl	8001c54 <OLED_ShowString>

  OLED_ShowString(15, 40, "Press User"); // show message on OLED display at line 40)
 8000dc2:	4a88      	ldr	r2, [pc, #544]	; (8000fe4 <main+0x374>)
 8000dc4:	2128      	movs	r1, #40	; 0x28
 8000dc6:	200f      	movs	r0, #15
 8000dc8:	f000 ff44 	bl	8001c54 <OLED_ShowString>
  OLED_ShowString(0, 50, "button to stop"); // show message on OLED display at line 50)
 8000dcc:	4a86      	ldr	r2, [pc, #536]	; (8000fe8 <main+0x378>)
 8000dce:	2132      	movs	r1, #50	; 0x32
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	f000 ff3f 	bl	8001c54 <OLED_ShowString>
  OLED_Refresh_Gram();
 8000dd6:	f000 fe13 	bl	8001a00 <OLED_Refresh_Gram>

  Kp = 7;   // range: 1 to 10
 8000dda:	4b84      	ldr	r3, [pc, #528]	; (8000fec <main+0x37c>)
 8000ddc:	2207      	movs	r2, #7
 8000dde:	801a      	strh	r2, [r3, #0]
  Ki = 1;   // range 0 to 3
 8000de0:	4b83      	ldr	r3, [pc, #524]	; (8000ff0 <main+0x380>)
 8000de2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000de6:	601a      	str	r2, [r3, #0]
  Kd = 1.5;   // range: 0 to 3
 8000de8:	4b82      	ldr	r3, [pc, #520]	; (8000ff4 <main+0x384>)
 8000dea:	2201      	movs	r2, #1
 8000dec:	801a      	strh	r2, [r3, #0]

  if (target_angle > 0)  // Determine rotation direction)
 8000dee:	4b74      	ldr	r3, [pc, #464]	; (8000fc0 <main+0x350>)
 8000df0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	dd03      	ble.n	8000e00 <main+0x190>
     direction = 0;
 8000df8:	4b7f      	ldr	r3, [pc, #508]	; (8000ff8 <main+0x388>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	801a      	strh	r2, [r3, #0]
 8000dfe:	e002      	b.n	8000e06 <main+0x196>
  else
	 direction = 1;
 8000e00:	4b7d      	ldr	r3, [pc, #500]	; (8000ff8 <main+0x388>)
 8000e02:	2201      	movs	r2, #1
 8000e04:	801a      	strh	r2, [r3, #0]

  start = 1; // do a step response upon reset and power up
 8000e06:	4b6c      	ldr	r3, [pc, #432]	; (8000fb8 <main+0x348>)
 8000e08:	2201      	movs	r2, #1
 8000e0a:	601a      	str	r2, [r3, #0]
  MotorDrive_enable(); // enable PWM needed to drive MotroDrive A and D
 8000e0c:	f7ff fc1e 	bl	800064c <MotorDrive_enable>
  millisOld = HAL_GetTick(); // get time value before starting - for PID
 8000e10:	f001 fc04 	bl	800261c <HAL_GetTick>
 8000e14:	4603      	mov	r3, r0
 8000e16:	461a      	mov	r2, r3
 8000e18:	4b78      	ldr	r3, [pc, #480]	; (8000ffc <main+0x38c>)
 8000e1a:	601a      	str	r2, [r3, #0]



  while (1){
  	  if (start==0){ // reset and wait for the User PB to be pressed
 8000e1c:	4b66      	ldr	r3, [pc, #408]	; (8000fb8 <main+0x348>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d136      	bne.n	8000e92 <main+0x222>
  		  Motor_stop();
 8000e24:	f7ff fc2a 	bl	800067c <Motor_stop>
      	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10); // LED
 8000e28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e2c:	4874      	ldr	r0, [pc, #464]	; (8001000 <main+0x390>)
 8000e2e:	f001 ff7e 	bl	8002d2e <HAL_GPIO_TogglePin>
      	  OLED_ShowString(15, 40, "Press User"); // show message on OLED display at line 40)
 8000e32:	4a6c      	ldr	r2, [pc, #432]	; (8000fe4 <main+0x374>)
 8000e34:	2128      	movs	r1, #40	; 0x28
 8000e36:	200f      	movs	r0, #15
 8000e38:	f000 ff0c 	bl	8001c54 <OLED_ShowString>
      	  OLED_ShowString(0, 50, "button to start"); // show message on OLED display at line 50)
 8000e3c:	4a71      	ldr	r2, [pc, #452]	; (8001004 <main+0x394>)
 8000e3e:	2132      	movs	r1, #50	; 0x32
 8000e40:	2000      	movs	r0, #0
 8000e42:	f000 ff07 	bl	8001c54 <OLED_ShowString>
      	  OLED_Refresh_Gram();
 8000e46:	f000 fddb 	bl	8001a00 <OLED_Refresh_Gram>
      	  err = 0;// for checking whether error has settle down near to zero
 8000e4a:	4b6f      	ldr	r3, [pc, #444]	; (8001008 <main+0x398>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
      	  angle = 0;
 8000e50:	4b5a      	ldr	r3, [pc, #360]	; (8000fbc <main+0x34c>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	801a      	strh	r2, [r3, #0]
      	  error_old = 0;
 8000e56:	4b5c      	ldr	r3, [pc, #368]	; (8000fc8 <main+0x358>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
      	  error_area = 0;
 8000e5c:	4b5b      	ldr	r3, [pc, #364]	; (8000fcc <main+0x35c>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
      	  error = target_angle - angle;
 8000e62:	4b57      	ldr	r3, [pc, #348]	; (8000fc0 <main+0x350>)
 8000e64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e68:	b29a      	uxth	r2, r3
 8000e6a:	4b54      	ldr	r3, [pc, #336]	; (8000fbc <main+0x34c>)
 8000e6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	b29b      	uxth	r3, r3
 8000e76:	b21a      	sxth	r2, r3
 8000e78:	4b52      	ldr	r3, [pc, #328]	; (8000fc4 <main+0x354>)
 8000e7a:	801a      	strh	r2, [r3, #0]
  	      }
  	  while (start==0){ //wait for the User PB to be pressed
 8000e7c:	e009      	b.n	8000e92 <main+0x222>
      	  HAL_Delay(500);
 8000e7e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e82:	f001 fbd7 	bl	8002634 <HAL_Delay>
      	  millisOld = HAL_GetTick(); // get time value before starting - for PID
 8000e86:	f001 fbc9 	bl	800261c <HAL_GetTick>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4b5b      	ldr	r3, [pc, #364]	; (8000ffc <main+0x38c>)
 8000e90:	601a      	str	r2, [r3, #0]
  	  while (start==0){ //wait for the User PB to be pressed
 8000e92:	4b49      	ldr	r3, [pc, #292]	; (8000fb8 <main+0x348>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d0f1      	beq.n	8000e7e <main+0x20e>
  		  }

  	  pwmVal = PID_Control(); // call the PID control loop calculation
 8000e9a:	f7ff fc7b 	bl	8000794 <PID_Control>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4b5a      	ldr	r3, [pc, #360]	; (800100c <main+0x39c>)
 8000ea4:	601a      	str	r2, [r3, #0]
  	  //pwmVal = 500;          // this will overwrite PID control above
  	  error = 5;              // to overwrite control loop checking
 8000ea6:	4b47      	ldr	r3, [pc, #284]	; (8000fc4 <main+0x354>)
 8000ea8:	2205      	movs	r2, #5
 8000eaa:	801a      	strh	r2, [r3, #0]

  	  if (direction == 0)
 8000eac:	4b52      	ldr	r3, [pc, #328]	; (8000ff8 <main+0x388>)
 8000eae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d105      	bne.n	8000ec2 <main+0x252>
  		  Motor_reverse(pwmVal);
 8000eb6:	4b55      	ldr	r3, [pc, #340]	; (800100c <main+0x39c>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff fc44 	bl	8000748 <Motor_reverse>
 8000ec0:	e004      	b.n	8000ecc <main+0x25c>
  	  else
  		  Motor_forward(pwmVal);
 8000ec2:	4b52      	ldr	r3, [pc, #328]	; (800100c <main+0x39c>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff fc18 	bl	80006fc <Motor_forward>

  	  if (abs(error) <= 3){ // error is not more than 3 deg - assume steady state
 8000ecc:	4b3d      	ldr	r3, [pc, #244]	; (8000fc4 <main+0x354>)
 8000ece:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	bfb8      	it	lt
 8000ed6:	425b      	neglt	r3, r3
 8000ed8:	b29b      	uxth	r3, r3
 8000eda:	2b03      	cmp	r3, #3
 8000edc:	d822      	bhi.n	8000f24 <main+0x2b4>
  	      err++; // to keep track how long it has reached steady state
 8000ede:	4b4a      	ldr	r3, [pc, #296]	; (8001008 <main+0x398>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	4a48      	ldr	r2, [pc, #288]	; (8001008 <main+0x398>)
 8000ee6:	6013      	str	r3, [r2, #0]
  	      angle = (int)(position*360/260);  //calculate the angle
 8000ee8:	4b49      	ldr	r3, [pc, #292]	; (8001010 <main+0x3a0>)
 8000eea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eee:	461a      	mov	r2, r3
 8000ef0:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8000ef4:	fb02 f303 	mul.w	r3, r2, r3
 8000ef8:	4a26      	ldr	r2, [pc, #152]	; (8000f94 <main+0x324>)
 8000efa:	fb82 1203 	smull	r1, r2, r2, r3
 8000efe:	11d2      	asrs	r2, r2, #7
 8000f00:	17db      	asrs	r3, r3, #31
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	b21a      	sxth	r2, r3
 8000f06:	4b2d      	ldr	r3, [pc, #180]	; (8000fbc <main+0x34c>)
 8000f08:	801a      	strh	r2, [r3, #0]
  	      error = target_angle - angle; // calculate the error
 8000f0a:	4b2d      	ldr	r3, [pc, #180]	; (8000fc0 <main+0x350>)
 8000f0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f10:	b29a      	uxth	r2, r3
 8000f12:	4b2a      	ldr	r3, [pc, #168]	; (8000fbc <main+0x34c>)
 8000f14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	1ad3      	subs	r3, r2, r3
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	b21a      	sxth	r2, r3
 8000f20:	4b28      	ldr	r3, [pc, #160]	; (8000fc4 <main+0x354>)
 8000f22:	801a      	strh	r2, [r3, #0]
  	      }

  	  serial_uart(); // send the various data to the serial port for display
 8000f24:	f7ff fd9a 	bl	8000a5c <serial_uart>

      if (err > 5) { // error has settled to within the acceptance ranges
 8000f28:	4b37      	ldr	r3, [pc, #220]	; (8001008 <main+0x398>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2b05      	cmp	r3, #5
 8000f2e:	dd1d      	ble.n	8000f6c <main+0x2fc>
         Motor_stop();
 8000f30:	f7ff fba4 	bl	800067c <Motor_stop>

         for (i=0; i<50; i++)
 8000f34:	2300      	movs	r3, #0
 8000f36:	75fb      	strb	r3, [r7, #23]
 8000f38:	e004      	b.n	8000f44 <main+0x2d4>
     	    serial_uart();
 8000f3a:	f7ff fd8f 	bl	8000a5c <serial_uart>
         for (i=0; i<50; i++)
 8000f3e:	7dfb      	ldrb	r3, [r7, #23]
 8000f40:	3301      	adds	r3, #1
 8000f42:	75fb      	strb	r3, [r7, #23]
 8000f44:	7dfb      	ldrb	r3, [r7, #23]
 8000f46:	2b31      	cmp	r3, #49	; 0x31
 8000f48:	d9f7      	bls.n	8000f3a <main+0x2ca>

     	 start = 0;  // wait for PB to restart
 8000f4a:	4b1b      	ldr	r3, [pc, #108]	; (8000fb8 <main+0x348>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
  		 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10); //Buzzer On
 8000f50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f54:	482f      	ldr	r0, [pc, #188]	; (8001014 <main+0x3a4>)
 8000f56:	f001 feea 	bl	8002d2e <HAL_GPIO_TogglePin>
     	 HAL_Delay(500);
 8000f5a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f5e:	f001 fb69 	bl	8002634 <HAL_Delay>
  		 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10); //Buzzer Off
 8000f62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f66:	482b      	ldr	r0, [pc, #172]	; (8001014 <main+0x3a4>)
 8000f68:	f001 fee1 	bl	8002d2e <HAL_GPIO_TogglePin>
         }//if

      OLED_ShowString(15, 40, "Press User"); // show message on OLED display at line 40)
 8000f6c:	4a1d      	ldr	r2, [pc, #116]	; (8000fe4 <main+0x374>)
 8000f6e:	2128      	movs	r1, #40	; 0x28
 8000f70:	200f      	movs	r0, #15
 8000f72:	f000 fe6f 	bl	8001c54 <OLED_ShowString>
      OLED_ShowString(0, 50, "button to stop "); // show message on OLED display at line 50)
 8000f76:	4a28      	ldr	r2, [pc, #160]	; (8001018 <main+0x3a8>)
 8000f78:	2132      	movs	r1, #50	; 0x32
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	f000 fe6a 	bl	8001c54 <OLED_ShowString>
      OLED_Refresh_Gram();
 8000f80:	f000 fd3e 	bl	8001a00 <OLED_Refresh_Gram>
  	  if (start==0){ // reset and wait for the User PB to be pressed
 8000f84:	e74a      	b.n	8000e1c <main+0x1ac>
 8000f86:	bf00      	nop
 8000f88:	20000130 	.word	0x20000130
 8000f8c:	20000208 	.word	0x20000208
 8000f90:	20000000 	.word	0x20000000
 8000f94:	7e07e07f 	.word	0x7e07e07f
 8000f98:	200003bc 	.word	0x200003bc
 8000f9c:	20000370 	.word	0x20000370
 8000fa0:	08006658 	.word	0x08006658
 8000fa4:	08006668 	.word	0x08006668
 8000fa8:	08006670 	.word	0x08006670
 8000fac:	080066e0 	.word	0x080066e0
 8000fb0:	20000324 	.word	0x20000324
 8000fb4:	200002e0 	.word	0x200002e0
 8000fb8:	20000374 	.word	0x20000374
 8000fbc:	2000039a 	.word	0x2000039a
 8000fc0:	2000039c 	.word	0x2000039c
 8000fc4:	200003a0 	.word	0x200003a0
 8000fc8:	200003a8 	.word	0x200003a8
 8000fcc:	200003a4 	.word	0x200003a4
 8000fd0:	08006680 	.word	0x08006680
 8000fd4:	0800668c 	.word	0x0800668c
 8000fd8:	08006698 	.word	0x08006698
 8000fdc:	080066a0 	.word	0x080066a0
 8000fe0:	20000384 	.word	0x20000384
 8000fe4:	080066a4 	.word	0x080066a4
 8000fe8:	080066b0 	.word	0x080066b0
 8000fec:	200003c0 	.word	0x200003c0
 8000ff0:	200003c4 	.word	0x200003c4
 8000ff4:	200003c2 	.word	0x200003c2
 8000ff8:	2000039e 	.word	0x2000039e
 8000ffc:	200003b4 	.word	0x200003b4
 8001000:	40021000 	.word	0x40021000
 8001004:	080066c0 	.word	0x080066c0
 8001008:	20000380 	.word	0x20000380
 800100c:	20000378 	.word	0x20000378
 8001010:	20000398 	.word	0x20000398
 8001014:	40020400 	.word	0x40020400
 8001018:	080066d0 	.word	0x080066d0

0800101c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b094      	sub	sp, #80	; 0x50
 8001020:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001022:	f107 0320 	add.w	r3, r7, #32
 8001026:	2230      	movs	r2, #48	; 0x30
 8001028:	2100      	movs	r1, #0
 800102a:	4618      	mov	r0, r3
 800102c:	f004 fe64 	bl	8005cf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001030:	f107 030c 	add.w	r3, r7, #12
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001040:	2300      	movs	r3, #0
 8001042:	60bb      	str	r3, [r7, #8]
 8001044:	4b27      	ldr	r3, [pc, #156]	; (80010e4 <SystemClock_Config+0xc8>)
 8001046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001048:	4a26      	ldr	r2, [pc, #152]	; (80010e4 <SystemClock_Config+0xc8>)
 800104a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800104e:	6413      	str	r3, [r2, #64]	; 0x40
 8001050:	4b24      	ldr	r3, [pc, #144]	; (80010e4 <SystemClock_Config+0xc8>)
 8001052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800105c:	2300      	movs	r3, #0
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	4b21      	ldr	r3, [pc, #132]	; (80010e8 <SystemClock_Config+0xcc>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a20      	ldr	r2, [pc, #128]	; (80010e8 <SystemClock_Config+0xcc>)
 8001066:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800106a:	6013      	str	r3, [r2, #0]
 800106c:	4b1e      	ldr	r3, [pc, #120]	; (80010e8 <SystemClock_Config+0xcc>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001078:	2301      	movs	r3, #1
 800107a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800107c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001080:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001082:	2302      	movs	r3, #2
 8001084:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001086:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800108a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800108c:	2304      	movs	r3, #4
 800108e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001090:	2348      	movs	r3, #72	; 0x48
 8001092:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001094:	2302      	movs	r3, #2
 8001096:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001098:	2304      	movs	r3, #4
 800109a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800109c:	f107 0320 	add.w	r3, r7, #32
 80010a0:	4618      	mov	r0, r3
 80010a2:	f001 ffe3 	bl	800306c <HAL_RCC_OscConfig>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010ac:	f000 fc54 	bl	8001958 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010b0:	230f      	movs	r3, #15
 80010b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010b4:	2302      	movs	r3, #2
 80010b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010c6:	f107 030c 	add.w	r3, r7, #12
 80010ca:	2102      	movs	r1, #2
 80010cc:	4618      	mov	r0, r3
 80010ce:	f002 fa45 	bl	800355c <HAL_RCC_ClockConfig>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80010d8:	f000 fc3e 	bl	8001958 <Error_Handler>
  }
}
 80010dc:	bf00      	nop
 80010de:	3750      	adds	r7, #80	; 0x50
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40007000 	.word	0x40007000

080010ec <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80010f0:	4b12      	ldr	r3, [pc, #72]	; (800113c <MX_I2C2_Init+0x50>)
 80010f2:	4a13      	ldr	r2, [pc, #76]	; (8001140 <MX_I2C2_Init+0x54>)
 80010f4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80010f6:	4b11      	ldr	r3, [pc, #68]	; (800113c <MX_I2C2_Init+0x50>)
 80010f8:	4a12      	ldr	r2, [pc, #72]	; (8001144 <MX_I2C2_Init+0x58>)
 80010fa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010fc:	4b0f      	ldr	r3, [pc, #60]	; (800113c <MX_I2C2_Init+0x50>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001102:	4b0e      	ldr	r3, [pc, #56]	; (800113c <MX_I2C2_Init+0x50>)
 8001104:	2200      	movs	r2, #0
 8001106:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001108:	4b0c      	ldr	r3, [pc, #48]	; (800113c <MX_I2C2_Init+0x50>)
 800110a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800110e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001110:	4b0a      	ldr	r3, [pc, #40]	; (800113c <MX_I2C2_Init+0x50>)
 8001112:	2200      	movs	r2, #0
 8001114:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001116:	4b09      	ldr	r3, [pc, #36]	; (800113c <MX_I2C2_Init+0x50>)
 8001118:	2200      	movs	r2, #0
 800111a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800111c:	4b07      	ldr	r3, [pc, #28]	; (800113c <MX_I2C2_Init+0x50>)
 800111e:	2200      	movs	r2, #0
 8001120:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001122:	4b06      	ldr	r3, [pc, #24]	; (800113c <MX_I2C2_Init+0x50>)
 8001124:	2200      	movs	r2, #0
 8001126:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001128:	4804      	ldr	r0, [pc, #16]	; (800113c <MX_I2C2_Init+0x50>)
 800112a:	f001 fe33 	bl	8002d94 <HAL_I2C_Init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001134:	f000 fc10 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20000094 	.word	0x20000094
 8001140:	40005800 	.word	0x40005800
 8001144:	000186a0 	.word	0x000186a0

08001148 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b096      	sub	sp, #88	; 0x58
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800114e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]
 800115a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800115c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001166:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	60da      	str	r2, [r3, #12]
 8001174:	611a      	str	r2, [r3, #16]
 8001176:	615a      	str	r2, [r3, #20]
 8001178:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	2220      	movs	r2, #32
 800117e:	2100      	movs	r1, #0
 8001180:	4618      	mov	r0, r3
 8001182:	f004 fdb9 	bl	8005cf8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001186:	4b51      	ldr	r3, [pc, #324]	; (80012cc <MX_TIM1_Init+0x184>)
 8001188:	4a51      	ldr	r2, [pc, #324]	; (80012d0 <MX_TIM1_Init+0x188>)
 800118a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800118c:	4b4f      	ldr	r3, [pc, #316]	; (80012cc <MX_TIM1_Init+0x184>)
 800118e:	2200      	movs	r2, #0
 8001190:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001192:	4b4e      	ldr	r3, [pc, #312]	; (80012cc <MX_TIM1_Init+0x184>)
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7199;
 8001198:	4b4c      	ldr	r3, [pc, #304]	; (80012cc <MX_TIM1_Init+0x184>)
 800119a:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800119e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a0:	4b4a      	ldr	r3, [pc, #296]	; (80012cc <MX_TIM1_Init+0x184>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011a6:	4b49      	ldr	r3, [pc, #292]	; (80012cc <MX_TIM1_Init+0x184>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ac:	4b47      	ldr	r3, [pc, #284]	; (80012cc <MX_TIM1_Init+0x184>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011b2:	4846      	ldr	r0, [pc, #280]	; (80012cc <MX_TIM1_Init+0x184>)
 80011b4:	f002 fbf2 	bl	800399c <HAL_TIM_Base_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80011be:	f000 fbcb 	bl	8001958 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011c8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011cc:	4619      	mov	r1, r3
 80011ce:	483f      	ldr	r0, [pc, #252]	; (80012cc <MX_TIM1_Init+0x184>)
 80011d0:	f003 f872 	bl	80042b8 <HAL_TIM_ConfigClockSource>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80011da:	f000 fbbd 	bl	8001958 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011de:	483b      	ldr	r0, [pc, #236]	; (80012cc <MX_TIM1_Init+0x184>)
 80011e0:	f002 fc2b 	bl	8003a3a <HAL_TIM_PWM_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80011ea:	f000 fbb5 	bl	8001958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ee:	2300      	movs	r3, #0
 80011f0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f2:	2300      	movs	r3, #0
 80011f4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011fa:	4619      	mov	r1, r3
 80011fc:	4833      	ldr	r0, [pc, #204]	; (80012cc <MX_TIM1_Init+0x184>)
 80011fe:	f003 fc5b 	bl	8004ab8 <HAL_TIMEx_MasterConfigSynchronization>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001208:	f000 fba6 	bl	8001958 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800120c:	2360      	movs	r3, #96	; 0x60
 800120e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001210:	2300      	movs	r3, #0
 8001212:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001214:	2300      	movs	r3, #0
 8001216:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001218:	2300      	movs	r3, #0
 800121a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800121c:	2300      	movs	r3, #0
 800121e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001220:	2300      	movs	r3, #0
 8001222:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001224:	2300      	movs	r3, #0
 8001226:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001228:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800122c:	2200      	movs	r2, #0
 800122e:	4619      	mov	r1, r3
 8001230:	4826      	ldr	r0, [pc, #152]	; (80012cc <MX_TIM1_Init+0x184>)
 8001232:	f002 ff7f 	bl	8004134 <HAL_TIM_PWM_ConfigChannel>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800123c:	f000 fb8c 	bl	8001958 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001240:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001244:	2204      	movs	r2, #4
 8001246:	4619      	mov	r1, r3
 8001248:	4820      	ldr	r0, [pc, #128]	; (80012cc <MX_TIM1_Init+0x184>)
 800124a:	f002 ff73 	bl	8004134 <HAL_TIM_PWM_ConfigChannel>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001254:	f000 fb80 	bl	8001958 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001258:	2302      	movs	r3, #2
 800125a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800125c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001260:	2208      	movs	r2, #8
 8001262:	4619      	mov	r1, r3
 8001264:	4819      	ldr	r0, [pc, #100]	; (80012cc <MX_TIM1_Init+0x184>)
 8001266:	f002 ff65 	bl	8004134 <HAL_TIM_PWM_ConfigChannel>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001270:	f000 fb72 	bl	8001958 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001274:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001278:	220c      	movs	r2, #12
 800127a:	4619      	mov	r1, r3
 800127c:	4813      	ldr	r0, [pc, #76]	; (80012cc <MX_TIM1_Init+0x184>)
 800127e:	f002 ff59 	bl	8004134 <HAL_TIM_PWM_ConfigChannel>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001288:	f000 fb66 	bl	8001958 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800128c:	2300      	movs	r3, #0
 800128e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001290:	2300      	movs	r3, #0
 8001292:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001294:	2300      	movs	r3, #0
 8001296:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012a4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012a6:	2300      	movs	r3, #0
 80012a8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	4619      	mov	r1, r3
 80012ae:	4807      	ldr	r0, [pc, #28]	; (80012cc <MX_TIM1_Init+0x184>)
 80012b0:	f003 fc7e 	bl	8004bb0 <HAL_TIMEx_ConfigBreakDeadTime>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_TIM1_Init+0x176>
  {
    Error_Handler();
 80012ba:	f000 fb4d 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012be:	4803      	ldr	r0, [pc, #12]	; (80012cc <MX_TIM1_Init+0x184>)
 80012c0:	f000 ff48 	bl	8002154 <HAL_TIM_MspPostInit>

}
 80012c4:	bf00      	nop
 80012c6:	3758      	adds	r7, #88	; 0x58
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	200000e8 	.word	0x200000e8
 80012d0:	40010000 	.word	0x40010000

080012d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08c      	sub	sp, #48	; 0x30
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012da:	f107 030c 	add.w	r3, r7, #12
 80012de:	2224      	movs	r2, #36	; 0x24
 80012e0:	2100      	movs	r1, #0
 80012e2:	4618      	mov	r0, r3
 80012e4:	f004 fd08 	bl	8005cf8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e8:	1d3b      	adds	r3, r7, #4
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012f0:	4b21      	ldr	r3, [pc, #132]	; (8001378 <MX_TIM2_Init+0xa4>)
 80012f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80012f8:	4b1f      	ldr	r3, [pc, #124]	; (8001378 <MX_TIM2_Init+0xa4>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012fe:	4b1e      	ldr	r3, [pc, #120]	; (8001378 <MX_TIM2_Init+0xa4>)
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001304:	4b1c      	ldr	r3, [pc, #112]	; (8001378 <MX_TIM2_Init+0xa4>)
 8001306:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800130a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800130c:	4b1a      	ldr	r3, [pc, #104]	; (8001378 <MX_TIM2_Init+0xa4>)
 800130e:	2200      	movs	r2, #0
 8001310:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001312:	4b19      	ldr	r3, [pc, #100]	; (8001378 <MX_TIM2_Init+0xa4>)
 8001314:	2200      	movs	r2, #0
 8001316:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001318:	2301      	movs	r3, #1
 800131a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800131c:	2300      	movs	r3, #0
 800131e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001320:	2301      	movs	r3, #1
 8001322:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001324:	2300      	movs	r3, #0
 8001326:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800132c:	2300      	movs	r3, #0
 800132e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001330:	2301      	movs	r3, #1
 8001332:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001334:	2300      	movs	r3, #0
 8001336:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800133c:	f107 030c 	add.w	r3, r7, #12
 8001340:	4619      	mov	r1, r3
 8001342:	480d      	ldr	r0, [pc, #52]	; (8001378 <MX_TIM2_Init+0xa4>)
 8001344:	f002 fc9a 	bl	8003c7c <HAL_TIM_Encoder_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800134e:	f000 fb03 	bl	8001958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001352:	2300      	movs	r3, #0
 8001354:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001356:	2300      	movs	r3, #0
 8001358:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	4619      	mov	r1, r3
 800135e:	4806      	ldr	r0, [pc, #24]	; (8001378 <MX_TIM2_Init+0xa4>)
 8001360:	f003 fbaa 	bl	8004ab8 <HAL_TIMEx_MasterConfigSynchronization>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800136a:	f000 faf5 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800136e:	bf00      	nop
 8001370:	3730      	adds	r7, #48	; 0x30
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000130 	.word	0x20000130

0800137c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08e      	sub	sp, #56	; 0x38
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001382:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001390:	f107 0320 	add.w	r3, r7, #32
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
 80013a8:	615a      	str	r2, [r3, #20]
 80013aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013ac:	4b2d      	ldr	r3, [pc, #180]	; (8001464 <MX_TIM3_Init+0xe8>)
 80013ae:	4a2e      	ldr	r2, [pc, #184]	; (8001468 <MX_TIM3_Init+0xec>)
 80013b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 720;
 80013b2:	4b2c      	ldr	r3, [pc, #176]	; (8001464 <MX_TIM3_Init+0xe8>)
 80013b4:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 80013b8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ba:	4b2a      	ldr	r3, [pc, #168]	; (8001464 <MX_TIM3_Init+0xe8>)
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 80013c0:	4b28      	ldr	r3, [pc, #160]	; (8001464 <MX_TIM3_Init+0xe8>)
 80013c2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80013c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c8:	4b26      	ldr	r3, [pc, #152]	; (8001464 <MX_TIM3_Init+0xe8>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ce:	4b25      	ldr	r3, [pc, #148]	; (8001464 <MX_TIM3_Init+0xe8>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013d4:	4823      	ldr	r0, [pc, #140]	; (8001464 <MX_TIM3_Init+0xe8>)
 80013d6:	f002 fae1 	bl	800399c <HAL_TIM_Base_Init>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80013e0:	f000 faba 	bl	8001958 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013ee:	4619      	mov	r1, r3
 80013f0:	481c      	ldr	r0, [pc, #112]	; (8001464 <MX_TIM3_Init+0xe8>)
 80013f2:	f002 ff61 	bl	80042b8 <HAL_TIM_ConfigClockSource>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80013fc:	f000 faac 	bl	8001958 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001400:	4818      	ldr	r0, [pc, #96]	; (8001464 <MX_TIM3_Init+0xe8>)
 8001402:	f002 fb1a 	bl	8003a3a <HAL_TIM_PWM_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800140c:	f000 faa4 	bl	8001958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001410:	2300      	movs	r3, #0
 8001412:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001414:	2300      	movs	r3, #0
 8001416:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001418:	f107 0320 	add.w	r3, r7, #32
 800141c:	4619      	mov	r1, r3
 800141e:	4811      	ldr	r0, [pc, #68]	; (8001464 <MX_TIM3_Init+0xe8>)
 8001420:	f003 fb4a 	bl	8004ab8 <HAL_TIMEx_MasterConfigSynchronization>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800142a:	f000 fa95 	bl	8001958 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800142e:	2360      	movs	r3, #96	; 0x60
 8001430:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001432:	2300      	movs	r3, #0
 8001434:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800143e:	1d3b      	adds	r3, r7, #4
 8001440:	220c      	movs	r2, #12
 8001442:	4619      	mov	r1, r3
 8001444:	4807      	ldr	r0, [pc, #28]	; (8001464 <MX_TIM3_Init+0xe8>)
 8001446:	f002 fe75 	bl	8004134 <HAL_TIM_PWM_ConfigChannel>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001450:	f000 fa82 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001454:	4803      	ldr	r0, [pc, #12]	; (8001464 <MX_TIM3_Init+0xe8>)
 8001456:	f000 fe7d 	bl	8002154 <HAL_TIM_MspPostInit>

}
 800145a:	bf00      	nop
 800145c:	3738      	adds	r7, #56	; 0x38
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000178 	.word	0x20000178
 8001468:	40000400 	.word	0x40000400

0800146c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08e      	sub	sp, #56	; 0x38
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001472:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
 800147c:	609a      	str	r2, [r3, #8]
 800147e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001480:	f107 0320 	add.w	r3, r7, #32
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800148a:	1d3b      	adds	r3, r7, #4
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
 8001498:	615a      	str	r2, [r3, #20]
 800149a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800149c:	4b32      	ldr	r3, [pc, #200]	; (8001568 <MX_TIM4_Init+0xfc>)
 800149e:	4a33      	ldr	r2, [pc, #204]	; (800156c <MX_TIM4_Init+0x100>)
 80014a0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80014a2:	4b31      	ldr	r3, [pc, #196]	; (8001568 <MX_TIM4_Init+0xfc>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a8:	4b2f      	ldr	r3, [pc, #188]	; (8001568 <MX_TIM4_Init+0xfc>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7199;
 80014ae:	4b2e      	ldr	r3, [pc, #184]	; (8001568 <MX_TIM4_Init+0xfc>)
 80014b0:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80014b4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b6:	4b2c      	ldr	r3, [pc, #176]	; (8001568 <MX_TIM4_Init+0xfc>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014bc:	4b2a      	ldr	r3, [pc, #168]	; (8001568 <MX_TIM4_Init+0xfc>)
 80014be:	2200      	movs	r2, #0
 80014c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80014c2:	4829      	ldr	r0, [pc, #164]	; (8001568 <MX_TIM4_Init+0xfc>)
 80014c4:	f002 fa6a 	bl	800399c <HAL_TIM_Base_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80014ce:	f000 fa43 	bl	8001958 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80014d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014dc:	4619      	mov	r1, r3
 80014de:	4822      	ldr	r0, [pc, #136]	; (8001568 <MX_TIM4_Init+0xfc>)
 80014e0:	f002 feea 	bl	80042b8 <HAL_TIM_ConfigClockSource>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80014ea:	f000 fa35 	bl	8001958 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80014ee:	481e      	ldr	r0, [pc, #120]	; (8001568 <MX_TIM4_Init+0xfc>)
 80014f0:	f002 faa3 	bl	8003a3a <HAL_TIM_PWM_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80014fa:	f000 fa2d 	bl	8001958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014fe:	2300      	movs	r3, #0
 8001500:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001502:	2300      	movs	r3, #0
 8001504:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001506:	f107 0320 	add.w	r3, r7, #32
 800150a:	4619      	mov	r1, r3
 800150c:	4816      	ldr	r0, [pc, #88]	; (8001568 <MX_TIM4_Init+0xfc>)
 800150e:	f003 fad3 	bl	8004ab8 <HAL_TIMEx_MasterConfigSynchronization>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001518:	f000 fa1e 	bl	8001958 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800151c:	2360      	movs	r3, #96	; 0x60
 800151e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001520:	2300      	movs	r3, #0
 8001522:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001524:	2302      	movs	r3, #2
 8001526:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800152c:	1d3b      	adds	r3, r7, #4
 800152e:	2208      	movs	r2, #8
 8001530:	4619      	mov	r1, r3
 8001532:	480d      	ldr	r0, [pc, #52]	; (8001568 <MX_TIM4_Init+0xfc>)
 8001534:	f002 fdfe 	bl	8004134 <HAL_TIM_PWM_ConfigChannel>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800153e:	f000 fa0b 	bl	8001958 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001542:	1d3b      	adds	r3, r7, #4
 8001544:	220c      	movs	r2, #12
 8001546:	4619      	mov	r1, r3
 8001548:	4807      	ldr	r0, [pc, #28]	; (8001568 <MX_TIM4_Init+0xfc>)
 800154a:	f002 fdf3 	bl	8004134 <HAL_TIM_PWM_ConfigChannel>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001554:	f000 fa00 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001558:	4803      	ldr	r0, [pc, #12]	; (8001568 <MX_TIM4_Init+0xfc>)
 800155a:	f000 fdfb 	bl	8002154 <HAL_TIM_MspPostInit>

}
 800155e:	bf00      	nop
 8001560:	3738      	adds	r7, #56	; 0x38
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	200001c0 	.word	0x200001c0
 800156c:	40000800 	.word	0x40000800

08001570 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08c      	sub	sp, #48	; 0x30
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001576:	f107 030c 	add.w	r3, r7, #12
 800157a:	2224      	movs	r2, #36	; 0x24
 800157c:	2100      	movs	r1, #0
 800157e:	4618      	mov	r0, r3
 8001580:	f004 fbba 	bl	8005cf8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001584:	1d3b      	adds	r3, r7, #4
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800158c:	4b20      	ldr	r3, [pc, #128]	; (8001610 <MX_TIM5_Init+0xa0>)
 800158e:	4a21      	ldr	r2, [pc, #132]	; (8001614 <MX_TIM5_Init+0xa4>)
 8001590:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001592:	4b1f      	ldr	r3, [pc, #124]	; (8001610 <MX_TIM5_Init+0xa0>)
 8001594:	2200      	movs	r2, #0
 8001596:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001598:	4b1d      	ldr	r3, [pc, #116]	; (8001610 <MX_TIM5_Init+0xa0>)
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 800159e:	4b1c      	ldr	r3, [pc, #112]	; (8001610 <MX_TIM5_Init+0xa0>)
 80015a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015a4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a6:	4b1a      	ldr	r3, [pc, #104]	; (8001610 <MX_TIM5_Init+0xa0>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ac:	4b18      	ldr	r3, [pc, #96]	; (8001610 <MX_TIM5_Init+0xa0>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80015b2:	2301      	movs	r3, #1
 80015b4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015b6:	2300      	movs	r3, #0
 80015b8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015ba:	2301      	movs	r3, #1
 80015bc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015be:	2300      	movs	r3, #0
 80015c0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015c6:	2300      	movs	r3, #0
 80015c8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015ca:	2301      	movs	r3, #1
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015ce:	2300      	movs	r3, #0
 80015d0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80015d2:	2300      	movs	r3, #0
 80015d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80015d6:	f107 030c 	add.w	r3, r7, #12
 80015da:	4619      	mov	r1, r3
 80015dc:	480c      	ldr	r0, [pc, #48]	; (8001610 <MX_TIM5_Init+0xa0>)
 80015de:	f002 fb4d 	bl	8003c7c <HAL_TIM_Encoder_Init>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80015e8:	f000 f9b6 	bl	8001958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ec:	2300      	movs	r3, #0
 80015ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f0:	2300      	movs	r3, #0
 80015f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80015f4:	1d3b      	adds	r3, r7, #4
 80015f6:	4619      	mov	r1, r3
 80015f8:	4805      	ldr	r0, [pc, #20]	; (8001610 <MX_TIM5_Init+0xa0>)
 80015fa:	f003 fa5d 	bl	8004ab8 <HAL_TIMEx_MasterConfigSynchronization>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001604:	f000 f9a8 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001608:	bf00      	nop
 800160a:	3730      	adds	r7, #48	; 0x30
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	20000208 	.word	0x20000208
 8001614:	40000c00 	.word	0x40000c00

08001618 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800161e:	f107 0308 	add.w	r3, r7, #8
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	605a      	str	r2, [r3, #4]
 8001628:	609a      	str	r2, [r3, #8]
 800162a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800162c:	463b      	mov	r3, r7
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001634:	4b1e      	ldr	r3, [pc, #120]	; (80016b0 <MX_TIM8_Init+0x98>)
 8001636:	4a1f      	ldr	r2, [pc, #124]	; (80016b4 <MX_TIM8_Init+0x9c>)
 8001638:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800163a:	4b1d      	ldr	r3, [pc, #116]	; (80016b0 <MX_TIM8_Init+0x98>)
 800163c:	2200      	movs	r2, #0
 800163e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001640:	4b1b      	ldr	r3, [pc, #108]	; (80016b0 <MX_TIM8_Init+0x98>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8001646:	4b1a      	ldr	r3, [pc, #104]	; (80016b0 <MX_TIM8_Init+0x98>)
 8001648:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800164c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800164e:	4b18      	ldr	r3, [pc, #96]	; (80016b0 <MX_TIM8_Init+0x98>)
 8001650:	2200      	movs	r2, #0
 8001652:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001654:	4b16      	ldr	r3, [pc, #88]	; (80016b0 <MX_TIM8_Init+0x98>)
 8001656:	2200      	movs	r2, #0
 8001658:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800165a:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <MX_TIM8_Init+0x98>)
 800165c:	2200      	movs	r2, #0
 800165e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001660:	4813      	ldr	r0, [pc, #76]	; (80016b0 <MX_TIM8_Init+0x98>)
 8001662:	f002 f99b 	bl	800399c <HAL_TIM_Base_Init>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 800166c:	f000 f974 	bl	8001958 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001670:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001674:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001676:	f107 0308 	add.w	r3, r7, #8
 800167a:	4619      	mov	r1, r3
 800167c:	480c      	ldr	r0, [pc, #48]	; (80016b0 <MX_TIM8_Init+0x98>)
 800167e:	f002 fe1b 	bl	80042b8 <HAL_TIM_ConfigClockSource>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8001688:	f000 f966 	bl	8001958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800168c:	2300      	movs	r3, #0
 800168e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001690:	2300      	movs	r3, #0
 8001692:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001694:	463b      	mov	r3, r7
 8001696:	4619      	mov	r1, r3
 8001698:	4805      	ldr	r0, [pc, #20]	; (80016b0 <MX_TIM8_Init+0x98>)
 800169a:	f003 fa0d 	bl	8004ab8 <HAL_TIMEx_MasterConfigSynchronization>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 80016a4:	f000 f958 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80016a8:	bf00      	nop
 80016aa:	3718      	adds	r7, #24
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20000250 	.word	0x20000250
 80016b4:	40010400 	.word	0x40010400

080016b8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b088      	sub	sp, #32
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80016be:	1d3b      	adds	r3, r7, #4
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
 80016ca:	611a      	str	r2, [r3, #16]
 80016cc:	615a      	str	r2, [r3, #20]
 80016ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80016d0:	4b1c      	ldr	r3, [pc, #112]	; (8001744 <MX_TIM11_Init+0x8c>)
 80016d2:	4a1d      	ldr	r2, [pc, #116]	; (8001748 <MX_TIM11_Init+0x90>)
 80016d4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80016d6:	4b1b      	ldr	r3, [pc, #108]	; (8001744 <MX_TIM11_Init+0x8c>)
 80016d8:	2200      	movs	r2, #0
 80016da:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016dc:	4b19      	ldr	r3, [pc, #100]	; (8001744 <MX_TIM11_Init+0x8c>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 7199;
 80016e2:	4b18      	ldr	r3, [pc, #96]	; (8001744 <MX_TIM11_Init+0x8c>)
 80016e4:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80016e8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ea:	4b16      	ldr	r3, [pc, #88]	; (8001744 <MX_TIM11_Init+0x8c>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f0:	4b14      	ldr	r3, [pc, #80]	; (8001744 <MX_TIM11_Init+0x8c>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80016f6:	4813      	ldr	r0, [pc, #76]	; (8001744 <MX_TIM11_Init+0x8c>)
 80016f8:	f002 f950 	bl	800399c <HAL_TIM_Base_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8001702:	f000 f929 	bl	8001958 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8001706:	480f      	ldr	r0, [pc, #60]	; (8001744 <MX_TIM11_Init+0x8c>)
 8001708:	f002 f997 	bl	8003a3a <HAL_TIM_PWM_Init>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8001712:	f000 f921 	bl	8001958 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001716:	2360      	movs	r3, #96	; 0x60
 8001718:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800171a:	2300      	movs	r3, #0
 800171c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800171e:	2300      	movs	r3, #0
 8001720:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001722:	2300      	movs	r3, #0
 8001724:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001726:	1d3b      	adds	r3, r7, #4
 8001728:	2200      	movs	r2, #0
 800172a:	4619      	mov	r1, r3
 800172c:	4805      	ldr	r0, [pc, #20]	; (8001744 <MX_TIM11_Init+0x8c>)
 800172e:	f002 fd01 	bl	8004134 <HAL_TIM_PWM_ConfigChannel>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8001738:	f000 f90e 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800173c:	bf00      	nop
 800173e:	3720      	adds	r7, #32
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20000298 	.word	0x20000298
 8001748:	40014800 	.word	0x40014800

0800174c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001750:	4b11      	ldr	r3, [pc, #68]	; (8001798 <MX_USART2_UART_Init+0x4c>)
 8001752:	4a12      	ldr	r2, [pc, #72]	; (800179c <MX_USART2_UART_Init+0x50>)
 8001754:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001756:	4b10      	ldr	r3, [pc, #64]	; (8001798 <MX_USART2_UART_Init+0x4c>)
 8001758:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800175c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800175e:	4b0e      	ldr	r3, [pc, #56]	; (8001798 <MX_USART2_UART_Init+0x4c>)
 8001760:	2200      	movs	r2, #0
 8001762:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001764:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <MX_USART2_UART_Init+0x4c>)
 8001766:	2200      	movs	r2, #0
 8001768:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800176a:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <MX_USART2_UART_Init+0x4c>)
 800176c:	2200      	movs	r2, #0
 800176e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001770:	4b09      	ldr	r3, [pc, #36]	; (8001798 <MX_USART2_UART_Init+0x4c>)
 8001772:	220c      	movs	r2, #12
 8001774:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001776:	4b08      	ldr	r3, [pc, #32]	; (8001798 <MX_USART2_UART_Init+0x4c>)
 8001778:	2200      	movs	r2, #0
 800177a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800177c:	4b06      	ldr	r3, [pc, #24]	; (8001798 <MX_USART2_UART_Init+0x4c>)
 800177e:	2200      	movs	r2, #0
 8001780:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001782:	4805      	ldr	r0, [pc, #20]	; (8001798 <MX_USART2_UART_Init+0x4c>)
 8001784:	f003 fa7a 	bl	8004c7c <HAL_UART_Init>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800178e:	f000 f8e3 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	200002e0 	.word	0x200002e0
 800179c:	40004400 	.word	0x40004400

080017a0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017a4:	4b11      	ldr	r3, [pc, #68]	; (80017ec <MX_USART3_UART_Init+0x4c>)
 80017a6:	4a12      	ldr	r2, [pc, #72]	; (80017f0 <MX_USART3_UART_Init+0x50>)
 80017a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80017aa:	4b10      	ldr	r3, [pc, #64]	; (80017ec <MX_USART3_UART_Init+0x4c>)
 80017ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017b2:	4b0e      	ldr	r3, [pc, #56]	; (80017ec <MX_USART3_UART_Init+0x4c>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017b8:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <MX_USART3_UART_Init+0x4c>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017be:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <MX_USART3_UART_Init+0x4c>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017c4:	4b09      	ldr	r3, [pc, #36]	; (80017ec <MX_USART3_UART_Init+0x4c>)
 80017c6:	220c      	movs	r2, #12
 80017c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ca:	4b08      	ldr	r3, [pc, #32]	; (80017ec <MX_USART3_UART_Init+0x4c>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017d0:	4b06      	ldr	r3, [pc, #24]	; (80017ec <MX_USART3_UART_Init+0x4c>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017d6:	4805      	ldr	r0, [pc, #20]	; (80017ec <MX_USART3_UART_Init+0x4c>)
 80017d8:	f003 fa50 	bl	8004c7c <HAL_UART_Init>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80017e2:	f000 f8b9 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000324 	.word	0x20000324
 80017f0:	40004800 	.word	0x40004800

080017f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b08c      	sub	sp, #48	; 0x30
 80017f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fa:	f107 031c 	add.w	r3, r7, #28
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	605a      	str	r2, [r3, #4]
 8001804:	609a      	str	r2, [r3, #8]
 8001806:	60da      	str	r2, [r3, #12]
 8001808:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	61bb      	str	r3, [r7, #24]
 800180e:	4b4e      	ldr	r3, [pc, #312]	; (8001948 <MX_GPIO_Init+0x154>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	4a4d      	ldr	r2, [pc, #308]	; (8001948 <MX_GPIO_Init+0x154>)
 8001814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001818:	6313      	str	r3, [r2, #48]	; 0x30
 800181a:	4b4b      	ldr	r3, [pc, #300]	; (8001948 <MX_GPIO_Init+0x154>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001822:	61bb      	str	r3, [r7, #24]
 8001824:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
 800182a:	4b47      	ldr	r3, [pc, #284]	; (8001948 <MX_GPIO_Init+0x154>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	4a46      	ldr	r2, [pc, #280]	; (8001948 <MX_GPIO_Init+0x154>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	6313      	str	r3, [r2, #48]	; 0x30
 8001836:	4b44      	ldr	r3, [pc, #272]	; (8001948 <MX_GPIO_Init+0x154>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	617b      	str	r3, [r7, #20]
 8001840:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	613b      	str	r3, [r7, #16]
 8001846:	4b40      	ldr	r3, [pc, #256]	; (8001948 <MX_GPIO_Init+0x154>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	4a3f      	ldr	r2, [pc, #252]	; (8001948 <MX_GPIO_Init+0x154>)
 800184c:	f043 0310 	orr.w	r3, r3, #16
 8001850:	6313      	str	r3, [r2, #48]	; 0x30
 8001852:	4b3d      	ldr	r3, [pc, #244]	; (8001948 <MX_GPIO_Init+0x154>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	f003 0310 	and.w	r3, r3, #16
 800185a:	613b      	str	r3, [r7, #16]
 800185c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	4b39      	ldr	r3, [pc, #228]	; (8001948 <MX_GPIO_Init+0x154>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	4a38      	ldr	r2, [pc, #224]	; (8001948 <MX_GPIO_Init+0x154>)
 8001868:	f043 0302 	orr.w	r3, r3, #2
 800186c:	6313      	str	r3, [r2, #48]	; 0x30
 800186e:	4b36      	ldr	r3, [pc, #216]	; (8001948 <MX_GPIO_Init+0x154>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	60bb      	str	r3, [r7, #8]
 800187e:	4b32      	ldr	r3, [pc, #200]	; (8001948 <MX_GPIO_Init+0x154>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	4a31      	ldr	r2, [pc, #196]	; (8001948 <MX_GPIO_Init+0x154>)
 8001884:	f043 0308 	orr.w	r3, r3, #8
 8001888:	6313      	str	r3, [r2, #48]	; 0x30
 800188a:	4b2f      	ldr	r3, [pc, #188]	; (8001948 <MX_GPIO_Init+0x154>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	f003 0308 	and.w	r3, r3, #8
 8001892:	60bb      	str	r3, [r7, #8]
 8001894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	607b      	str	r3, [r7, #4]
 800189a:	4b2b      	ldr	r3, [pc, #172]	; (8001948 <MX_GPIO_Init+0x154>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	4a2a      	ldr	r2, [pc, #168]	; (8001948 <MX_GPIO_Init+0x154>)
 80018a0:	f043 0304 	orr.w	r3, r3, #4
 80018a4:	6313      	str	r3, [r2, #48]	; 0x30
 80018a6:	4b28      	ldr	r3, [pc, #160]	; (8001948 <MX_GPIO_Init+0x154>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	f003 0304 	and.w	r3, r3, #4
 80018ae:	607b      	str	r3, [r7, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, OLED4_Pin|OLED3_Pin|OLED2_Pin|OLED1_Pin, GPIO_PIN_RESET);
 80018b2:	2200      	movs	r2, #0
 80018b4:	f44f 41f0 	mov.w	r1, #30720	; 0x7800
 80018b8:	4824      	ldr	r0, [pc, #144]	; (800194c <MX_GPIO_Init+0x158>)
 80018ba:	f001 fa1f 	bl	8002cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Buzzer_Pin|LED_Pin, GPIO_PIN_RESET);
 80018be:	2200      	movs	r2, #0
 80018c0:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 80018c4:	4822      	ldr	r0, [pc, #136]	; (8001950 <MX_GPIO_Init+0x15c>)
 80018c6:	f001 fa19 	bl	8002cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED4_Pin OLED3_Pin OLED2_Pin OLED1_Pin */
  GPIO_InitStruct.Pin = OLED4_Pin|OLED3_Pin|OLED2_Pin|OLED1_Pin;
 80018ca:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 80018ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d0:	2301      	movs	r3, #1
 80018d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d8:	2300      	movs	r3, #0
 80018da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018dc:	f107 031c 	add.w	r3, r7, #28
 80018e0:	4619      	mov	r1, r3
 80018e2:	481a      	ldr	r0, [pc, #104]	; (800194c <MX_GPIO_Init+0x158>)
 80018e4:	f001 f86e 	bl	80029c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Buzzer_Pin LED_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin|LED_Pin;
 80018e8:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80018ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ee:	2301      	movs	r3, #1
 80018f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f6:	2300      	movs	r3, #0
 80018f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fa:	f107 031c 	add.w	r3, r7, #28
 80018fe:	4619      	mov	r1, r3
 8001900:	4813      	ldr	r0, [pc, #76]	; (8001950 <MX_GPIO_Init+0x15c>)
 8001902:	f001 f85f 	bl	80029c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_PB_Pin IMU_INT_Pin */
  GPIO_InitStruct.Pin = USER_PB_Pin|IMU_INT_Pin;
 8001906:	2303      	movs	r3, #3
 8001908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800190a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800190e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001914:	f107 031c 	add.w	r3, r7, #28
 8001918:	4619      	mov	r1, r3
 800191a:	480e      	ldr	r0, [pc, #56]	; (8001954 <MX_GPIO_Init+0x160>)
 800191c:	f001 f852 	bl	80029c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001920:	2200      	movs	r2, #0
 8001922:	2100      	movs	r1, #0
 8001924:	2006      	movs	r0, #6
 8001926:	f000 ff84 	bl	8002832 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800192a:	2006      	movs	r0, #6
 800192c:	f000 ff9d 	bl	800286a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001930:	2200      	movs	r2, #0
 8001932:	2100      	movs	r1, #0
 8001934:	2007      	movs	r0, #7
 8001936:	f000 ff7c 	bl	8002832 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800193a:	2007      	movs	r0, #7
 800193c:	f000 ff95 	bl	800286a <HAL_NVIC_EnableIRQ>

}
 8001940:	bf00      	nop
 8001942:	3730      	adds	r7, #48	; 0x30
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40023800 	.word	0x40023800
 800194c:	40020c00 	.word	0x40020c00
 8001950:	40020000 	.word	0x40020000
 8001954:	40021000 	.word	0x40021000

08001958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800195c:	b672      	cpsid	i
}
 800195e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001960:	e7fe      	b.n	8001960 <Error_Handler+0x8>
	...

08001964 <OLED_WR_Byte>:
#include <oled.h>
#include <oledfont.h>
#include "stdlib.h"

void OLED_WR_Byte(uint8_t dat,uint8_t DataCmd)
{	
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	460a      	mov	r2, r1
 800196e:	71fb      	strb	r3, [r7, #7]
 8001970:	4613      	mov	r3, r2
 8001972:	71bb      	strb	r3, [r7, #6]
	uint8_t i;

	if(DataCmd == 1)    // Data write
 8001974:	79bb      	ldrb	r3, [r7, #6]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d106      	bne.n	8001988 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 800197a:	2201      	movs	r2, #1
 800197c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001980:	481e      	ldr	r0, [pc, #120]	; (80019fc <OLED_WR_Byte+0x98>)
 8001982:	f001 f9bb 	bl	8002cfc <HAL_GPIO_WritePin>
 8001986:	e005      	b.n	8001994 <OLED_WR_Byte+0x30>
	else                // Command write
	  OLED_RS_Clr();
 8001988:	2200      	movs	r2, #0
 800198a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800198e:	481b      	ldr	r0, [pc, #108]	; (80019fc <OLED_WR_Byte+0x98>)
 8001990:	f001 f9b4 	bl	8002cfc <HAL_GPIO_WritePin>

	for(i=0;i<8;i++)
 8001994:	2300      	movs	r3, #0
 8001996:	73fb      	strb	r3, [r7, #15]
 8001998:	e022      	b.n	80019e0 <OLED_WR_Byte+0x7c>
	{	OLED_SCLK_Clr();  // clear the clock
 800199a:	2200      	movs	r2, #0
 800199c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019a0:	4816      	ldr	r0, [pc, #88]	; (80019fc <OLED_WR_Byte+0x98>)
 80019a2:	f001 f9ab 	bl	8002cfc <HAL_GPIO_WritePin>
		if(dat&0x80)      // check data bit
 80019a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	da06      	bge.n	80019bc <OLED_WR_Byte+0x58>
		   OLED_SDIN_Set();
 80019ae:	2201      	movs	r2, #1
 80019b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019b4:	4811      	ldr	r0, [pc, #68]	; (80019fc <OLED_WR_Byte+0x98>)
 80019b6:	f001 f9a1 	bl	8002cfc <HAL_GPIO_WritePin>
 80019ba:	e005      	b.n	80019c8 <OLED_WR_Byte+0x64>
		else 
		   OLED_SDIN_Clr();
 80019bc:	2200      	movs	r2, #0
 80019be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019c2:	480e      	ldr	r0, [pc, #56]	; (80019fc <OLED_WR_Byte+0x98>)
 80019c4:	f001 f99a 	bl	8002cfc <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 80019c8:	2201      	movs	r2, #1
 80019ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019ce:	480b      	ldr	r0, [pc, #44]	; (80019fc <OLED_WR_Byte+0x98>)
 80019d0:	f001 f994 	bl	8002cfc <HAL_GPIO_WritePin>
		dat<<=1;          // check next data bit
 80019d4:	79fb      	ldrb	r3, [r7, #7]
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 80019da:	7bfb      	ldrb	r3, [r7, #15]
 80019dc:	3301      	adds	r3, #1
 80019de:	73fb      	strb	r3, [r7, #15]
 80019e0:	7bfb      	ldrb	r3, [r7, #15]
 80019e2:	2b07      	cmp	r3, #7
 80019e4:	d9d9      	bls.n	800199a <OLED_WR_Byte+0x36>
	}

	OLED_RS_Set();   	  // Set RS=1 upon exit
 80019e6:	2201      	movs	r2, #1
 80019e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019ec:	4803      	ldr	r0, [pc, #12]	; (80019fc <OLED_WR_Byte+0x98>)
 80019ee:	f001 f985 	bl	8002cfc <HAL_GPIO_WritePin>
} 
 80019f2:	bf00      	nop
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40020c00 	.word	0x40020c00

08001a00 <OLED_Refresh_Gram>:

// Refresh the GRAM
uint8_t OLED_GRAM[128][8];
void OLED_Refresh_Gram(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
	uint8_t i,n;
	for(i=0;i<8;i++)
 8001a06:	2300      	movs	r3, #0
 8001a08:	71fb      	strb	r3, [r7, #7]
 8001a0a:	e026      	b.n	8001a5a <OLED_Refresh_Gram+0x5a>
	{
		OLED_WR_Byte (0xb0+i,OLED_CMD);
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	3b50      	subs	r3, #80	; 0x50
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2100      	movs	r1, #0
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff ffa5 	bl	8001964 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	2000      	movs	r0, #0
 8001a1e:	f7ff ffa1 	bl	8001964 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);
 8001a22:	2100      	movs	r1, #0
 8001a24:	2010      	movs	r0, #16
 8001a26:	f7ff ff9d 	bl	8001964 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA);
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	71bb      	strb	r3, [r7, #6]
 8001a2e:	e00d      	b.n	8001a4c <OLED_Refresh_Gram+0x4c>
 8001a30:	79ba      	ldrb	r2, [r7, #6]
 8001a32:	79fb      	ldrb	r3, [r7, #7]
 8001a34:	490d      	ldr	r1, [pc, #52]	; (8001a6c <OLED_Refresh_Gram+0x6c>)
 8001a36:	00d2      	lsls	r2, r2, #3
 8001a38:	440a      	add	r2, r1
 8001a3a:	4413      	add	r3, r2
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2101      	movs	r1, #1
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff ff8f 	bl	8001964 <OLED_WR_Byte>
 8001a46:	79bb      	ldrb	r3, [r7, #6]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	71bb      	strb	r3, [r7, #6]
 8001a4c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	daed      	bge.n	8001a30 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	3301      	adds	r3, #1
 8001a58:	71fb      	strb	r3, [r7, #7]
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	2b07      	cmp	r3, #7
 8001a5e:	d9d5      	bls.n	8001a0c <OLED_Refresh_Gram+0xc>
	}
}
 8001a60:	bf00      	nop
 8001a62:	bf00      	nop
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	200003c8 	.word	0x200003c8

08001a70 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 8001a76:	2300      	movs	r3, #0
 8001a78:	71fb      	strb	r3, [r7, #7]
 8001a7a:	e014      	b.n	8001aa6 <OLED_Clear+0x36>
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	71bb      	strb	r3, [r7, #6]
 8001a80:	e00a      	b.n	8001a98 <OLED_Clear+0x28>
 8001a82:	79ba      	ldrb	r2, [r7, #6]
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	490c      	ldr	r1, [pc, #48]	; (8001ab8 <OLED_Clear+0x48>)
 8001a88:	00d2      	lsls	r2, r2, #3
 8001a8a:	440a      	add	r2, r1
 8001a8c:	4413      	add	r3, r2
 8001a8e:	2200      	movs	r2, #0
 8001a90:	701a      	strb	r2, [r3, #0]
 8001a92:	79bb      	ldrb	r3, [r7, #6]
 8001a94:	3301      	adds	r3, #1
 8001a96:	71bb      	strb	r3, [r7, #6]
 8001a98:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	daf0      	bge.n	8001a82 <OLED_Clear+0x12>
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	71fb      	strb	r3, [r7, #7]
 8001aa6:	79fb      	ldrb	r3, [r7, #7]
 8001aa8:	2b07      	cmp	r3, #7
 8001aaa:	d9e7      	bls.n	8001a7c <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 8001aac:	f7ff ffa8 	bl	8001a00 <OLED_Refresh_Gram>
}
 8001ab0:	bf00      	nop
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	200003c8 	.word	0x200003c8

08001abc <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	71fb      	strb	r3, [r7, #7]
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	71bb      	strb	r3, [r7, #6]
 8001aca:	4613      	mov	r3, r2
 8001acc:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 8001ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	db41      	blt.n	8001b5e <OLED_DrawPoint+0xa2>
 8001ada:	79bb      	ldrb	r3, [r7, #6]
 8001adc:	2b3f      	cmp	r3, #63	; 0x3f
 8001ade:	d83e      	bhi.n	8001b5e <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8001ae0:	79bb      	ldrb	r3, [r7, #6]
 8001ae2:	08db      	lsrs	r3, r3, #3
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	f1c3 0307 	rsb	r3, r3, #7
 8001aea:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8001aec:	79bb      	ldrb	r3, [r7, #6]
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8001af4:	7b7b      	ldrb	r3, [r7, #13]
 8001af6:	f1c3 0307 	rsb	r3, r3, #7
 8001afa:	2201      	movs	r2, #1
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 8001b02:	797b      	ldrb	r3, [r7, #5]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d012      	beq.n	8001b2e <OLED_DrawPoint+0x72>
 8001b08:	79fa      	ldrb	r2, [r7, #7]
 8001b0a:	7bbb      	ldrb	r3, [r7, #14]
 8001b0c:	4917      	ldr	r1, [pc, #92]	; (8001b6c <OLED_DrawPoint+0xb0>)
 8001b0e:	00d2      	lsls	r2, r2, #3
 8001b10:	440a      	add	r2, r1
 8001b12:	4413      	add	r3, r2
 8001b14:	7818      	ldrb	r0, [r3, #0]
 8001b16:	79fa      	ldrb	r2, [r7, #7]
 8001b18:	7bbb      	ldrb	r3, [r7, #14]
 8001b1a:	7bf9      	ldrb	r1, [r7, #15]
 8001b1c:	4301      	orrs	r1, r0
 8001b1e:	b2c8      	uxtb	r0, r1
 8001b20:	4912      	ldr	r1, [pc, #72]	; (8001b6c <OLED_DrawPoint+0xb0>)
 8001b22:	00d2      	lsls	r2, r2, #3
 8001b24:	440a      	add	r2, r1
 8001b26:	4413      	add	r3, r2
 8001b28:	4602      	mov	r2, r0
 8001b2a:	701a      	strb	r2, [r3, #0]
 8001b2c:	e018      	b.n	8001b60 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 8001b2e:	79fa      	ldrb	r2, [r7, #7]
 8001b30:	7bbb      	ldrb	r3, [r7, #14]
 8001b32:	490e      	ldr	r1, [pc, #56]	; (8001b6c <OLED_DrawPoint+0xb0>)
 8001b34:	00d2      	lsls	r2, r2, #3
 8001b36:	440a      	add	r2, r1
 8001b38:	4413      	add	r3, r2
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	b25a      	sxtb	r2, r3
 8001b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b42:	43db      	mvns	r3, r3
 8001b44:	b25b      	sxtb	r3, r3
 8001b46:	4013      	ands	r3, r2
 8001b48:	b259      	sxtb	r1, r3
 8001b4a:	79fa      	ldrb	r2, [r7, #7]
 8001b4c:	7bbb      	ldrb	r3, [r7, #14]
 8001b4e:	b2c8      	uxtb	r0, r1
 8001b50:	4906      	ldr	r1, [pc, #24]	; (8001b6c <OLED_DrawPoint+0xb0>)
 8001b52:	00d2      	lsls	r2, r2, #3
 8001b54:	440a      	add	r2, r1
 8001b56:	4413      	add	r3, r2
 8001b58:	4602      	mov	r2, r0
 8001b5a:	701a      	strb	r2, [r3, #0]
 8001b5c:	e000      	b.n	8001b60 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 8001b5e:	bf00      	nop
}
 8001b60:	3714      	adds	r7, #20
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	200003c8 	.word	0x200003c8

08001b70 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 8001b70:	b590      	push	{r4, r7, lr}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4604      	mov	r4, r0
 8001b78:	4608      	mov	r0, r1
 8001b7a:	4611      	mov	r1, r2
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	4623      	mov	r3, r4
 8001b80:	71fb      	strb	r3, [r7, #7]
 8001b82:	4603      	mov	r3, r0
 8001b84:	71bb      	strb	r3, [r7, #6]
 8001b86:	460b      	mov	r3, r1
 8001b88:	717b      	strb	r3, [r7, #5]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 8001b8e:	79bb      	ldrb	r3, [r7, #6]
 8001b90:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 8001b92:	797b      	ldrb	r3, [r7, #5]
 8001b94:	3b20      	subs	r3, #32
 8001b96:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8001b98:	2300      	movs	r3, #0
 8001b9a:	73bb      	strb	r3, [r7, #14]
 8001b9c:	e04d      	b.n	8001c3a <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 8001b9e:	793b      	ldrb	r3, [r7, #4]
 8001ba0:	2b0c      	cmp	r3, #12
 8001ba2:	d10b      	bne.n	8001bbc <OLED_ShowChar+0x4c>
 8001ba4:	797a      	ldrb	r2, [r7, #5]
 8001ba6:	7bb9      	ldrb	r1, [r7, #14]
 8001ba8:	4828      	ldr	r0, [pc, #160]	; (8001c4c <OLED_ShowChar+0xdc>)
 8001baa:	4613      	mov	r3, r2
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	4413      	add	r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	4403      	add	r3, r0
 8001bb4:	440b      	add	r3, r1
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	73fb      	strb	r3, [r7, #15]
 8001bba:	e007      	b.n	8001bcc <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 8001bbc:	797a      	ldrb	r2, [r7, #5]
 8001bbe:	7bbb      	ldrb	r3, [r7, #14]
 8001bc0:	4923      	ldr	r1, [pc, #140]	; (8001c50 <OLED_ShowChar+0xe0>)
 8001bc2:	0112      	lsls	r2, r2, #4
 8001bc4:	440a      	add	r2, r1
 8001bc6:	4413      	add	r3, r2
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 8001bcc:	2300      	movs	r3, #0
 8001bce:	737b      	strb	r3, [r7, #13]
 8001bd0:	e02d      	b.n	8001c2e <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8001bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	da07      	bge.n	8001bea <OLED_ShowChar+0x7a>
 8001bda:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001bde:	79b9      	ldrb	r1, [r7, #6]
 8001be0:	79fb      	ldrb	r3, [r7, #7]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff ff6a 	bl	8001abc <OLED_DrawPoint>
 8001be8:	e00c      	b.n	8001c04 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 8001bea:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	bf0c      	ite	eq
 8001bf2:	2301      	moveq	r3, #1
 8001bf4:	2300      	movne	r3, #0
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	79b9      	ldrb	r1, [r7, #6]
 8001bfc:	79fb      	ldrb	r3, [r7, #7]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff ff5c 	bl	8001abc <OLED_DrawPoint>
			temp<<=1;
 8001c04:	7bfb      	ldrb	r3, [r7, #15]
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	73fb      	strb	r3, [r7, #15]
			y++;
 8001c0a:	79bb      	ldrb	r3, [r7, #6]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8001c10:	79ba      	ldrb	r2, [r7, #6]
 8001c12:	7b3b      	ldrb	r3, [r7, #12]
 8001c14:	1ad2      	subs	r2, r2, r3
 8001c16:	793b      	ldrb	r3, [r7, #4]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d105      	bne.n	8001c28 <OLED_ShowChar+0xb8>
			{
				y=y0;
 8001c1c:	7b3b      	ldrb	r3, [r7, #12]
 8001c1e:	71bb      	strb	r3, [r7, #6]
				x++;
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	3301      	adds	r3, #1
 8001c24:	71fb      	strb	r3, [r7, #7]
				break;
 8001c26:	e005      	b.n	8001c34 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 8001c28:	7b7b      	ldrb	r3, [r7, #13]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	737b      	strb	r3, [r7, #13]
 8001c2e:	7b7b      	ldrb	r3, [r7, #13]
 8001c30:	2b07      	cmp	r3, #7
 8001c32:	d9ce      	bls.n	8001bd2 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8001c34:	7bbb      	ldrb	r3, [r7, #14]
 8001c36:	3301      	adds	r3, #1
 8001c38:	73bb      	strb	r3, [r7, #14]
 8001c3a:	7bba      	ldrb	r2, [r7, #14]
 8001c3c:	793b      	ldrb	r3, [r7, #4]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d3ad      	bcc.n	8001b9e <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 8001c42:	bf00      	nop
 8001c44:	bf00      	nop
 8001c46:	3714      	adds	r7, #20
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd90      	pop	{r4, r7, pc}
 8001c4c:	080066ec 	.word	0x080066ec
 8001c50:	08006b60 	.word	0x08006b60

08001c54 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af02      	add	r7, sp, #8
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	603a      	str	r2, [r7, #0]
 8001c5e:	71fb      	strb	r3, [r7, #7]
 8001c60:	460b      	mov	r3, r1
 8001c62:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8001c64:	e01f      	b.n	8001ca6 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 8001c66:	79fb      	ldrb	r3, [r7, #7]
 8001c68:	2b7a      	cmp	r3, #122	; 0x7a
 8001c6a:	d904      	bls.n	8001c76 <OLED_ShowString+0x22>
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	71fb      	strb	r3, [r7, #7]
 8001c70:	79bb      	ldrb	r3, [r7, #6]
 8001c72:	3310      	adds	r3, #16
 8001c74:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 8001c76:	79bb      	ldrb	r3, [r7, #6]
 8001c78:	2b3a      	cmp	r3, #58	; 0x3a
 8001c7a:	d905      	bls.n	8001c88 <OLED_ShowString+0x34>
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	71fb      	strb	r3, [r7, #7]
 8001c80:	79fb      	ldrb	r3, [r7, #7]
 8001c82:	71bb      	strb	r3, [r7, #6]
 8001c84:	f7ff fef4 	bl	8001a70 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	781a      	ldrb	r2, [r3, #0]
 8001c8c:	79b9      	ldrb	r1, [r7, #6]
 8001c8e:	79f8      	ldrb	r0, [r7, #7]
 8001c90:	2301      	movs	r3, #1
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	230c      	movs	r3, #12
 8001c96:	f7ff ff6b 	bl	8001b70 <OLED_ShowChar>
        x+=8;
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	3308      	adds	r3, #8
 8001c9e:	71fb      	strb	r3, [r7, #7]
        p++;
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1db      	bne.n	8001c66 <OLED_ShowString+0x12>
    }  
}	 
 8001cae:	bf00      	nop
 8001cb0:	bf00      	nop
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <OLED_Init>:

void OLED_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 8001cbc:	f001 f9ae 	bl	800301c <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 8001cc0:	4b42      	ldr	r3, [pc, #264]	; (8001dcc <OLED_Init+0x114>)
 8001cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc4:	4a41      	ldr	r2, [pc, #260]	; (8001dcc <OLED_Init+0x114>)
 8001cc6:	f023 0301 	bic.w	r3, r3, #1
 8001cca:	6713      	str	r3, [r2, #112]	; 0x70
 8001ccc:	4b3f      	ldr	r3, [pc, #252]	; (8001dcc <OLED_Init+0x114>)
 8001cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd0:	4a3e      	ldr	r2, [pc, #248]	; (8001dcc <OLED_Init+0x114>)
 8001cd2:	f023 0304 	bic.w	r3, r3, #4
 8001cd6:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 8001cd8:	f001 f9b4 	bl	8003044 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ce2:	483b      	ldr	r0, [pc, #236]	; (8001dd0 <OLED_Init+0x118>)
 8001ce4:	f001 f80a 	bl	8002cfc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001ce8:	2064      	movs	r0, #100	; 0x64
 8001cea:	f000 fca3 	bl	8002634 <HAL_Delay>
	OLED_RST_Set();
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cf4:	4836      	ldr	r0, [pc, #216]	; (8001dd0 <OLED_Init+0x118>)
 8001cf6:	f001 f801 	bl	8002cfc <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	20ae      	movs	r0, #174	; 0xae
 8001cfe:	f7ff fe31 	bl	8001964 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 8001d02:	2100      	movs	r1, #0
 8001d04:	20d5      	movs	r0, #213	; 0xd5
 8001d06:	f7ff fe2d 	bl	8001964 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	2050      	movs	r0, #80	; 0x50
 8001d0e:	f7ff fe29 	bl	8001964 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 8001d12:	2100      	movs	r1, #0
 8001d14:	20a8      	movs	r0, #168	; 0xa8
 8001d16:	f7ff fe25 	bl	8001964 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	203f      	movs	r0, #63	; 0x3f
 8001d1e:	f7ff fe21 	bl	8001964 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 8001d22:	2100      	movs	r1, #0
 8001d24:	20d3      	movs	r0, #211	; 0xd3
 8001d26:	f7ff fe1d 	bl	8001964 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	2000      	movs	r0, #0
 8001d2e:	f7ff fe19 	bl	8001964 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 8001d32:	2100      	movs	r1, #0
 8001d34:	2040      	movs	r0, #64	; 0x40
 8001d36:	f7ff fe15 	bl	8001964 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	208d      	movs	r0, #141	; 0x8d
 8001d3e:	f7ff fe11 	bl	8001964 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 8001d42:	2100      	movs	r1, #0
 8001d44:	2014      	movs	r0, #20
 8001d46:	f7ff fe0d 	bl	8001964 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	2020      	movs	r0, #32
 8001d4e:	f7ff fe09 	bl	8001964 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 8001d52:	2100      	movs	r1, #0
 8001d54:	2002      	movs	r0, #2
 8001d56:	f7ff fe05 	bl	8001964 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	20a1      	movs	r0, #161	; 0xa1
 8001d5e:	f7ff fe01 	bl	8001964 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 8001d62:	2100      	movs	r1, #0
 8001d64:	20c0      	movs	r0, #192	; 0xc0
 8001d66:	f7ff fdfd 	bl	8001964 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	20da      	movs	r0, #218	; 0xda
 8001d6e:	f7ff fdf9 	bl	8001964 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 8001d72:	2100      	movs	r1, #0
 8001d74:	2012      	movs	r0, #18
 8001d76:	f7ff fdf5 	bl	8001964 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	2081      	movs	r0, #129	; 0x81
 8001d7e:	f7ff fdf1 	bl	8001964 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 8001d82:	2100      	movs	r1, #0
 8001d84:	20ef      	movs	r0, #239	; 0xef
 8001d86:	f7ff fded 	bl	8001964 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	20d9      	movs	r0, #217	; 0xd9
 8001d8e:	f7ff fde9 	bl	8001964 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 8001d92:	2100      	movs	r1, #0
 8001d94:	20f1      	movs	r0, #241	; 0xf1
 8001d96:	f7ff fde5 	bl	8001964 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	20db      	movs	r0, #219	; 0xdb
 8001d9e:	f7ff fde1 	bl	8001964 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 8001da2:	2100      	movs	r1, #0
 8001da4:	2030      	movs	r0, #48	; 0x30
 8001da6:	f7ff fddd 	bl	8001964 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 8001daa:	2100      	movs	r1, #0
 8001dac:	20a4      	movs	r0, #164	; 0xa4
 8001dae:	f7ff fdd9 	bl	8001964 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 8001db2:	2100      	movs	r1, #0
 8001db4:	20a6      	movs	r0, #166	; 0xa6
 8001db6:	f7ff fdd5 	bl	8001964 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 8001dba:	2100      	movs	r1, #0
 8001dbc:	20af      	movs	r0, #175	; 0xaf
 8001dbe:	f7ff fdd1 	bl	8001964 <OLED_WR_Byte>
	OLED_Clear(); 
 8001dc2:	f7ff fe55 	bl	8001a70 <OLED_Clear>
}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	40020c00 	.word	0x40020c00

08001dd4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	607b      	str	r3, [r7, #4]
 8001dde:	4b17      	ldr	r3, [pc, #92]	; (8001e3c <HAL_MspInit+0x68>)
 8001de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de2:	4a16      	ldr	r2, [pc, #88]	; (8001e3c <HAL_MspInit+0x68>)
 8001de4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001de8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dea:	4b14      	ldr	r3, [pc, #80]	; (8001e3c <HAL_MspInit+0x68>)
 8001dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001df2:	607b      	str	r3, [r7, #4]
 8001df4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	603b      	str	r3, [r7, #0]
 8001dfa:	4b10      	ldr	r3, [pc, #64]	; (8001e3c <HAL_MspInit+0x68>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	4a0f      	ldr	r2, [pc, #60]	; (8001e3c <HAL_MspInit+0x68>)
 8001e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e04:	6413      	str	r3, [r2, #64]	; 0x40
 8001e06:	4b0d      	ldr	r3, [pc, #52]	; (8001e3c <HAL_MspInit+0x68>)
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0e:	603b      	str	r3, [r7, #0]
 8001e10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001e12:	2200      	movs	r2, #0
 8001e14:	2100      	movs	r1, #0
 8001e16:	2005      	movs	r0, #5
 8001e18:	f000 fd0b 	bl	8002832 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001e1c:	2005      	movs	r0, #5
 8001e1e:	f000 fd24 	bl	800286a <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001e22:	2200      	movs	r2, #0
 8001e24:	2100      	movs	r1, #0
 8001e26:	2005      	movs	r0, #5
 8001e28:	f000 fd03 	bl	8002832 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001e2c:	2005      	movs	r0, #5
 8001e2e:	f000 fd1c 	bl	800286a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e32:	bf00      	nop
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40023800 	.word	0x40023800

08001e40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b08a      	sub	sp, #40	; 0x28
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e48:	f107 0314 	add.w	r3, r7, #20
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	60da      	str	r2, [r3, #12]
 8001e56:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a19      	ldr	r2, [pc, #100]	; (8001ec4 <HAL_I2C_MspInit+0x84>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d12c      	bne.n	8001ebc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	613b      	str	r3, [r7, #16]
 8001e66:	4b18      	ldr	r3, [pc, #96]	; (8001ec8 <HAL_I2C_MspInit+0x88>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	4a17      	ldr	r2, [pc, #92]	; (8001ec8 <HAL_I2C_MspInit+0x88>)
 8001e6c:	f043 0302 	orr.w	r3, r3, #2
 8001e70:	6313      	str	r3, [r2, #48]	; 0x30
 8001e72:	4b15      	ldr	r3, [pc, #84]	; (8001ec8 <HAL_I2C_MspInit+0x88>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	613b      	str	r3, [r7, #16]
 8001e7c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e7e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e84:	2312      	movs	r3, #18
 8001e86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e90:	2304      	movs	r3, #4
 8001e92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e94:	f107 0314 	add.w	r3, r7, #20
 8001e98:	4619      	mov	r1, r3
 8001e9a:	480c      	ldr	r0, [pc, #48]	; (8001ecc <HAL_I2C_MspInit+0x8c>)
 8001e9c:	f000 fd92 	bl	80029c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <HAL_I2C_MspInit+0x88>)
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea8:	4a07      	ldr	r2, [pc, #28]	; (8001ec8 <HAL_I2C_MspInit+0x88>)
 8001eaa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001eae:	6413      	str	r3, [r2, #64]	; 0x40
 8001eb0:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <HAL_I2C_MspInit+0x88>)
 8001eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001ebc:	bf00      	nop
 8001ebe:	3728      	adds	r7, #40	; 0x28
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40005800 	.word	0x40005800
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	40020400 	.word	0x40020400

08001ed0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b08e      	sub	sp, #56	; 0x38
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	609a      	str	r2, [r3, #8]
 8001ee4:	60da      	str	r2, [r3, #12]
 8001ee6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a41      	ldr	r2, [pc, #260]	; (8001ff4 <HAL_TIM_Base_MspInit+0x124>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d12d      	bne.n	8001f4e <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	623b      	str	r3, [r7, #32]
 8001ef6:	4b40      	ldr	r3, [pc, #256]	; (8001ff8 <HAL_TIM_Base_MspInit+0x128>)
 8001ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efa:	4a3f      	ldr	r2, [pc, #252]	; (8001ff8 <HAL_TIM_Base_MspInit+0x128>)
 8001efc:	f043 0301 	orr.w	r3, r3, #1
 8001f00:	6453      	str	r3, [r2, #68]	; 0x44
 8001f02:	4b3d      	ldr	r3, [pc, #244]	; (8001ff8 <HAL_TIM_Base_MspInit+0x128>)
 8001f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	623b      	str	r3, [r7, #32]
 8001f0c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	61fb      	str	r3, [r7, #28]
 8001f12:	4b39      	ldr	r3, [pc, #228]	; (8001ff8 <HAL_TIM_Base_MspInit+0x128>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	4a38      	ldr	r2, [pc, #224]	; (8001ff8 <HAL_TIM_Base_MspInit+0x128>)
 8001f18:	f043 0310 	orr.w	r3, r3, #16
 8001f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f1e:	4b36      	ldr	r3, [pc, #216]	; (8001ff8 <HAL_TIM_Base_MspInit+0x128>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	f003 0310 	and.w	r3, r3, #16
 8001f26:	61fb      	str	r3, [r7, #28]
 8001f28:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = IN2_CO_Pin|IN1_CO_Pin;
 8001f2a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001f2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f30:	2302      	movs	r3, #2
 8001f32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f34:	2300      	movs	r3, #0
 8001f36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f44:	4619      	mov	r1, r3
 8001f46:	482d      	ldr	r0, [pc, #180]	; (8001ffc <HAL_TIM_Base_MspInit+0x12c>)
 8001f48:	f000 fd3c 	bl	80029c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001f4c:	e04e      	b.n	8001fec <HAL_TIM_Base_MspInit+0x11c>
  else if(htim_base->Instance==TIM3)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a2b      	ldr	r2, [pc, #172]	; (8002000 <HAL_TIM_Base_MspInit+0x130>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d10e      	bne.n	8001f76 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f58:	2300      	movs	r3, #0
 8001f5a:	61bb      	str	r3, [r7, #24]
 8001f5c:	4b26      	ldr	r3, [pc, #152]	; (8001ff8 <HAL_TIM_Base_MspInit+0x128>)
 8001f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f60:	4a25      	ldr	r2, [pc, #148]	; (8001ff8 <HAL_TIM_Base_MspInit+0x128>)
 8001f62:	f043 0302 	orr.w	r3, r3, #2
 8001f66:	6413      	str	r3, [r2, #64]	; 0x40
 8001f68:	4b23      	ldr	r3, [pc, #140]	; (8001ff8 <HAL_TIM_Base_MspInit+0x128>)
 8001f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	61bb      	str	r3, [r7, #24]
 8001f72:	69bb      	ldr	r3, [r7, #24]
}
 8001f74:	e03a      	b.n	8001fec <HAL_TIM_Base_MspInit+0x11c>
  else if(htim_base->Instance==TIM4)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a22      	ldr	r2, [pc, #136]	; (8002004 <HAL_TIM_Base_MspInit+0x134>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d10e      	bne.n	8001f9e <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f80:	2300      	movs	r3, #0
 8001f82:	617b      	str	r3, [r7, #20]
 8001f84:	4b1c      	ldr	r3, [pc, #112]	; (8001ff8 <HAL_TIM_Base_MspInit+0x128>)
 8001f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f88:	4a1b      	ldr	r2, [pc, #108]	; (8001ff8 <HAL_TIM_Base_MspInit+0x128>)
 8001f8a:	f043 0304 	orr.w	r3, r3, #4
 8001f8e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f90:	4b19      	ldr	r3, [pc, #100]	; (8001ff8 <HAL_TIM_Base_MspInit+0x128>)
 8001f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f94:	f003 0304 	and.w	r3, r3, #4
 8001f98:	617b      	str	r3, [r7, #20]
 8001f9a:	697b      	ldr	r3, [r7, #20]
}
 8001f9c:	e026      	b.n	8001fec <HAL_TIM_Base_MspInit+0x11c>
  else if(htim_base->Instance==TIM8)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a19      	ldr	r2, [pc, #100]	; (8002008 <HAL_TIM_Base_MspInit+0x138>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d10e      	bne.n	8001fc6 <HAL_TIM_Base_MspInit+0xf6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001fa8:	2300      	movs	r3, #0
 8001faa:	613b      	str	r3, [r7, #16]
 8001fac:	4b12      	ldr	r3, [pc, #72]	; (8001ff8 <HAL_TIM_Base_MspInit+0x128>)
 8001fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb0:	4a11      	ldr	r2, [pc, #68]	; (8001ff8 <HAL_TIM_Base_MspInit+0x128>)
 8001fb2:	f043 0302 	orr.w	r3, r3, #2
 8001fb6:	6453      	str	r3, [r2, #68]	; 0x44
 8001fb8:	4b0f      	ldr	r3, [pc, #60]	; (8001ff8 <HAL_TIM_Base_MspInit+0x128>)
 8001fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	613b      	str	r3, [r7, #16]
 8001fc2:	693b      	ldr	r3, [r7, #16]
}
 8001fc4:	e012      	b.n	8001fec <HAL_TIM_Base_MspInit+0x11c>
  else if(htim_base->Instance==TIM11)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a10      	ldr	r2, [pc, #64]	; (800200c <HAL_TIM_Base_MspInit+0x13c>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d10d      	bne.n	8001fec <HAL_TIM_Base_MspInit+0x11c>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	4b08      	ldr	r3, [pc, #32]	; (8001ff8 <HAL_TIM_Base_MspInit+0x128>)
 8001fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd8:	4a07      	ldr	r2, [pc, #28]	; (8001ff8 <HAL_TIM_Base_MspInit+0x128>)
 8001fda:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fde:	6453      	str	r3, [r2, #68]	; 0x44
 8001fe0:	4b05      	ldr	r3, [pc, #20]	; (8001ff8 <HAL_TIM_Base_MspInit+0x128>)
 8001fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fe8:	60fb      	str	r3, [r7, #12]
 8001fea:	68fb      	ldr	r3, [r7, #12]
}
 8001fec:	bf00      	nop
 8001fee:	3738      	adds	r7, #56	; 0x38
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40010000 	.word	0x40010000
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	40021000 	.word	0x40021000
 8002000:	40000400 	.word	0x40000400
 8002004:	40000800 	.word	0x40000800
 8002008:	40010400 	.word	0x40010400
 800200c:	40014800 	.word	0x40014800

08002010 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b08c      	sub	sp, #48	; 0x30
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002018:	f107 031c 	add.w	r3, r7, #28
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	60da      	str	r2, [r3, #12]
 8002026:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002030:	d153      	bne.n	80020da <HAL_TIM_Encoder_MspInit+0xca>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	61bb      	str	r3, [r7, #24]
 8002036:	4b43      	ldr	r3, [pc, #268]	; (8002144 <HAL_TIM_Encoder_MspInit+0x134>)
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	4a42      	ldr	r2, [pc, #264]	; (8002144 <HAL_TIM_Encoder_MspInit+0x134>)
 800203c:	f043 0301 	orr.w	r3, r3, #1
 8002040:	6413      	str	r3, [r2, #64]	; 0x40
 8002042:	4b40      	ldr	r3, [pc, #256]	; (8002144 <HAL_TIM_Encoder_MspInit+0x134>)
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	61bb      	str	r3, [r7, #24]
 800204c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	617b      	str	r3, [r7, #20]
 8002052:	4b3c      	ldr	r3, [pc, #240]	; (8002144 <HAL_TIM_Encoder_MspInit+0x134>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	4a3b      	ldr	r2, [pc, #236]	; (8002144 <HAL_TIM_Encoder_MspInit+0x134>)
 8002058:	f043 0301 	orr.w	r3, r3, #1
 800205c:	6313      	str	r3, [r2, #48]	; 0x30
 800205e:	4b39      	ldr	r3, [pc, #228]	; (8002144 <HAL_TIM_Encoder_MspInit+0x134>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	617b      	str	r3, [r7, #20]
 8002068:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	613b      	str	r3, [r7, #16]
 800206e:	4b35      	ldr	r3, [pc, #212]	; (8002144 <HAL_TIM_Encoder_MspInit+0x134>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	4a34      	ldr	r2, [pc, #208]	; (8002144 <HAL_TIM_Encoder_MspInit+0x134>)
 8002074:	f043 0302 	orr.w	r3, r3, #2
 8002078:	6313      	str	r3, [r2, #48]	; 0x30
 800207a:	4b32      	ldr	r3, [pc, #200]	; (8002144 <HAL_TIM_Encoder_MspInit+0x134>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	613b      	str	r3, [r7, #16]
 8002084:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002086:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800208a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208c:	2302      	movs	r3, #2
 800208e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002090:	2300      	movs	r3, #0
 8002092:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002094:	2300      	movs	r3, #0
 8002096:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002098:	2301      	movs	r3, #1
 800209a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800209c:	f107 031c 	add.w	r3, r7, #28
 80020a0:	4619      	mov	r1, r3
 80020a2:	4829      	ldr	r0, [pc, #164]	; (8002148 <HAL_TIM_Encoder_MspInit+0x138>)
 80020a4:	f000 fc8e 	bl	80029c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80020a8:	2308      	movs	r3, #8
 80020aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ac:	2302      	movs	r3, #2
 80020ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b4:	2300      	movs	r3, #0
 80020b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020b8:	2301      	movs	r3, #1
 80020ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020bc:	f107 031c 	add.w	r3, r7, #28
 80020c0:	4619      	mov	r1, r3
 80020c2:	4822      	ldr	r0, [pc, #136]	; (800214c <HAL_TIM_Encoder_MspInit+0x13c>)
 80020c4:	f000 fc7e 	bl	80029c4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80020c8:	2200      	movs	r2, #0
 80020ca:	2100      	movs	r1, #0
 80020cc:	201c      	movs	r0, #28
 80020ce:	f000 fbb0 	bl	8002832 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020d2:	201c      	movs	r0, #28
 80020d4:	f000 fbc9 	bl	800286a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80020d8:	e030      	b.n	800213c <HAL_TIM_Encoder_MspInit+0x12c>
  else if(htim_encoder->Instance==TIM5)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a1c      	ldr	r2, [pc, #112]	; (8002150 <HAL_TIM_Encoder_MspInit+0x140>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d12b      	bne.n	800213c <HAL_TIM_Encoder_MspInit+0x12c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80020e4:	2300      	movs	r3, #0
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	4b16      	ldr	r3, [pc, #88]	; (8002144 <HAL_TIM_Encoder_MspInit+0x134>)
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	4a15      	ldr	r2, [pc, #84]	; (8002144 <HAL_TIM_Encoder_MspInit+0x134>)
 80020ee:	f043 0308 	orr.w	r3, r3, #8
 80020f2:	6413      	str	r3, [r2, #64]	; 0x40
 80020f4:	4b13      	ldr	r3, [pc, #76]	; (8002144 <HAL_TIM_Encoder_MspInit+0x134>)
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	f003 0308 	and.w	r3, r3, #8
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002100:	2300      	movs	r3, #0
 8002102:	60bb      	str	r3, [r7, #8]
 8002104:	4b0f      	ldr	r3, [pc, #60]	; (8002144 <HAL_TIM_Encoder_MspInit+0x134>)
 8002106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002108:	4a0e      	ldr	r2, [pc, #56]	; (8002144 <HAL_TIM_Encoder_MspInit+0x134>)
 800210a:	f043 0301 	orr.w	r3, r3, #1
 800210e:	6313      	str	r3, [r2, #48]	; 0x30
 8002110:	4b0c      	ldr	r3, [pc, #48]	; (8002144 <HAL_TIM_Encoder_MspInit+0x134>)
 8002112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002114:	f003 0301 	and.w	r3, r3, #1
 8002118:	60bb      	str	r3, [r7, #8]
 800211a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800211c:	2303      	movs	r3, #3
 800211e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002120:	2302      	movs	r3, #2
 8002122:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002124:	2300      	movs	r3, #0
 8002126:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002128:	2300      	movs	r3, #0
 800212a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800212c:	2302      	movs	r3, #2
 800212e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002130:	f107 031c 	add.w	r3, r7, #28
 8002134:	4619      	mov	r1, r3
 8002136:	4804      	ldr	r0, [pc, #16]	; (8002148 <HAL_TIM_Encoder_MspInit+0x138>)
 8002138:	f000 fc44 	bl	80029c4 <HAL_GPIO_Init>
}
 800213c:	bf00      	nop
 800213e:	3730      	adds	r7, #48	; 0x30
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40023800 	.word	0x40023800
 8002148:	40020000 	.word	0x40020000
 800214c:	40020400 	.word	0x40020400
 8002150:	40000c00 	.word	0x40000c00

08002154 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b08a      	sub	sp, #40	; 0x28
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800215c:	f107 0314 	add.w	r3, r7, #20
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	605a      	str	r2, [r3, #4]
 8002166:	609a      	str	r2, [r3, #8]
 8002168:	60da      	str	r2, [r3, #12]
 800216a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a37      	ldr	r2, [pc, #220]	; (8002250 <HAL_TIM_MspPostInit+0xfc>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d11f      	bne.n	80021b6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	613b      	str	r3, [r7, #16]
 800217a:	4b36      	ldr	r3, [pc, #216]	; (8002254 <HAL_TIM_MspPostInit+0x100>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	4a35      	ldr	r2, [pc, #212]	; (8002254 <HAL_TIM_MspPostInit+0x100>)
 8002180:	f043 0310 	orr.w	r3, r3, #16
 8002184:	6313      	str	r3, [r2, #48]	; 0x30
 8002186:	4b33      	ldr	r3, [pc, #204]	; (8002254 <HAL_TIM_MspPostInit+0x100>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	f003 0310 	and.w	r3, r3, #16
 800218e:	613b      	str	r3, [r7, #16]
 8002190:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = IN2_DO_Pin|IN1_DO_Pin;
 8002192:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002196:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002198:	2302      	movs	r3, #2
 800219a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219c:	2300      	movs	r3, #0
 800219e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a0:	2300      	movs	r3, #0
 80021a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80021a4:	2301      	movs	r3, #1
 80021a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021a8:	f107 0314 	add.w	r3, r7, #20
 80021ac:	4619      	mov	r1, r3
 80021ae:	482a      	ldr	r0, [pc, #168]	; (8002258 <HAL_TIM_MspPostInit+0x104>)
 80021b0:	f000 fc08 	bl	80029c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80021b4:	e048      	b.n	8002248 <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM3)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a28      	ldr	r2, [pc, #160]	; (800225c <HAL_TIM_MspPostInit+0x108>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d11f      	bne.n	8002200 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021c0:	2300      	movs	r3, #0
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	4b23      	ldr	r3, [pc, #140]	; (8002254 <HAL_TIM_MspPostInit+0x100>)
 80021c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c8:	4a22      	ldr	r2, [pc, #136]	; (8002254 <HAL_TIM_MspPostInit+0x100>)
 80021ca:	f043 0304 	orr.w	r3, r3, #4
 80021ce:	6313      	str	r3, [r2, #48]	; 0x30
 80021d0:	4b20      	ldr	r3, [pc, #128]	; (8002254 <HAL_TIM_MspPostInit+0x100>)
 80021d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d4:	f003 0304 	and.w	r3, r3, #4
 80021d8:	60fb      	str	r3, [r7, #12]
 80021da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e2:	2302      	movs	r3, #2
 80021e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e6:	2300      	movs	r3, #0
 80021e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ea:	2300      	movs	r3, #0
 80021ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021ee:	2302      	movs	r3, #2
 80021f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021f2:	f107 0314 	add.w	r3, r7, #20
 80021f6:	4619      	mov	r1, r3
 80021f8:	4819      	ldr	r0, [pc, #100]	; (8002260 <HAL_TIM_MspPostInit+0x10c>)
 80021fa:	f000 fbe3 	bl	80029c4 <HAL_GPIO_Init>
}
 80021fe:	e023      	b.n	8002248 <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM4)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a17      	ldr	r2, [pc, #92]	; (8002264 <HAL_TIM_MspPostInit+0x110>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d11e      	bne.n	8002248 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	60bb      	str	r3, [r7, #8]
 800220e:	4b11      	ldr	r3, [pc, #68]	; (8002254 <HAL_TIM_MspPostInit+0x100>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	4a10      	ldr	r2, [pc, #64]	; (8002254 <HAL_TIM_MspPostInit+0x100>)
 8002214:	f043 0302 	orr.w	r3, r3, #2
 8002218:	6313      	str	r3, [r2, #48]	; 0x30
 800221a:	4b0e      	ldr	r3, [pc, #56]	; (8002254 <HAL_TIM_MspPostInit+0x100>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	60bb      	str	r3, [r7, #8]
 8002224:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IN2_A_PWM_Pin|IN1_A_PWM_Pin;
 8002226:	f44f 7340 	mov.w	r3, #768	; 0x300
 800222a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222c:	2302      	movs	r3, #2
 800222e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002230:	2300      	movs	r3, #0
 8002232:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002234:	2300      	movs	r3, #0
 8002236:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002238:	2302      	movs	r3, #2
 800223a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800223c:	f107 0314 	add.w	r3, r7, #20
 8002240:	4619      	mov	r1, r3
 8002242:	4809      	ldr	r0, [pc, #36]	; (8002268 <HAL_TIM_MspPostInit+0x114>)
 8002244:	f000 fbbe 	bl	80029c4 <HAL_GPIO_Init>
}
 8002248:	bf00      	nop
 800224a:	3728      	adds	r7, #40	; 0x28
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40010000 	.word	0x40010000
 8002254:	40023800 	.word	0x40023800
 8002258:	40021000 	.word	0x40021000
 800225c:	40000400 	.word	0x40000400
 8002260:	40020800 	.word	0x40020800
 8002264:	40000800 	.word	0x40000800
 8002268:	40020400 	.word	0x40020400

0800226c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b08c      	sub	sp, #48	; 0x30
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002274:	f107 031c 	add.w	r3, r7, #28
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	609a      	str	r2, [r3, #8]
 8002280:	60da      	str	r2, [r3, #12]
 8002282:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a36      	ldr	r2, [pc, #216]	; (8002364 <HAL_UART_MspInit+0xf8>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d134      	bne.n	80022f8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800228e:	2300      	movs	r3, #0
 8002290:	61bb      	str	r3, [r7, #24]
 8002292:	4b35      	ldr	r3, [pc, #212]	; (8002368 <HAL_UART_MspInit+0xfc>)
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	4a34      	ldr	r2, [pc, #208]	; (8002368 <HAL_UART_MspInit+0xfc>)
 8002298:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800229c:	6413      	str	r3, [r2, #64]	; 0x40
 800229e:	4b32      	ldr	r3, [pc, #200]	; (8002368 <HAL_UART_MspInit+0xfc>)
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a6:	61bb      	str	r3, [r7, #24]
 80022a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022aa:	2300      	movs	r3, #0
 80022ac:	617b      	str	r3, [r7, #20]
 80022ae:	4b2e      	ldr	r3, [pc, #184]	; (8002368 <HAL_UART_MspInit+0xfc>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	4a2d      	ldr	r2, [pc, #180]	; (8002368 <HAL_UART_MspInit+0xfc>)
 80022b4:	f043 0308 	orr.w	r3, r3, #8
 80022b8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ba:	4b2b      	ldr	r3, [pc, #172]	; (8002368 <HAL_UART_MspInit+0xfc>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	f003 0308 	and.w	r3, r3, #8
 80022c2:	617b      	str	r3, [r7, #20]
 80022c4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80022c6:	2360      	movs	r3, #96	; 0x60
 80022c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ca:	2302      	movs	r3, #2
 80022cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ce:	2300      	movs	r3, #0
 80022d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d2:	2303      	movs	r3, #3
 80022d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022d6:	2307      	movs	r3, #7
 80022d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022da:	f107 031c 	add.w	r3, r7, #28
 80022de:	4619      	mov	r1, r3
 80022e0:	4822      	ldr	r0, [pc, #136]	; (800236c <HAL_UART_MspInit+0x100>)
 80022e2:	f000 fb6f 	bl	80029c4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80022e6:	2200      	movs	r2, #0
 80022e8:	2100      	movs	r1, #0
 80022ea:	2026      	movs	r0, #38	; 0x26
 80022ec:	f000 faa1 	bl	8002832 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80022f0:	2026      	movs	r0, #38	; 0x26
 80022f2:	f000 faba 	bl	800286a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80022f6:	e031      	b.n	800235c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART3)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a1c      	ldr	r2, [pc, #112]	; (8002370 <HAL_UART_MspInit+0x104>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d12c      	bne.n	800235c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002302:	2300      	movs	r3, #0
 8002304:	613b      	str	r3, [r7, #16]
 8002306:	4b18      	ldr	r3, [pc, #96]	; (8002368 <HAL_UART_MspInit+0xfc>)
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	4a17      	ldr	r2, [pc, #92]	; (8002368 <HAL_UART_MspInit+0xfc>)
 800230c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002310:	6413      	str	r3, [r2, #64]	; 0x40
 8002312:	4b15      	ldr	r3, [pc, #84]	; (8002368 <HAL_UART_MspInit+0xfc>)
 8002314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002316:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800231a:	613b      	str	r3, [r7, #16]
 800231c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	4b11      	ldr	r3, [pc, #68]	; (8002368 <HAL_UART_MspInit+0xfc>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	4a10      	ldr	r2, [pc, #64]	; (8002368 <HAL_UART_MspInit+0xfc>)
 8002328:	f043 0308 	orr.w	r3, r3, #8
 800232c:	6313      	str	r3, [r2, #48]	; 0x30
 800232e:	4b0e      	ldr	r3, [pc, #56]	; (8002368 <HAL_UART_MspInit+0xfc>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	f003 0308 	and.w	r3, r3, #8
 8002336:	60fb      	str	r3, [r7, #12]
 8002338:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800233a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800233e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002340:	2302      	movs	r3, #2
 8002342:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002344:	2300      	movs	r3, #0
 8002346:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002348:	2303      	movs	r3, #3
 800234a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800234c:	2307      	movs	r3, #7
 800234e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002350:	f107 031c 	add.w	r3, r7, #28
 8002354:	4619      	mov	r1, r3
 8002356:	4805      	ldr	r0, [pc, #20]	; (800236c <HAL_UART_MspInit+0x100>)
 8002358:	f000 fb34 	bl	80029c4 <HAL_GPIO_Init>
}
 800235c:	bf00      	nop
 800235e:	3730      	adds	r7, #48	; 0x30
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40004400 	.word	0x40004400
 8002368:	40023800 	.word	0x40023800
 800236c:	40020c00 	.word	0x40020c00
 8002370:	40004800 	.word	0x40004800

08002374 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002378:	e7fe      	b.n	8002378 <NMI_Handler+0x4>

0800237a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800237a:	b480      	push	{r7}
 800237c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800237e:	e7fe      	b.n	800237e <HardFault_Handler+0x4>

08002380 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002384:	e7fe      	b.n	8002384 <MemManage_Handler+0x4>

08002386 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002386:	b480      	push	{r7}
 8002388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800238a:	e7fe      	b.n	800238a <BusFault_Handler+0x4>

0800238c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002390:	e7fe      	b.n	8002390 <UsageFault_Handler+0x4>

08002392 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002392:	b480      	push	{r7}
 8002394:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002396:	bf00      	nop
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023a4:	bf00      	nop
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr

080023ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023ae:	b480      	push	{r7}
 80023b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023b2:	bf00      	nop
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	tick++;
 80023c0:	4b10      	ldr	r3, [pc, #64]	; (8002404 <SysTick_Handler+0x48>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	3301      	adds	r3, #1
 80023c6:	4a0f      	ldr	r2, [pc, #60]	; (8002404 <SysTick_Handler+0x48>)
 80023c8:	6013      	str	r3, [r2, #0]
	if (tick == no_of_tick)	{ // assuming 1 msec tick, calculate speed every 50 msec?
 80023ca:	4b0e      	ldr	r3, [pc, #56]	; (8002404 <SysTick_Handler+0x48>)
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	4b0e      	ldr	r3, [pc, #56]	; (8002408 <SysTick_Handler+0x4c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d111      	bne.n	80023fa <SysTick_Handler+0x3e>
//		speed = ((position - oldpos)*20*60/180);  // number of ticks/sec * 60 sec  diveide by 180 ticks per round
		speed = (position - oldpos); // change in position
 80023d6:	4b0d      	ldr	r3, [pc, #52]	; (800240c <SysTick_Handler+0x50>)
 80023d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023dc:	461a      	mov	r2, r3
 80023de:	4b0c      	ldr	r3, [pc, #48]	; (8002410 <SysTick_Handler+0x54>)
 80023e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	4a0b      	ldr	r2, [pc, #44]	; (8002414 <SysTick_Handler+0x58>)
 80023e8:	6013      	str	r3, [r2, #0]
		oldpos = position;
 80023ea:	4b08      	ldr	r3, [pc, #32]	; (800240c <SysTick_Handler+0x50>)
 80023ec:	f9b3 2000 	ldrsh.w	r2, [r3]
 80023f0:	4b07      	ldr	r3, [pc, #28]	; (8002410 <SysTick_Handler+0x54>)
 80023f2:	801a      	strh	r2, [r3, #0]
		tick = 0;
 80023f4:	4b03      	ldr	r3, [pc, #12]	; (8002404 <SysTick_Handler+0x48>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	601a      	str	r2, [r3, #0]
		//HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10); // LED
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023fa:	f000 f8fb 	bl	80025f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	200007cc 	.word	0x200007cc
 8002408:	20000000 	.word	0x20000000
 800240c:	20000398 	.word	0x20000398
 8002410:	200007c8 	.word	0x200007c8
 8002414:	2000036e 	.word	0x2000036e

08002418 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800241c:	bf00      	nop
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_PB_Pin);
 800242a:	2001      	movs	r0, #1
 800242c:	f000 fc9a 	bl	8002d64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002430:	bf00      	nop
 8002432:	bd80      	pop	{r7, pc}

08002434 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT_Pin);
 8002438:	2002      	movs	r0, #2
 800243a:	f000 fc93 	bl	8002d64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
	...

08002444 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002448:	4802      	ldr	r0, [pc, #8]	; (8002454 <TIM2_IRQHandler+0x10>)
 800244a:	f001 fd6b 	bl	8003f24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800244e:	bf00      	nop
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	20000130 	.word	0x20000130

08002458 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800245c:	4802      	ldr	r0, [pc, #8]	; (8002468 <USART2_IRQHandler+0x10>)
 800245e:	f002 fced 	bl	8004e3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002462:	bf00      	nop
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	200002e0 	.word	0x200002e0

0800246c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002474:	4a14      	ldr	r2, [pc, #80]	; (80024c8 <_sbrk+0x5c>)
 8002476:	4b15      	ldr	r3, [pc, #84]	; (80024cc <_sbrk+0x60>)
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002480:	4b13      	ldr	r3, [pc, #76]	; (80024d0 <_sbrk+0x64>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d102      	bne.n	800248e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002488:	4b11      	ldr	r3, [pc, #68]	; (80024d0 <_sbrk+0x64>)
 800248a:	4a12      	ldr	r2, [pc, #72]	; (80024d4 <_sbrk+0x68>)
 800248c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800248e:	4b10      	ldr	r3, [pc, #64]	; (80024d0 <_sbrk+0x64>)
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4413      	add	r3, r2
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	429a      	cmp	r2, r3
 800249a:	d207      	bcs.n	80024ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800249c:	f003 fc02 	bl	8005ca4 <__errno>
 80024a0:	4603      	mov	r3, r0
 80024a2:	220c      	movs	r2, #12
 80024a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024a6:	f04f 33ff 	mov.w	r3, #4294967295
 80024aa:	e009      	b.n	80024c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024ac:	4b08      	ldr	r3, [pc, #32]	; (80024d0 <_sbrk+0x64>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024b2:	4b07      	ldr	r3, [pc, #28]	; (80024d0 <_sbrk+0x64>)
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4413      	add	r3, r2
 80024ba:	4a05      	ldr	r2, [pc, #20]	; (80024d0 <_sbrk+0x64>)
 80024bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024be:	68fb      	ldr	r3, [r7, #12]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3718      	adds	r7, #24
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	20020000 	.word	0x20020000
 80024cc:	00000400 	.word	0x00000400
 80024d0:	200007d0 	.word	0x200007d0
 80024d4:	200007e8 	.word	0x200007e8

080024d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024dc:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <SystemInit+0x20>)
 80024de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e2:	4a05      	ldr	r2, [pc, #20]	; (80024f8 <SystemInit+0x20>)
 80024e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024ec:	bf00      	nop
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	e000ed00 	.word	0xe000ed00

080024fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80024fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002534 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002500:	480d      	ldr	r0, [pc, #52]	; (8002538 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002502:	490e      	ldr	r1, [pc, #56]	; (800253c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002504:	4a0e      	ldr	r2, [pc, #56]	; (8002540 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002506:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002508:	e002      	b.n	8002510 <LoopCopyDataInit>

0800250a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800250a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800250c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800250e:	3304      	adds	r3, #4

08002510 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002510:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002512:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002514:	d3f9      	bcc.n	800250a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002516:	4a0b      	ldr	r2, [pc, #44]	; (8002544 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002518:	4c0b      	ldr	r4, [pc, #44]	; (8002548 <LoopFillZerobss+0x26>)
  movs r3, #0
 800251a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800251c:	e001      	b.n	8002522 <LoopFillZerobss>

0800251e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800251e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002520:	3204      	adds	r2, #4

08002522 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002522:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002524:	d3fb      	bcc.n	800251e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002526:	f7ff ffd7 	bl	80024d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800252a:	f003 fbc1 	bl	8005cb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800252e:	f7fe fb9f 	bl	8000c70 <main>
  bx  lr    
 8002532:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002534:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002538:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800253c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002540:	080071ac 	.word	0x080071ac
  ldr r2, =_sbss
 8002544:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002548:	200007e8 	.word	0x200007e8

0800254c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800254c:	e7fe      	b.n	800254c <ADC_IRQHandler>
	...

08002550 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002554:	4b0e      	ldr	r3, [pc, #56]	; (8002590 <HAL_Init+0x40>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a0d      	ldr	r2, [pc, #52]	; (8002590 <HAL_Init+0x40>)
 800255a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800255e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002560:	4b0b      	ldr	r3, [pc, #44]	; (8002590 <HAL_Init+0x40>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a0a      	ldr	r2, [pc, #40]	; (8002590 <HAL_Init+0x40>)
 8002566:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800256a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800256c:	4b08      	ldr	r3, [pc, #32]	; (8002590 <HAL_Init+0x40>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a07      	ldr	r2, [pc, #28]	; (8002590 <HAL_Init+0x40>)
 8002572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002576:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002578:	2003      	movs	r0, #3
 800257a:	f000 f94f 	bl	800281c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800257e:	200f      	movs	r0, #15
 8002580:	f000 f808 	bl	8002594 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002584:	f7ff fc26 	bl	8001dd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	40023c00 	.word	0x40023c00

08002594 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800259c:	4b12      	ldr	r3, [pc, #72]	; (80025e8 <HAL_InitTick+0x54>)
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	4b12      	ldr	r3, [pc, #72]	; (80025ec <HAL_InitTick+0x58>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	4619      	mov	r1, r3
 80025a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80025ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b2:	4618      	mov	r0, r3
 80025b4:	f000 f967 	bl	8002886 <HAL_SYSTICK_Config>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e00e      	b.n	80025e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2b0f      	cmp	r3, #15
 80025c6:	d80a      	bhi.n	80025de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025c8:	2200      	movs	r2, #0
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	f04f 30ff 	mov.w	r0, #4294967295
 80025d0:	f000 f92f 	bl	8002832 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025d4:	4a06      	ldr	r2, [pc, #24]	; (80025f0 <HAL_InitTick+0x5c>)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025da:	2300      	movs	r3, #0
 80025dc:	e000      	b.n	80025e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3708      	adds	r7, #8
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	20000008 	.word	0x20000008
 80025ec:	20000010 	.word	0x20000010
 80025f0:	2000000c 	.word	0x2000000c

080025f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025f8:	4b06      	ldr	r3, [pc, #24]	; (8002614 <HAL_IncTick+0x20>)
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	461a      	mov	r2, r3
 80025fe:	4b06      	ldr	r3, [pc, #24]	; (8002618 <HAL_IncTick+0x24>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4413      	add	r3, r2
 8002604:	4a04      	ldr	r2, [pc, #16]	; (8002618 <HAL_IncTick+0x24>)
 8002606:	6013      	str	r3, [r2, #0]
}
 8002608:	bf00      	nop
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	20000010 	.word	0x20000010
 8002618:	200007d4 	.word	0x200007d4

0800261c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  return uwTick;
 8002620:	4b03      	ldr	r3, [pc, #12]	; (8002630 <HAL_GetTick+0x14>)
 8002622:	681b      	ldr	r3, [r3, #0]
}
 8002624:	4618      	mov	r0, r3
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	200007d4 	.word	0x200007d4

08002634 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800263c:	f7ff ffee 	bl	800261c <HAL_GetTick>
 8002640:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800264c:	d005      	beq.n	800265a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800264e:	4b0a      	ldr	r3, [pc, #40]	; (8002678 <HAL_Delay+0x44>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	461a      	mov	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	4413      	add	r3, r2
 8002658:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800265a:	bf00      	nop
 800265c:	f7ff ffde 	bl	800261c <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	429a      	cmp	r2, r3
 800266a:	d8f7      	bhi.n	800265c <HAL_Delay+0x28>
  {
  }
}
 800266c:	bf00      	nop
 800266e:	bf00      	nop
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	20000010 	.word	0x20000010

0800267c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800267c:	b480      	push	{r7}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f003 0307 	and.w	r3, r3, #7
 800268a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800268c:	4b0c      	ldr	r3, [pc, #48]	; (80026c0 <__NVIC_SetPriorityGrouping+0x44>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002692:	68ba      	ldr	r2, [r7, #8]
 8002694:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002698:	4013      	ands	r3, r2
 800269a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026ae:	4a04      	ldr	r2, [pc, #16]	; (80026c0 <__NVIC_SetPriorityGrouping+0x44>)
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	60d3      	str	r3, [r2, #12]
}
 80026b4:	bf00      	nop
 80026b6:	3714      	adds	r7, #20
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr
 80026c0:	e000ed00 	.word	0xe000ed00

080026c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026c8:	4b04      	ldr	r3, [pc, #16]	; (80026dc <__NVIC_GetPriorityGrouping+0x18>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	0a1b      	lsrs	r3, r3, #8
 80026ce:	f003 0307 	and.w	r3, r3, #7
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr
 80026dc:	e000ed00 	.word	0xe000ed00

080026e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	4603      	mov	r3, r0
 80026e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	db0b      	blt.n	800270a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026f2:	79fb      	ldrb	r3, [r7, #7]
 80026f4:	f003 021f 	and.w	r2, r3, #31
 80026f8:	4907      	ldr	r1, [pc, #28]	; (8002718 <__NVIC_EnableIRQ+0x38>)
 80026fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fe:	095b      	lsrs	r3, r3, #5
 8002700:	2001      	movs	r0, #1
 8002702:	fa00 f202 	lsl.w	r2, r0, r2
 8002706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800270a:	bf00      	nop
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	e000e100 	.word	0xe000e100

0800271c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	4603      	mov	r3, r0
 8002724:	6039      	str	r1, [r7, #0]
 8002726:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272c:	2b00      	cmp	r3, #0
 800272e:	db0a      	blt.n	8002746 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	b2da      	uxtb	r2, r3
 8002734:	490c      	ldr	r1, [pc, #48]	; (8002768 <__NVIC_SetPriority+0x4c>)
 8002736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273a:	0112      	lsls	r2, r2, #4
 800273c:	b2d2      	uxtb	r2, r2
 800273e:	440b      	add	r3, r1
 8002740:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002744:	e00a      	b.n	800275c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	b2da      	uxtb	r2, r3
 800274a:	4908      	ldr	r1, [pc, #32]	; (800276c <__NVIC_SetPriority+0x50>)
 800274c:	79fb      	ldrb	r3, [r7, #7]
 800274e:	f003 030f 	and.w	r3, r3, #15
 8002752:	3b04      	subs	r3, #4
 8002754:	0112      	lsls	r2, r2, #4
 8002756:	b2d2      	uxtb	r2, r2
 8002758:	440b      	add	r3, r1
 800275a:	761a      	strb	r2, [r3, #24]
}
 800275c:	bf00      	nop
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr
 8002768:	e000e100 	.word	0xe000e100
 800276c:	e000ed00 	.word	0xe000ed00

08002770 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002770:	b480      	push	{r7}
 8002772:	b089      	sub	sp, #36	; 0x24
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f003 0307 	and.w	r3, r3, #7
 8002782:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	f1c3 0307 	rsb	r3, r3, #7
 800278a:	2b04      	cmp	r3, #4
 800278c:	bf28      	it	cs
 800278e:	2304      	movcs	r3, #4
 8002790:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	3304      	adds	r3, #4
 8002796:	2b06      	cmp	r3, #6
 8002798:	d902      	bls.n	80027a0 <NVIC_EncodePriority+0x30>
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	3b03      	subs	r3, #3
 800279e:	e000      	b.n	80027a2 <NVIC_EncodePriority+0x32>
 80027a0:	2300      	movs	r3, #0
 80027a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a4:	f04f 32ff 	mov.w	r2, #4294967295
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	43da      	mvns	r2, r3
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	401a      	ands	r2, r3
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027b8:	f04f 31ff 	mov.w	r1, #4294967295
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	fa01 f303 	lsl.w	r3, r1, r3
 80027c2:	43d9      	mvns	r1, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027c8:	4313      	orrs	r3, r2
         );
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3724      	adds	r7, #36	; 0x24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
	...

080027d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3b01      	subs	r3, #1
 80027e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027e8:	d301      	bcc.n	80027ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027ea:	2301      	movs	r3, #1
 80027ec:	e00f      	b.n	800280e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027ee:	4a0a      	ldr	r2, [pc, #40]	; (8002818 <SysTick_Config+0x40>)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	3b01      	subs	r3, #1
 80027f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027f6:	210f      	movs	r1, #15
 80027f8:	f04f 30ff 	mov.w	r0, #4294967295
 80027fc:	f7ff ff8e 	bl	800271c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002800:	4b05      	ldr	r3, [pc, #20]	; (8002818 <SysTick_Config+0x40>)
 8002802:	2200      	movs	r2, #0
 8002804:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002806:	4b04      	ldr	r3, [pc, #16]	; (8002818 <SysTick_Config+0x40>)
 8002808:	2207      	movs	r2, #7
 800280a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	e000e010 	.word	0xe000e010

0800281c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f7ff ff29 	bl	800267c <__NVIC_SetPriorityGrouping>
}
 800282a:	bf00      	nop
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002832:	b580      	push	{r7, lr}
 8002834:	b086      	sub	sp, #24
 8002836:	af00      	add	r7, sp, #0
 8002838:	4603      	mov	r3, r0
 800283a:	60b9      	str	r1, [r7, #8]
 800283c:	607a      	str	r2, [r7, #4]
 800283e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002840:	2300      	movs	r3, #0
 8002842:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002844:	f7ff ff3e 	bl	80026c4 <__NVIC_GetPriorityGrouping>
 8002848:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	68b9      	ldr	r1, [r7, #8]
 800284e:	6978      	ldr	r0, [r7, #20]
 8002850:	f7ff ff8e 	bl	8002770 <NVIC_EncodePriority>
 8002854:	4602      	mov	r2, r0
 8002856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800285a:	4611      	mov	r1, r2
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff ff5d 	bl	800271c <__NVIC_SetPriority>
}
 8002862:	bf00      	nop
 8002864:	3718      	adds	r7, #24
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	b082      	sub	sp, #8
 800286e:	af00      	add	r7, sp, #0
 8002870:	4603      	mov	r3, r0
 8002872:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff ff31 	bl	80026e0 <__NVIC_EnableIRQ>
}
 800287e:	bf00      	nop
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b082      	sub	sp, #8
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7ff ffa2 	bl	80027d8 <SysTick_Config>
 8002894:	4603      	mov	r3, r0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b084      	sub	sp, #16
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028aa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80028ac:	f7ff feb6 	bl	800261c <HAL_GetTick>
 80028b0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d008      	beq.n	80028d0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2280      	movs	r2, #128	; 0x80
 80028c2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e052      	b.n	8002976 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f022 0216 	bic.w	r2, r2, #22
 80028de:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	695a      	ldr	r2, [r3, #20]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028ee:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d103      	bne.n	8002900 <HAL_DMA_Abort+0x62>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d007      	beq.n	8002910 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f022 0208 	bic.w	r2, r2, #8
 800290e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 0201 	bic.w	r2, r2, #1
 800291e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002920:	e013      	b.n	800294a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002922:	f7ff fe7b 	bl	800261c <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b05      	cmp	r3, #5
 800292e:	d90c      	bls.n	800294a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2220      	movs	r2, #32
 8002934:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2203      	movs	r2, #3
 800293a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e015      	b.n	8002976 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0301 	and.w	r3, r3, #1
 8002954:	2b00      	cmp	r3, #0
 8002956:	d1e4      	bne.n	8002922 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800295c:	223f      	movs	r2, #63	; 0x3f
 800295e:	409a      	lsls	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800297e:	b480      	push	{r7}
 8002980:	b083      	sub	sp, #12
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d004      	beq.n	800299c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2280      	movs	r2, #128	; 0x80
 8002996:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e00c      	b.n	80029b6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2205      	movs	r2, #5
 80029a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f022 0201 	bic.w	r2, r2, #1
 80029b2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
	...

080029c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b089      	sub	sp, #36	; 0x24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029ce:	2300      	movs	r3, #0
 80029d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029d2:	2300      	movs	r3, #0
 80029d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029d6:	2300      	movs	r3, #0
 80029d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029da:	2300      	movs	r3, #0
 80029dc:	61fb      	str	r3, [r7, #28]
 80029de:	e16b      	b.n	8002cb8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029e0:	2201      	movs	r2, #1
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	4013      	ands	r3, r2
 80029f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	f040 815a 	bne.w	8002cb2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f003 0303 	and.w	r3, r3, #3
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d005      	beq.n	8002a16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d130      	bne.n	8002a78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	2203      	movs	r2, #3
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	43db      	mvns	r3, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	68da      	ldr	r2, [r3, #12]
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	43db      	mvns	r3, r3
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	091b      	lsrs	r3, r3, #4
 8002a62:	f003 0201 	and.w	r2, r3, #1
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f003 0303 	and.w	r3, r3, #3
 8002a80:	2b03      	cmp	r3, #3
 8002a82:	d017      	beq.n	8002ab4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	2203      	movs	r2, #3
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	43db      	mvns	r3, r3
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	689a      	ldr	r2, [r3, #8]
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f003 0303 	and.w	r3, r3, #3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d123      	bne.n	8002b08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	08da      	lsrs	r2, r3, #3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	3208      	adds	r2, #8
 8002ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002acc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	f003 0307 	and.w	r3, r3, #7
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	220f      	movs	r2, #15
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	43db      	mvns	r3, r3
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	691a      	ldr	r2, [r3, #16]
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	f003 0307 	and.w	r3, r3, #7
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	08da      	lsrs	r2, r3, #3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	3208      	adds	r2, #8
 8002b02:	69b9      	ldr	r1, [r7, #24]
 8002b04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	2203      	movs	r2, #3
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f003 0203 	and.w	r2, r3, #3
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f000 80b4 	beq.w	8002cb2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	4b60      	ldr	r3, [pc, #384]	; (8002cd0 <HAL_GPIO_Init+0x30c>)
 8002b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b52:	4a5f      	ldr	r2, [pc, #380]	; (8002cd0 <HAL_GPIO_Init+0x30c>)
 8002b54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b58:	6453      	str	r3, [r2, #68]	; 0x44
 8002b5a:	4b5d      	ldr	r3, [pc, #372]	; (8002cd0 <HAL_GPIO_Init+0x30c>)
 8002b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b62:	60fb      	str	r3, [r7, #12]
 8002b64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b66:	4a5b      	ldr	r2, [pc, #364]	; (8002cd4 <HAL_GPIO_Init+0x310>)
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	089b      	lsrs	r3, r3, #2
 8002b6c:	3302      	adds	r3, #2
 8002b6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	f003 0303 	and.w	r3, r3, #3
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	220f      	movs	r2, #15
 8002b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b82:	43db      	mvns	r3, r3
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	4013      	ands	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a52      	ldr	r2, [pc, #328]	; (8002cd8 <HAL_GPIO_Init+0x314>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d02b      	beq.n	8002bea <HAL_GPIO_Init+0x226>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a51      	ldr	r2, [pc, #324]	; (8002cdc <HAL_GPIO_Init+0x318>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d025      	beq.n	8002be6 <HAL_GPIO_Init+0x222>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a50      	ldr	r2, [pc, #320]	; (8002ce0 <HAL_GPIO_Init+0x31c>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d01f      	beq.n	8002be2 <HAL_GPIO_Init+0x21e>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a4f      	ldr	r2, [pc, #316]	; (8002ce4 <HAL_GPIO_Init+0x320>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d019      	beq.n	8002bde <HAL_GPIO_Init+0x21a>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a4e      	ldr	r2, [pc, #312]	; (8002ce8 <HAL_GPIO_Init+0x324>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d013      	beq.n	8002bda <HAL_GPIO_Init+0x216>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a4d      	ldr	r2, [pc, #308]	; (8002cec <HAL_GPIO_Init+0x328>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d00d      	beq.n	8002bd6 <HAL_GPIO_Init+0x212>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a4c      	ldr	r2, [pc, #304]	; (8002cf0 <HAL_GPIO_Init+0x32c>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d007      	beq.n	8002bd2 <HAL_GPIO_Init+0x20e>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a4b      	ldr	r2, [pc, #300]	; (8002cf4 <HAL_GPIO_Init+0x330>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d101      	bne.n	8002bce <HAL_GPIO_Init+0x20a>
 8002bca:	2307      	movs	r3, #7
 8002bcc:	e00e      	b.n	8002bec <HAL_GPIO_Init+0x228>
 8002bce:	2308      	movs	r3, #8
 8002bd0:	e00c      	b.n	8002bec <HAL_GPIO_Init+0x228>
 8002bd2:	2306      	movs	r3, #6
 8002bd4:	e00a      	b.n	8002bec <HAL_GPIO_Init+0x228>
 8002bd6:	2305      	movs	r3, #5
 8002bd8:	e008      	b.n	8002bec <HAL_GPIO_Init+0x228>
 8002bda:	2304      	movs	r3, #4
 8002bdc:	e006      	b.n	8002bec <HAL_GPIO_Init+0x228>
 8002bde:	2303      	movs	r3, #3
 8002be0:	e004      	b.n	8002bec <HAL_GPIO_Init+0x228>
 8002be2:	2302      	movs	r3, #2
 8002be4:	e002      	b.n	8002bec <HAL_GPIO_Init+0x228>
 8002be6:	2301      	movs	r3, #1
 8002be8:	e000      	b.n	8002bec <HAL_GPIO_Init+0x228>
 8002bea:	2300      	movs	r3, #0
 8002bec:	69fa      	ldr	r2, [r7, #28]
 8002bee:	f002 0203 	and.w	r2, r2, #3
 8002bf2:	0092      	lsls	r2, r2, #2
 8002bf4:	4093      	lsls	r3, r2
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bfc:	4935      	ldr	r1, [pc, #212]	; (8002cd4 <HAL_GPIO_Init+0x310>)
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	089b      	lsrs	r3, r3, #2
 8002c02:	3302      	adds	r3, #2
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c0a:	4b3b      	ldr	r3, [pc, #236]	; (8002cf8 <HAL_GPIO_Init+0x334>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	43db      	mvns	r3, r3
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	4013      	ands	r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d003      	beq.n	8002c2e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c2e:	4a32      	ldr	r2, [pc, #200]	; (8002cf8 <HAL_GPIO_Init+0x334>)
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c34:	4b30      	ldr	r3, [pc, #192]	; (8002cf8 <HAL_GPIO_Init+0x334>)
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	4013      	ands	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d003      	beq.n	8002c58 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c58:	4a27      	ldr	r2, [pc, #156]	; (8002cf8 <HAL_GPIO_Init+0x334>)
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c5e:	4b26      	ldr	r3, [pc, #152]	; (8002cf8 <HAL_GPIO_Init+0x334>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	43db      	mvns	r3, r3
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d003      	beq.n	8002c82 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c82:	4a1d      	ldr	r2, [pc, #116]	; (8002cf8 <HAL_GPIO_Init+0x334>)
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c88:	4b1b      	ldr	r3, [pc, #108]	; (8002cf8 <HAL_GPIO_Init+0x334>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	43db      	mvns	r3, r3
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	4013      	ands	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d003      	beq.n	8002cac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cac:	4a12      	ldr	r2, [pc, #72]	; (8002cf8 <HAL_GPIO_Init+0x334>)
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	61fb      	str	r3, [r7, #28]
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	2b0f      	cmp	r3, #15
 8002cbc:	f67f ae90 	bls.w	80029e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cc0:	bf00      	nop
 8002cc2:	bf00      	nop
 8002cc4:	3724      	adds	r7, #36	; 0x24
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	40023800 	.word	0x40023800
 8002cd4:	40013800 	.word	0x40013800
 8002cd8:	40020000 	.word	0x40020000
 8002cdc:	40020400 	.word	0x40020400
 8002ce0:	40020800 	.word	0x40020800
 8002ce4:	40020c00 	.word	0x40020c00
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	40021400 	.word	0x40021400
 8002cf0:	40021800 	.word	0x40021800
 8002cf4:	40021c00 	.word	0x40021c00
 8002cf8:	40013c00 	.word	0x40013c00

08002cfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	460b      	mov	r3, r1
 8002d06:	807b      	strh	r3, [r7, #2]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d0c:	787b      	ldrb	r3, [r7, #1]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d003      	beq.n	8002d1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d12:	887a      	ldrh	r2, [r7, #2]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d18:	e003      	b.n	8002d22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d1a:	887b      	ldrh	r3, [r7, #2]
 8002d1c:	041a      	lsls	r2, r3, #16
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	619a      	str	r2, [r3, #24]
}
 8002d22:	bf00      	nop
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr

08002d2e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b085      	sub	sp, #20
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
 8002d36:	460b      	mov	r3, r1
 8002d38:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d40:	887a      	ldrh	r2, [r7, #2]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	4013      	ands	r3, r2
 8002d46:	041a      	lsls	r2, r3, #16
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	43d9      	mvns	r1, r3
 8002d4c:	887b      	ldrh	r3, [r7, #2]
 8002d4e:	400b      	ands	r3, r1
 8002d50:	431a      	orrs	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	619a      	str	r2, [r3, #24]
}
 8002d56:	bf00      	nop
 8002d58:	3714      	adds	r7, #20
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
	...

08002d64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002d6e:	4b08      	ldr	r3, [pc, #32]	; (8002d90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d70:	695a      	ldr	r2, [r3, #20]
 8002d72:	88fb      	ldrh	r3, [r7, #6]
 8002d74:	4013      	ands	r3, r2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d006      	beq.n	8002d88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d7a:	4a05      	ldr	r2, [pc, #20]	; (8002d90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d7c:	88fb      	ldrh	r3, [r7, #6]
 8002d7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d80:	88fb      	ldrh	r3, [r7, #6]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7fd fc24 	bl	80005d0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d88:	bf00      	nop
 8002d8a:	3708      	adds	r7, #8
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	40013c00 	.word	0x40013c00

08002d94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e12b      	b.n	8002ffe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d106      	bne.n	8002dc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7ff f840 	bl	8001e40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2224      	movs	r2, #36	; 0x24
 8002dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 0201 	bic.w	r2, r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002de6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002df6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002df8:	f000 fda8 	bl	800394c <HAL_RCC_GetPCLK1Freq>
 8002dfc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	4a81      	ldr	r2, [pc, #516]	; (8003008 <HAL_I2C_Init+0x274>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d807      	bhi.n	8002e18 <HAL_I2C_Init+0x84>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4a80      	ldr	r2, [pc, #512]	; (800300c <HAL_I2C_Init+0x278>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	bf94      	ite	ls
 8002e10:	2301      	movls	r3, #1
 8002e12:	2300      	movhi	r3, #0
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	e006      	b.n	8002e26 <HAL_I2C_Init+0x92>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	4a7d      	ldr	r2, [pc, #500]	; (8003010 <HAL_I2C_Init+0x27c>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	bf94      	ite	ls
 8002e20:	2301      	movls	r3, #1
 8002e22:	2300      	movhi	r3, #0
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e0e7      	b.n	8002ffe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	4a78      	ldr	r2, [pc, #480]	; (8003014 <HAL_I2C_Init+0x280>)
 8002e32:	fba2 2303 	umull	r2, r3, r2, r3
 8002e36:	0c9b      	lsrs	r3, r3, #18
 8002e38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68ba      	ldr	r2, [r7, #8]
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	4a6a      	ldr	r2, [pc, #424]	; (8003008 <HAL_I2C_Init+0x274>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d802      	bhi.n	8002e68 <HAL_I2C_Init+0xd4>
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	3301      	adds	r3, #1
 8002e66:	e009      	b.n	8002e7c <HAL_I2C_Init+0xe8>
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e6e:	fb02 f303 	mul.w	r3, r2, r3
 8002e72:	4a69      	ldr	r2, [pc, #420]	; (8003018 <HAL_I2C_Init+0x284>)
 8002e74:	fba2 2303 	umull	r2, r3, r2, r3
 8002e78:	099b      	lsrs	r3, r3, #6
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	6812      	ldr	r2, [r2, #0]
 8002e80:	430b      	orrs	r3, r1
 8002e82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	69db      	ldr	r3, [r3, #28]
 8002e8a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e8e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	495c      	ldr	r1, [pc, #368]	; (8003008 <HAL_I2C_Init+0x274>)
 8002e98:	428b      	cmp	r3, r1
 8002e9a:	d819      	bhi.n	8002ed0 <HAL_I2C_Init+0x13c>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	1e59      	subs	r1, r3, #1
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002eaa:	1c59      	adds	r1, r3, #1
 8002eac:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002eb0:	400b      	ands	r3, r1
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00a      	beq.n	8002ecc <HAL_I2C_Init+0x138>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	1e59      	subs	r1, r3, #1
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eca:	e051      	b.n	8002f70 <HAL_I2C_Init+0x1dc>
 8002ecc:	2304      	movs	r3, #4
 8002ece:	e04f      	b.n	8002f70 <HAL_I2C_Init+0x1dc>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d111      	bne.n	8002efc <HAL_I2C_Init+0x168>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	1e58      	subs	r0, r3, #1
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6859      	ldr	r1, [r3, #4]
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	440b      	add	r3, r1
 8002ee6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eea:	3301      	adds	r3, #1
 8002eec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	bf0c      	ite	eq
 8002ef4:	2301      	moveq	r3, #1
 8002ef6:	2300      	movne	r3, #0
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	e012      	b.n	8002f22 <HAL_I2C_Init+0x18e>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	1e58      	subs	r0, r3, #1
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6859      	ldr	r1, [r3, #4]
 8002f04:	460b      	mov	r3, r1
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	440b      	add	r3, r1
 8002f0a:	0099      	lsls	r1, r3, #2
 8002f0c:	440b      	add	r3, r1
 8002f0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f12:	3301      	adds	r3, #1
 8002f14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	bf0c      	ite	eq
 8002f1c:	2301      	moveq	r3, #1
 8002f1e:	2300      	movne	r3, #0
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <HAL_I2C_Init+0x196>
 8002f26:	2301      	movs	r3, #1
 8002f28:	e022      	b.n	8002f70 <HAL_I2C_Init+0x1dc>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10e      	bne.n	8002f50 <HAL_I2C_Init+0x1bc>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	1e58      	subs	r0, r3, #1
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6859      	ldr	r1, [r3, #4]
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	440b      	add	r3, r1
 8002f40:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f44:	3301      	adds	r3, #1
 8002f46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f4e:	e00f      	b.n	8002f70 <HAL_I2C_Init+0x1dc>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	1e58      	subs	r0, r3, #1
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6859      	ldr	r1, [r3, #4]
 8002f58:	460b      	mov	r3, r1
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	0099      	lsls	r1, r3, #2
 8002f60:	440b      	add	r3, r1
 8002f62:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f66:	3301      	adds	r3, #1
 8002f68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f70:	6879      	ldr	r1, [r7, #4]
 8002f72:	6809      	ldr	r1, [r1, #0]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	69da      	ldr	r2, [r3, #28]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	6911      	ldr	r1, [r2, #16]
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	68d2      	ldr	r2, [r2, #12]
 8002faa:	4311      	orrs	r1, r2
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	6812      	ldr	r2, [r2, #0]
 8002fb0:	430b      	orrs	r3, r1
 8002fb2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	695a      	ldr	r2, [r3, #20]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f042 0201 	orr.w	r2, r2, #1
 8002fde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2220      	movs	r2, #32
 8002fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	000186a0 	.word	0x000186a0
 800300c:	001e847f 	.word	0x001e847f
 8003010:	003d08ff 	.word	0x003d08ff
 8003014:	431bde83 	.word	0x431bde83
 8003018:	10624dd3 	.word	0x10624dd3

0800301c <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003022:	4b06      	ldr	r3, [pc, #24]	; (800303c <HAL_PWR_EnableBkUpAccess+0x20>)
 8003024:	2201      	movs	r2, #1
 8003026:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8003028:	4b05      	ldr	r3, [pc, #20]	; (8003040 <HAL_PWR_EnableBkUpAccess+0x24>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 800302e:	687b      	ldr	r3, [r7, #4]
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr
 800303c:	420e0020 	.word	0x420e0020
 8003040:	40007000 	.word	0x40007000

08003044 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 800304a:	4b06      	ldr	r3, [pc, #24]	; (8003064 <HAL_PWR_DisableBkUpAccess+0x20>)
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8003050:	4b05      	ldr	r3, [pc, #20]	; (8003068 <HAL_PWR_DisableBkUpAccess+0x24>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8003056:	687b      	ldr	r3, [r7, #4]
}
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr
 8003064:	420e0020 	.word	0x420e0020
 8003068:	40007000 	.word	0x40007000

0800306c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e267      	b.n	800354e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b00      	cmp	r3, #0
 8003088:	d075      	beq.n	8003176 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800308a:	4b88      	ldr	r3, [pc, #544]	; (80032ac <HAL_RCC_OscConfig+0x240>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f003 030c 	and.w	r3, r3, #12
 8003092:	2b04      	cmp	r3, #4
 8003094:	d00c      	beq.n	80030b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003096:	4b85      	ldr	r3, [pc, #532]	; (80032ac <HAL_RCC_OscConfig+0x240>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800309e:	2b08      	cmp	r3, #8
 80030a0:	d112      	bne.n	80030c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030a2:	4b82      	ldr	r3, [pc, #520]	; (80032ac <HAL_RCC_OscConfig+0x240>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030ae:	d10b      	bne.n	80030c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030b0:	4b7e      	ldr	r3, [pc, #504]	; (80032ac <HAL_RCC_OscConfig+0x240>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d05b      	beq.n	8003174 <HAL_RCC_OscConfig+0x108>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d157      	bne.n	8003174 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e242      	b.n	800354e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030d0:	d106      	bne.n	80030e0 <HAL_RCC_OscConfig+0x74>
 80030d2:	4b76      	ldr	r3, [pc, #472]	; (80032ac <HAL_RCC_OscConfig+0x240>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a75      	ldr	r2, [pc, #468]	; (80032ac <HAL_RCC_OscConfig+0x240>)
 80030d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030dc:	6013      	str	r3, [r2, #0]
 80030de:	e01d      	b.n	800311c <HAL_RCC_OscConfig+0xb0>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030e8:	d10c      	bne.n	8003104 <HAL_RCC_OscConfig+0x98>
 80030ea:	4b70      	ldr	r3, [pc, #448]	; (80032ac <HAL_RCC_OscConfig+0x240>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a6f      	ldr	r2, [pc, #444]	; (80032ac <HAL_RCC_OscConfig+0x240>)
 80030f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030f4:	6013      	str	r3, [r2, #0]
 80030f6:	4b6d      	ldr	r3, [pc, #436]	; (80032ac <HAL_RCC_OscConfig+0x240>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a6c      	ldr	r2, [pc, #432]	; (80032ac <HAL_RCC_OscConfig+0x240>)
 80030fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003100:	6013      	str	r3, [r2, #0]
 8003102:	e00b      	b.n	800311c <HAL_RCC_OscConfig+0xb0>
 8003104:	4b69      	ldr	r3, [pc, #420]	; (80032ac <HAL_RCC_OscConfig+0x240>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a68      	ldr	r2, [pc, #416]	; (80032ac <HAL_RCC_OscConfig+0x240>)
 800310a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800310e:	6013      	str	r3, [r2, #0]
 8003110:	4b66      	ldr	r3, [pc, #408]	; (80032ac <HAL_RCC_OscConfig+0x240>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a65      	ldr	r2, [pc, #404]	; (80032ac <HAL_RCC_OscConfig+0x240>)
 8003116:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800311a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d013      	beq.n	800314c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003124:	f7ff fa7a 	bl	800261c <HAL_GetTick>
 8003128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800312a:	e008      	b.n	800313e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800312c:	f7ff fa76 	bl	800261c <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b64      	cmp	r3, #100	; 0x64
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e207      	b.n	800354e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800313e:	4b5b      	ldr	r3, [pc, #364]	; (80032ac <HAL_RCC_OscConfig+0x240>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d0f0      	beq.n	800312c <HAL_RCC_OscConfig+0xc0>
 800314a:	e014      	b.n	8003176 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800314c:	f7ff fa66 	bl	800261c <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003154:	f7ff fa62 	bl	800261c <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b64      	cmp	r3, #100	; 0x64
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e1f3      	b.n	800354e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003166:	4b51      	ldr	r3, [pc, #324]	; (80032ac <HAL_RCC_OscConfig+0x240>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1f0      	bne.n	8003154 <HAL_RCC_OscConfig+0xe8>
 8003172:	e000      	b.n	8003176 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003174:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d063      	beq.n	800324a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003182:	4b4a      	ldr	r3, [pc, #296]	; (80032ac <HAL_RCC_OscConfig+0x240>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f003 030c 	and.w	r3, r3, #12
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00b      	beq.n	80031a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800318e:	4b47      	ldr	r3, [pc, #284]	; (80032ac <HAL_RCC_OscConfig+0x240>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003196:	2b08      	cmp	r3, #8
 8003198:	d11c      	bne.n	80031d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800319a:	4b44      	ldr	r3, [pc, #272]	; (80032ac <HAL_RCC_OscConfig+0x240>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d116      	bne.n	80031d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031a6:	4b41      	ldr	r3, [pc, #260]	; (80032ac <HAL_RCC_OscConfig+0x240>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d005      	beq.n	80031be <HAL_RCC_OscConfig+0x152>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d001      	beq.n	80031be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e1c7      	b.n	800354e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031be:	4b3b      	ldr	r3, [pc, #236]	; (80032ac <HAL_RCC_OscConfig+0x240>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	4937      	ldr	r1, [pc, #220]	; (80032ac <HAL_RCC_OscConfig+0x240>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031d2:	e03a      	b.n	800324a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d020      	beq.n	800321e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031dc:	4b34      	ldr	r3, [pc, #208]	; (80032b0 <HAL_RCC_OscConfig+0x244>)
 80031de:	2201      	movs	r2, #1
 80031e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e2:	f7ff fa1b 	bl	800261c <HAL_GetTick>
 80031e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e8:	e008      	b.n	80031fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031ea:	f7ff fa17 	bl	800261c <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d901      	bls.n	80031fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e1a8      	b.n	800354e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031fc:	4b2b      	ldr	r3, [pc, #172]	; (80032ac <HAL_RCC_OscConfig+0x240>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0302 	and.w	r3, r3, #2
 8003204:	2b00      	cmp	r3, #0
 8003206:	d0f0      	beq.n	80031ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003208:	4b28      	ldr	r3, [pc, #160]	; (80032ac <HAL_RCC_OscConfig+0x240>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	4925      	ldr	r1, [pc, #148]	; (80032ac <HAL_RCC_OscConfig+0x240>)
 8003218:	4313      	orrs	r3, r2
 800321a:	600b      	str	r3, [r1, #0]
 800321c:	e015      	b.n	800324a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800321e:	4b24      	ldr	r3, [pc, #144]	; (80032b0 <HAL_RCC_OscConfig+0x244>)
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003224:	f7ff f9fa 	bl	800261c <HAL_GetTick>
 8003228:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800322a:	e008      	b.n	800323e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800322c:	f7ff f9f6 	bl	800261c <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b02      	cmp	r3, #2
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e187      	b.n	800354e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800323e:	4b1b      	ldr	r3, [pc, #108]	; (80032ac <HAL_RCC_OscConfig+0x240>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1f0      	bne.n	800322c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0308 	and.w	r3, r3, #8
 8003252:	2b00      	cmp	r3, #0
 8003254:	d036      	beq.n	80032c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d016      	beq.n	800328c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800325e:	4b15      	ldr	r3, [pc, #84]	; (80032b4 <HAL_RCC_OscConfig+0x248>)
 8003260:	2201      	movs	r2, #1
 8003262:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003264:	f7ff f9da 	bl	800261c <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800326a:	e008      	b.n	800327e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800326c:	f7ff f9d6 	bl	800261c <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b02      	cmp	r3, #2
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e167      	b.n	800354e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800327e:	4b0b      	ldr	r3, [pc, #44]	; (80032ac <HAL_RCC_OscConfig+0x240>)
 8003280:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d0f0      	beq.n	800326c <HAL_RCC_OscConfig+0x200>
 800328a:	e01b      	b.n	80032c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800328c:	4b09      	ldr	r3, [pc, #36]	; (80032b4 <HAL_RCC_OscConfig+0x248>)
 800328e:	2200      	movs	r2, #0
 8003290:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003292:	f7ff f9c3 	bl	800261c <HAL_GetTick>
 8003296:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003298:	e00e      	b.n	80032b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800329a:	f7ff f9bf 	bl	800261c <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d907      	bls.n	80032b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e150      	b.n	800354e <HAL_RCC_OscConfig+0x4e2>
 80032ac:	40023800 	.word	0x40023800
 80032b0:	42470000 	.word	0x42470000
 80032b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032b8:	4b88      	ldr	r3, [pc, #544]	; (80034dc <HAL_RCC_OscConfig+0x470>)
 80032ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1ea      	bne.n	800329a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f000 8097 	beq.w	8003400 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032d2:	2300      	movs	r3, #0
 80032d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032d6:	4b81      	ldr	r3, [pc, #516]	; (80034dc <HAL_RCC_OscConfig+0x470>)
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10f      	bne.n	8003302 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032e2:	2300      	movs	r3, #0
 80032e4:	60bb      	str	r3, [r7, #8]
 80032e6:	4b7d      	ldr	r3, [pc, #500]	; (80034dc <HAL_RCC_OscConfig+0x470>)
 80032e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ea:	4a7c      	ldr	r2, [pc, #496]	; (80034dc <HAL_RCC_OscConfig+0x470>)
 80032ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032f0:	6413      	str	r3, [r2, #64]	; 0x40
 80032f2:	4b7a      	ldr	r3, [pc, #488]	; (80034dc <HAL_RCC_OscConfig+0x470>)
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032fa:	60bb      	str	r3, [r7, #8]
 80032fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032fe:	2301      	movs	r3, #1
 8003300:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003302:	4b77      	ldr	r3, [pc, #476]	; (80034e0 <HAL_RCC_OscConfig+0x474>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800330a:	2b00      	cmp	r3, #0
 800330c:	d118      	bne.n	8003340 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800330e:	4b74      	ldr	r3, [pc, #464]	; (80034e0 <HAL_RCC_OscConfig+0x474>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a73      	ldr	r2, [pc, #460]	; (80034e0 <HAL_RCC_OscConfig+0x474>)
 8003314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003318:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800331a:	f7ff f97f 	bl	800261c <HAL_GetTick>
 800331e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003320:	e008      	b.n	8003334 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003322:	f7ff f97b 	bl	800261c <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	2b02      	cmp	r3, #2
 800332e:	d901      	bls.n	8003334 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e10c      	b.n	800354e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003334:	4b6a      	ldr	r3, [pc, #424]	; (80034e0 <HAL_RCC_OscConfig+0x474>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800333c:	2b00      	cmp	r3, #0
 800333e:	d0f0      	beq.n	8003322 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d106      	bne.n	8003356 <HAL_RCC_OscConfig+0x2ea>
 8003348:	4b64      	ldr	r3, [pc, #400]	; (80034dc <HAL_RCC_OscConfig+0x470>)
 800334a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334c:	4a63      	ldr	r2, [pc, #396]	; (80034dc <HAL_RCC_OscConfig+0x470>)
 800334e:	f043 0301 	orr.w	r3, r3, #1
 8003352:	6713      	str	r3, [r2, #112]	; 0x70
 8003354:	e01c      	b.n	8003390 <HAL_RCC_OscConfig+0x324>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	2b05      	cmp	r3, #5
 800335c:	d10c      	bne.n	8003378 <HAL_RCC_OscConfig+0x30c>
 800335e:	4b5f      	ldr	r3, [pc, #380]	; (80034dc <HAL_RCC_OscConfig+0x470>)
 8003360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003362:	4a5e      	ldr	r2, [pc, #376]	; (80034dc <HAL_RCC_OscConfig+0x470>)
 8003364:	f043 0304 	orr.w	r3, r3, #4
 8003368:	6713      	str	r3, [r2, #112]	; 0x70
 800336a:	4b5c      	ldr	r3, [pc, #368]	; (80034dc <HAL_RCC_OscConfig+0x470>)
 800336c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336e:	4a5b      	ldr	r2, [pc, #364]	; (80034dc <HAL_RCC_OscConfig+0x470>)
 8003370:	f043 0301 	orr.w	r3, r3, #1
 8003374:	6713      	str	r3, [r2, #112]	; 0x70
 8003376:	e00b      	b.n	8003390 <HAL_RCC_OscConfig+0x324>
 8003378:	4b58      	ldr	r3, [pc, #352]	; (80034dc <HAL_RCC_OscConfig+0x470>)
 800337a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337c:	4a57      	ldr	r2, [pc, #348]	; (80034dc <HAL_RCC_OscConfig+0x470>)
 800337e:	f023 0301 	bic.w	r3, r3, #1
 8003382:	6713      	str	r3, [r2, #112]	; 0x70
 8003384:	4b55      	ldr	r3, [pc, #340]	; (80034dc <HAL_RCC_OscConfig+0x470>)
 8003386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003388:	4a54      	ldr	r2, [pc, #336]	; (80034dc <HAL_RCC_OscConfig+0x470>)
 800338a:	f023 0304 	bic.w	r3, r3, #4
 800338e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d015      	beq.n	80033c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003398:	f7ff f940 	bl	800261c <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800339e:	e00a      	b.n	80033b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033a0:	f7ff f93c 	bl	800261c <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e0cb      	b.n	800354e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033b6:	4b49      	ldr	r3, [pc, #292]	; (80034dc <HAL_RCC_OscConfig+0x470>)
 80033b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d0ee      	beq.n	80033a0 <HAL_RCC_OscConfig+0x334>
 80033c2:	e014      	b.n	80033ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033c4:	f7ff f92a 	bl	800261c <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033ca:	e00a      	b.n	80033e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033cc:	f7ff f926 	bl	800261c <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033da:	4293      	cmp	r3, r2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e0b5      	b.n	800354e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033e2:	4b3e      	ldr	r3, [pc, #248]	; (80034dc <HAL_RCC_OscConfig+0x470>)
 80033e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1ee      	bne.n	80033cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033ee:	7dfb      	ldrb	r3, [r7, #23]
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d105      	bne.n	8003400 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033f4:	4b39      	ldr	r3, [pc, #228]	; (80034dc <HAL_RCC_OscConfig+0x470>)
 80033f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f8:	4a38      	ldr	r2, [pc, #224]	; (80034dc <HAL_RCC_OscConfig+0x470>)
 80033fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	2b00      	cmp	r3, #0
 8003406:	f000 80a1 	beq.w	800354c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800340a:	4b34      	ldr	r3, [pc, #208]	; (80034dc <HAL_RCC_OscConfig+0x470>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f003 030c 	and.w	r3, r3, #12
 8003412:	2b08      	cmp	r3, #8
 8003414:	d05c      	beq.n	80034d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	2b02      	cmp	r3, #2
 800341c:	d141      	bne.n	80034a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800341e:	4b31      	ldr	r3, [pc, #196]	; (80034e4 <HAL_RCC_OscConfig+0x478>)
 8003420:	2200      	movs	r2, #0
 8003422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003424:	f7ff f8fa 	bl	800261c <HAL_GetTick>
 8003428:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800342a:	e008      	b.n	800343e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800342c:	f7ff f8f6 	bl	800261c <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b02      	cmp	r3, #2
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e087      	b.n	800354e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800343e:	4b27      	ldr	r3, [pc, #156]	; (80034dc <HAL_RCC_OscConfig+0x470>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1f0      	bne.n	800342c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	69da      	ldr	r2, [r3, #28]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	431a      	orrs	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003458:	019b      	lsls	r3, r3, #6
 800345a:	431a      	orrs	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003460:	085b      	lsrs	r3, r3, #1
 8003462:	3b01      	subs	r3, #1
 8003464:	041b      	lsls	r3, r3, #16
 8003466:	431a      	orrs	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346c:	061b      	lsls	r3, r3, #24
 800346e:	491b      	ldr	r1, [pc, #108]	; (80034dc <HAL_RCC_OscConfig+0x470>)
 8003470:	4313      	orrs	r3, r2
 8003472:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003474:	4b1b      	ldr	r3, [pc, #108]	; (80034e4 <HAL_RCC_OscConfig+0x478>)
 8003476:	2201      	movs	r2, #1
 8003478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800347a:	f7ff f8cf 	bl	800261c <HAL_GetTick>
 800347e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003480:	e008      	b.n	8003494 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003482:	f7ff f8cb 	bl	800261c <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	2b02      	cmp	r3, #2
 800348e:	d901      	bls.n	8003494 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e05c      	b.n	800354e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003494:	4b11      	ldr	r3, [pc, #68]	; (80034dc <HAL_RCC_OscConfig+0x470>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d0f0      	beq.n	8003482 <HAL_RCC_OscConfig+0x416>
 80034a0:	e054      	b.n	800354c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034a2:	4b10      	ldr	r3, [pc, #64]	; (80034e4 <HAL_RCC_OscConfig+0x478>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a8:	f7ff f8b8 	bl	800261c <HAL_GetTick>
 80034ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ae:	e008      	b.n	80034c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034b0:	f7ff f8b4 	bl	800261c <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e045      	b.n	800354e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034c2:	4b06      	ldr	r3, [pc, #24]	; (80034dc <HAL_RCC_OscConfig+0x470>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1f0      	bne.n	80034b0 <HAL_RCC_OscConfig+0x444>
 80034ce:	e03d      	b.n	800354c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d107      	bne.n	80034e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e038      	b.n	800354e <HAL_RCC_OscConfig+0x4e2>
 80034dc:	40023800 	.word	0x40023800
 80034e0:	40007000 	.word	0x40007000
 80034e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034e8:	4b1b      	ldr	r3, [pc, #108]	; (8003558 <HAL_RCC_OscConfig+0x4ec>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d028      	beq.n	8003548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003500:	429a      	cmp	r2, r3
 8003502:	d121      	bne.n	8003548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800350e:	429a      	cmp	r2, r3
 8003510:	d11a      	bne.n	8003548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003518:	4013      	ands	r3, r2
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800351e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003520:	4293      	cmp	r3, r2
 8003522:	d111      	bne.n	8003548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352e:	085b      	lsrs	r3, r3, #1
 8003530:	3b01      	subs	r3, #1
 8003532:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003534:	429a      	cmp	r2, r3
 8003536:	d107      	bne.n	8003548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003542:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003544:	429a      	cmp	r2, r3
 8003546:	d001      	beq.n	800354c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e000      	b.n	800354e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3718      	adds	r7, #24
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	40023800 	.word	0x40023800

0800355c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e0cc      	b.n	800370a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003570:	4b68      	ldr	r3, [pc, #416]	; (8003714 <HAL_RCC_ClockConfig+0x1b8>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0307 	and.w	r3, r3, #7
 8003578:	683a      	ldr	r2, [r7, #0]
 800357a:	429a      	cmp	r2, r3
 800357c:	d90c      	bls.n	8003598 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800357e:	4b65      	ldr	r3, [pc, #404]	; (8003714 <HAL_RCC_ClockConfig+0x1b8>)
 8003580:	683a      	ldr	r2, [r7, #0]
 8003582:	b2d2      	uxtb	r2, r2
 8003584:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003586:	4b63      	ldr	r3, [pc, #396]	; (8003714 <HAL_RCC_ClockConfig+0x1b8>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0307 	and.w	r3, r3, #7
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	429a      	cmp	r2, r3
 8003592:	d001      	beq.n	8003598 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e0b8      	b.n	800370a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d020      	beq.n	80035e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0304 	and.w	r3, r3, #4
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d005      	beq.n	80035bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035b0:	4b59      	ldr	r3, [pc, #356]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	4a58      	ldr	r2, [pc, #352]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 80035b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0308 	and.w	r3, r3, #8
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d005      	beq.n	80035d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035c8:	4b53      	ldr	r3, [pc, #332]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	4a52      	ldr	r2, [pc, #328]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 80035ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035d4:	4b50      	ldr	r3, [pc, #320]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	494d      	ldr	r1, [pc, #308]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d044      	beq.n	800367c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d107      	bne.n	800360a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035fa:	4b47      	ldr	r3, [pc, #284]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d119      	bne.n	800363a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e07f      	b.n	800370a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	2b02      	cmp	r3, #2
 8003610:	d003      	beq.n	800361a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003616:	2b03      	cmp	r3, #3
 8003618:	d107      	bne.n	800362a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800361a:	4b3f      	ldr	r3, [pc, #252]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d109      	bne.n	800363a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e06f      	b.n	800370a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800362a:	4b3b      	ldr	r3, [pc, #236]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e067      	b.n	800370a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800363a:	4b37      	ldr	r3, [pc, #220]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f023 0203 	bic.w	r2, r3, #3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	4934      	ldr	r1, [pc, #208]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 8003648:	4313      	orrs	r3, r2
 800364a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800364c:	f7fe ffe6 	bl	800261c <HAL_GetTick>
 8003650:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003652:	e00a      	b.n	800366a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003654:	f7fe ffe2 	bl	800261c <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003662:	4293      	cmp	r3, r2
 8003664:	d901      	bls.n	800366a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e04f      	b.n	800370a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800366a:	4b2b      	ldr	r3, [pc, #172]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f003 020c 	and.w	r2, r3, #12
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	429a      	cmp	r2, r3
 800367a:	d1eb      	bne.n	8003654 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800367c:	4b25      	ldr	r3, [pc, #148]	; (8003714 <HAL_RCC_ClockConfig+0x1b8>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0307 	and.w	r3, r3, #7
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	429a      	cmp	r2, r3
 8003688:	d20c      	bcs.n	80036a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800368a:	4b22      	ldr	r3, [pc, #136]	; (8003714 <HAL_RCC_ClockConfig+0x1b8>)
 800368c:	683a      	ldr	r2, [r7, #0]
 800368e:	b2d2      	uxtb	r2, r2
 8003690:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003692:	4b20      	ldr	r3, [pc, #128]	; (8003714 <HAL_RCC_ClockConfig+0x1b8>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0307 	and.w	r3, r3, #7
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	429a      	cmp	r2, r3
 800369e:	d001      	beq.n	80036a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e032      	b.n	800370a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0304 	and.w	r3, r3, #4
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d008      	beq.n	80036c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036b0:	4b19      	ldr	r3, [pc, #100]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	4916      	ldr	r1, [pc, #88]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0308 	and.w	r3, r3, #8
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d009      	beq.n	80036e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036ce:	4b12      	ldr	r3, [pc, #72]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	490e      	ldr	r1, [pc, #56]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036e2:	f000 f821 	bl	8003728 <HAL_RCC_GetSysClockFreq>
 80036e6:	4602      	mov	r2, r0
 80036e8:	4b0b      	ldr	r3, [pc, #44]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	091b      	lsrs	r3, r3, #4
 80036ee:	f003 030f 	and.w	r3, r3, #15
 80036f2:	490a      	ldr	r1, [pc, #40]	; (800371c <HAL_RCC_ClockConfig+0x1c0>)
 80036f4:	5ccb      	ldrb	r3, [r1, r3]
 80036f6:	fa22 f303 	lsr.w	r3, r2, r3
 80036fa:	4a09      	ldr	r2, [pc, #36]	; (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 80036fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036fe:	4b09      	ldr	r3, [pc, #36]	; (8003724 <HAL_RCC_ClockConfig+0x1c8>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4618      	mov	r0, r3
 8003704:	f7fe ff46 	bl	8002594 <HAL_InitTick>

  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	40023c00 	.word	0x40023c00
 8003718:	40023800 	.word	0x40023800
 800371c:	08007150 	.word	0x08007150
 8003720:	20000008 	.word	0x20000008
 8003724:	2000000c 	.word	0x2000000c

08003728 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003728:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800372c:	b094      	sub	sp, #80	; 0x50
 800372e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003730:	2300      	movs	r3, #0
 8003732:	647b      	str	r3, [r7, #68]	; 0x44
 8003734:	2300      	movs	r3, #0
 8003736:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003738:	2300      	movs	r3, #0
 800373a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800373c:	2300      	movs	r3, #0
 800373e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003740:	4b79      	ldr	r3, [pc, #484]	; (8003928 <HAL_RCC_GetSysClockFreq+0x200>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f003 030c 	and.w	r3, r3, #12
 8003748:	2b08      	cmp	r3, #8
 800374a:	d00d      	beq.n	8003768 <HAL_RCC_GetSysClockFreq+0x40>
 800374c:	2b08      	cmp	r3, #8
 800374e:	f200 80e1 	bhi.w	8003914 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003752:	2b00      	cmp	r3, #0
 8003754:	d002      	beq.n	800375c <HAL_RCC_GetSysClockFreq+0x34>
 8003756:	2b04      	cmp	r3, #4
 8003758:	d003      	beq.n	8003762 <HAL_RCC_GetSysClockFreq+0x3a>
 800375a:	e0db      	b.n	8003914 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800375c:	4b73      	ldr	r3, [pc, #460]	; (800392c <HAL_RCC_GetSysClockFreq+0x204>)
 800375e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003760:	e0db      	b.n	800391a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003762:	4b73      	ldr	r3, [pc, #460]	; (8003930 <HAL_RCC_GetSysClockFreq+0x208>)
 8003764:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003766:	e0d8      	b.n	800391a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003768:	4b6f      	ldr	r3, [pc, #444]	; (8003928 <HAL_RCC_GetSysClockFreq+0x200>)
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003770:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003772:	4b6d      	ldr	r3, [pc, #436]	; (8003928 <HAL_RCC_GetSysClockFreq+0x200>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d063      	beq.n	8003846 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800377e:	4b6a      	ldr	r3, [pc, #424]	; (8003928 <HAL_RCC_GetSysClockFreq+0x200>)
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	099b      	lsrs	r3, r3, #6
 8003784:	2200      	movs	r2, #0
 8003786:	63bb      	str	r3, [r7, #56]	; 0x38
 8003788:	63fa      	str	r2, [r7, #60]	; 0x3c
 800378a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800378c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003790:	633b      	str	r3, [r7, #48]	; 0x30
 8003792:	2300      	movs	r3, #0
 8003794:	637b      	str	r3, [r7, #52]	; 0x34
 8003796:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800379a:	4622      	mov	r2, r4
 800379c:	462b      	mov	r3, r5
 800379e:	f04f 0000 	mov.w	r0, #0
 80037a2:	f04f 0100 	mov.w	r1, #0
 80037a6:	0159      	lsls	r1, r3, #5
 80037a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037ac:	0150      	lsls	r0, r2, #5
 80037ae:	4602      	mov	r2, r0
 80037b0:	460b      	mov	r3, r1
 80037b2:	4621      	mov	r1, r4
 80037b4:	1a51      	subs	r1, r2, r1
 80037b6:	6139      	str	r1, [r7, #16]
 80037b8:	4629      	mov	r1, r5
 80037ba:	eb63 0301 	sbc.w	r3, r3, r1
 80037be:	617b      	str	r3, [r7, #20]
 80037c0:	f04f 0200 	mov.w	r2, #0
 80037c4:	f04f 0300 	mov.w	r3, #0
 80037c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037cc:	4659      	mov	r1, fp
 80037ce:	018b      	lsls	r3, r1, #6
 80037d0:	4651      	mov	r1, sl
 80037d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037d6:	4651      	mov	r1, sl
 80037d8:	018a      	lsls	r2, r1, #6
 80037da:	4651      	mov	r1, sl
 80037dc:	ebb2 0801 	subs.w	r8, r2, r1
 80037e0:	4659      	mov	r1, fp
 80037e2:	eb63 0901 	sbc.w	r9, r3, r1
 80037e6:	f04f 0200 	mov.w	r2, #0
 80037ea:	f04f 0300 	mov.w	r3, #0
 80037ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037fa:	4690      	mov	r8, r2
 80037fc:	4699      	mov	r9, r3
 80037fe:	4623      	mov	r3, r4
 8003800:	eb18 0303 	adds.w	r3, r8, r3
 8003804:	60bb      	str	r3, [r7, #8]
 8003806:	462b      	mov	r3, r5
 8003808:	eb49 0303 	adc.w	r3, r9, r3
 800380c:	60fb      	str	r3, [r7, #12]
 800380e:	f04f 0200 	mov.w	r2, #0
 8003812:	f04f 0300 	mov.w	r3, #0
 8003816:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800381a:	4629      	mov	r1, r5
 800381c:	024b      	lsls	r3, r1, #9
 800381e:	4621      	mov	r1, r4
 8003820:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003824:	4621      	mov	r1, r4
 8003826:	024a      	lsls	r2, r1, #9
 8003828:	4610      	mov	r0, r2
 800382a:	4619      	mov	r1, r3
 800382c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800382e:	2200      	movs	r2, #0
 8003830:	62bb      	str	r3, [r7, #40]	; 0x28
 8003832:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003834:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003838:	f7fc fd1a 	bl	8000270 <__aeabi_uldivmod>
 800383c:	4602      	mov	r2, r0
 800383e:	460b      	mov	r3, r1
 8003840:	4613      	mov	r3, r2
 8003842:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003844:	e058      	b.n	80038f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003846:	4b38      	ldr	r3, [pc, #224]	; (8003928 <HAL_RCC_GetSysClockFreq+0x200>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	099b      	lsrs	r3, r3, #6
 800384c:	2200      	movs	r2, #0
 800384e:	4618      	mov	r0, r3
 8003850:	4611      	mov	r1, r2
 8003852:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003856:	623b      	str	r3, [r7, #32]
 8003858:	2300      	movs	r3, #0
 800385a:	627b      	str	r3, [r7, #36]	; 0x24
 800385c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003860:	4642      	mov	r2, r8
 8003862:	464b      	mov	r3, r9
 8003864:	f04f 0000 	mov.w	r0, #0
 8003868:	f04f 0100 	mov.w	r1, #0
 800386c:	0159      	lsls	r1, r3, #5
 800386e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003872:	0150      	lsls	r0, r2, #5
 8003874:	4602      	mov	r2, r0
 8003876:	460b      	mov	r3, r1
 8003878:	4641      	mov	r1, r8
 800387a:	ebb2 0a01 	subs.w	sl, r2, r1
 800387e:	4649      	mov	r1, r9
 8003880:	eb63 0b01 	sbc.w	fp, r3, r1
 8003884:	f04f 0200 	mov.w	r2, #0
 8003888:	f04f 0300 	mov.w	r3, #0
 800388c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003890:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003894:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003898:	ebb2 040a 	subs.w	r4, r2, sl
 800389c:	eb63 050b 	sbc.w	r5, r3, fp
 80038a0:	f04f 0200 	mov.w	r2, #0
 80038a4:	f04f 0300 	mov.w	r3, #0
 80038a8:	00eb      	lsls	r3, r5, #3
 80038aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038ae:	00e2      	lsls	r2, r4, #3
 80038b0:	4614      	mov	r4, r2
 80038b2:	461d      	mov	r5, r3
 80038b4:	4643      	mov	r3, r8
 80038b6:	18e3      	adds	r3, r4, r3
 80038b8:	603b      	str	r3, [r7, #0]
 80038ba:	464b      	mov	r3, r9
 80038bc:	eb45 0303 	adc.w	r3, r5, r3
 80038c0:	607b      	str	r3, [r7, #4]
 80038c2:	f04f 0200 	mov.w	r2, #0
 80038c6:	f04f 0300 	mov.w	r3, #0
 80038ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038ce:	4629      	mov	r1, r5
 80038d0:	028b      	lsls	r3, r1, #10
 80038d2:	4621      	mov	r1, r4
 80038d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038d8:	4621      	mov	r1, r4
 80038da:	028a      	lsls	r2, r1, #10
 80038dc:	4610      	mov	r0, r2
 80038de:	4619      	mov	r1, r3
 80038e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038e2:	2200      	movs	r2, #0
 80038e4:	61bb      	str	r3, [r7, #24]
 80038e6:	61fa      	str	r2, [r7, #28]
 80038e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038ec:	f7fc fcc0 	bl	8000270 <__aeabi_uldivmod>
 80038f0:	4602      	mov	r2, r0
 80038f2:	460b      	mov	r3, r1
 80038f4:	4613      	mov	r3, r2
 80038f6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038f8:	4b0b      	ldr	r3, [pc, #44]	; (8003928 <HAL_RCC_GetSysClockFreq+0x200>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	0c1b      	lsrs	r3, r3, #16
 80038fe:	f003 0303 	and.w	r3, r3, #3
 8003902:	3301      	adds	r3, #1
 8003904:	005b      	lsls	r3, r3, #1
 8003906:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003908:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800390a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800390c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003910:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003912:	e002      	b.n	800391a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003914:	4b05      	ldr	r3, [pc, #20]	; (800392c <HAL_RCC_GetSysClockFreq+0x204>)
 8003916:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003918:	bf00      	nop
    }
  }
  return sysclockfreq;
 800391a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800391c:	4618      	mov	r0, r3
 800391e:	3750      	adds	r7, #80	; 0x50
 8003920:	46bd      	mov	sp, r7
 8003922:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003926:	bf00      	nop
 8003928:	40023800 	.word	0x40023800
 800392c:	00f42400 	.word	0x00f42400
 8003930:	007a1200 	.word	0x007a1200

08003934 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003934:	b480      	push	{r7}
 8003936:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003938:	4b03      	ldr	r3, [pc, #12]	; (8003948 <HAL_RCC_GetHCLKFreq+0x14>)
 800393a:	681b      	ldr	r3, [r3, #0]
}
 800393c:	4618      	mov	r0, r3
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	20000008 	.word	0x20000008

0800394c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003950:	f7ff fff0 	bl	8003934 <HAL_RCC_GetHCLKFreq>
 8003954:	4602      	mov	r2, r0
 8003956:	4b05      	ldr	r3, [pc, #20]	; (800396c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	0a9b      	lsrs	r3, r3, #10
 800395c:	f003 0307 	and.w	r3, r3, #7
 8003960:	4903      	ldr	r1, [pc, #12]	; (8003970 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003962:	5ccb      	ldrb	r3, [r1, r3]
 8003964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003968:	4618      	mov	r0, r3
 800396a:	bd80      	pop	{r7, pc}
 800396c:	40023800 	.word	0x40023800
 8003970:	08007160 	.word	0x08007160

08003974 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003978:	f7ff ffdc 	bl	8003934 <HAL_RCC_GetHCLKFreq>
 800397c:	4602      	mov	r2, r0
 800397e:	4b05      	ldr	r3, [pc, #20]	; (8003994 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	0b5b      	lsrs	r3, r3, #13
 8003984:	f003 0307 	and.w	r3, r3, #7
 8003988:	4903      	ldr	r1, [pc, #12]	; (8003998 <HAL_RCC_GetPCLK2Freq+0x24>)
 800398a:	5ccb      	ldrb	r3, [r1, r3]
 800398c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003990:	4618      	mov	r0, r3
 8003992:	bd80      	pop	{r7, pc}
 8003994:	40023800 	.word	0x40023800
 8003998:	08007160 	.word	0x08007160

0800399c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e041      	b.n	8003a32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d106      	bne.n	80039c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7fe fa84 	bl	8001ed0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2202      	movs	r2, #2
 80039cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	3304      	adds	r3, #4
 80039d8:	4619      	mov	r1, r3
 80039da:	4610      	mov	r0, r2
 80039dc:	f000 fd5c 	bl	8004498 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b082      	sub	sp, #8
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d101      	bne.n	8003a4c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e041      	b.n	8003ad0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d106      	bne.n	8003a66 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f000 f839 	bl	8003ad8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2202      	movs	r2, #2
 8003a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	3304      	adds	r3, #4
 8003a76:	4619      	mov	r1, r3
 8003a78:	4610      	mov	r0, r2
 8003a7a:	f000 fd0d 	bl	8004498 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3708      	adds	r7, #8
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003ae0:	bf00      	nop
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d109      	bne.n	8003b10 <HAL_TIM_PWM_Start+0x24>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	bf14      	ite	ne
 8003b08:	2301      	movne	r3, #1
 8003b0a:	2300      	moveq	r3, #0
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	e022      	b.n	8003b56 <HAL_TIM_PWM_Start+0x6a>
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	2b04      	cmp	r3, #4
 8003b14:	d109      	bne.n	8003b2a <HAL_TIM_PWM_Start+0x3e>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	bf14      	ite	ne
 8003b22:	2301      	movne	r3, #1
 8003b24:	2300      	moveq	r3, #0
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	e015      	b.n	8003b56 <HAL_TIM_PWM_Start+0x6a>
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	2b08      	cmp	r3, #8
 8003b2e:	d109      	bne.n	8003b44 <HAL_TIM_PWM_Start+0x58>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	bf14      	ite	ne
 8003b3c:	2301      	movne	r3, #1
 8003b3e:	2300      	moveq	r3, #0
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	e008      	b.n	8003b56 <HAL_TIM_PWM_Start+0x6a>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	bf14      	ite	ne
 8003b50:	2301      	movne	r3, #1
 8003b52:	2300      	moveq	r3, #0
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e07c      	b.n	8003c58 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d104      	bne.n	8003b6e <HAL_TIM_PWM_Start+0x82>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2202      	movs	r2, #2
 8003b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b6c:	e013      	b.n	8003b96 <HAL_TIM_PWM_Start+0xaa>
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	2b04      	cmp	r3, #4
 8003b72:	d104      	bne.n	8003b7e <HAL_TIM_PWM_Start+0x92>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2202      	movs	r2, #2
 8003b78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b7c:	e00b      	b.n	8003b96 <HAL_TIM_PWM_Start+0xaa>
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	2b08      	cmp	r3, #8
 8003b82:	d104      	bne.n	8003b8e <HAL_TIM_PWM_Start+0xa2>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2202      	movs	r2, #2
 8003b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b8c:	e003      	b.n	8003b96 <HAL_TIM_PWM_Start+0xaa>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2202      	movs	r2, #2
 8003b92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	6839      	ldr	r1, [r7, #0]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f000 ff64 	bl	8004a6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a2d      	ldr	r2, [pc, #180]	; (8003c60 <HAL_TIM_PWM_Start+0x174>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d004      	beq.n	8003bb8 <HAL_TIM_PWM_Start+0xcc>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a2c      	ldr	r2, [pc, #176]	; (8003c64 <HAL_TIM_PWM_Start+0x178>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d101      	bne.n	8003bbc <HAL_TIM_PWM_Start+0xd0>
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e000      	b.n	8003bbe <HAL_TIM_PWM_Start+0xd2>
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d007      	beq.n	8003bd2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bd0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a22      	ldr	r2, [pc, #136]	; (8003c60 <HAL_TIM_PWM_Start+0x174>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d022      	beq.n	8003c22 <HAL_TIM_PWM_Start+0x136>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003be4:	d01d      	beq.n	8003c22 <HAL_TIM_PWM_Start+0x136>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a1f      	ldr	r2, [pc, #124]	; (8003c68 <HAL_TIM_PWM_Start+0x17c>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d018      	beq.n	8003c22 <HAL_TIM_PWM_Start+0x136>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a1d      	ldr	r2, [pc, #116]	; (8003c6c <HAL_TIM_PWM_Start+0x180>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d013      	beq.n	8003c22 <HAL_TIM_PWM_Start+0x136>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a1c      	ldr	r2, [pc, #112]	; (8003c70 <HAL_TIM_PWM_Start+0x184>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d00e      	beq.n	8003c22 <HAL_TIM_PWM_Start+0x136>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a16      	ldr	r2, [pc, #88]	; (8003c64 <HAL_TIM_PWM_Start+0x178>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d009      	beq.n	8003c22 <HAL_TIM_PWM_Start+0x136>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a18      	ldr	r2, [pc, #96]	; (8003c74 <HAL_TIM_PWM_Start+0x188>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d004      	beq.n	8003c22 <HAL_TIM_PWM_Start+0x136>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a16      	ldr	r2, [pc, #88]	; (8003c78 <HAL_TIM_PWM_Start+0x18c>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d111      	bne.n	8003c46 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f003 0307 	and.w	r3, r3, #7
 8003c2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2b06      	cmp	r3, #6
 8003c32:	d010      	beq.n	8003c56 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f042 0201 	orr.w	r2, r2, #1
 8003c42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c44:	e007      	b.n	8003c56 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f042 0201 	orr.w	r2, r2, #1
 8003c54:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3710      	adds	r7, #16
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	40010000 	.word	0x40010000
 8003c64:	40010400 	.word	0x40010400
 8003c68:	40000400 	.word	0x40000400
 8003c6c:	40000800 	.word	0x40000800
 8003c70:	40000c00 	.word	0x40000c00
 8003c74:	40014000 	.word	0x40014000
 8003c78:	40001800 	.word	0x40001800

08003c7c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b086      	sub	sp, #24
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d101      	bne.n	8003c90 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e097      	b.n	8003dc0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d106      	bne.n	8003caa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f7fe f9b3 	bl	8002010 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2202      	movs	r2, #2
 8003cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	6812      	ldr	r2, [r2, #0]
 8003cbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cc0:	f023 0307 	bic.w	r3, r3, #7
 8003cc4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	3304      	adds	r3, #4
 8003cce:	4619      	mov	r1, r3
 8003cd0:	4610      	mov	r0, r2
 8003cd2:	f000 fbe1 	bl	8004498 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6a1b      	ldr	r3, [r3, #32]
 8003cec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	697a      	ldr	r2, [r7, #20]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cfe:	f023 0303 	bic.w	r3, r3, #3
 8003d02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	689a      	ldr	r2, [r3, #8]
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	021b      	lsls	r3, r3, #8
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003d1c:	f023 030c 	bic.w	r3, r3, #12
 8003d20:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	68da      	ldr	r2, [r3, #12]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	69db      	ldr	r3, [r3, #28]
 8003d36:	021b      	lsls	r3, r3, #8
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	011a      	lsls	r2, r3, #4
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	031b      	lsls	r3, r3, #12
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003d5a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003d62:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685a      	ldr	r2, [r3, #4]
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	011b      	lsls	r3, r3, #4
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3718      	adds	r7, #24
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dd8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003de0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003de8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003df0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d110      	bne.n	8003e1a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003df8:	7bfb      	ldrb	r3, [r7, #15]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d102      	bne.n	8003e04 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003dfe:	7b7b      	ldrb	r3, [r7, #13]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d001      	beq.n	8003e08 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e089      	b.n	8003f1c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2202      	movs	r2, #2
 8003e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e18:	e031      	b.n	8003e7e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	2b04      	cmp	r3, #4
 8003e1e:	d110      	bne.n	8003e42 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e20:	7bbb      	ldrb	r3, [r7, #14]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d102      	bne.n	8003e2c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e26:	7b3b      	ldrb	r3, [r7, #12]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d001      	beq.n	8003e30 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e075      	b.n	8003f1c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2202      	movs	r2, #2
 8003e34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2202      	movs	r2, #2
 8003e3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e40:	e01d      	b.n	8003e7e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e42:	7bfb      	ldrb	r3, [r7, #15]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d108      	bne.n	8003e5a <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e48:	7bbb      	ldrb	r3, [r7, #14]
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d105      	bne.n	8003e5a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e4e:	7b7b      	ldrb	r3, [r7, #13]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d102      	bne.n	8003e5a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e54:	7b3b      	ldrb	r3, [r7, #12]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d001      	beq.n	8003e5e <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e05e      	b.n	8003f1c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2202      	movs	r2, #2
 8003e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2202      	movs	r2, #2
 8003e6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2202      	movs	r2, #2
 8003e72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2202      	movs	r2, #2
 8003e7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d003      	beq.n	8003e8c <HAL_TIM_Encoder_Start_IT+0xc4>
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	2b04      	cmp	r3, #4
 8003e88:	d010      	beq.n	8003eac <HAL_TIM_Encoder_Start_IT+0xe4>
 8003e8a:	e01f      	b.n	8003ecc <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2201      	movs	r2, #1
 8003e92:	2100      	movs	r1, #0
 8003e94:	4618      	mov	r0, r3
 8003e96:	f000 fde9 	bl	8004a6c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68da      	ldr	r2, [r3, #12]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f042 0202 	orr.w	r2, r2, #2
 8003ea8:	60da      	str	r2, [r3, #12]
      break;
 8003eaa:	e02e      	b.n	8003f0a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	2104      	movs	r1, #4
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f000 fdd9 	bl	8004a6c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68da      	ldr	r2, [r3, #12]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f042 0204 	orr.w	r2, r2, #4
 8003ec8:	60da      	str	r2, [r3, #12]
      break;
 8003eca:	e01e      	b.n	8003f0a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	2100      	movs	r1, #0
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f000 fdc9 	bl	8004a6c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	2104      	movs	r1, #4
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f000 fdc2 	bl	8004a6c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68da      	ldr	r2, [r3, #12]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f042 0202 	orr.w	r2, r2, #2
 8003ef6:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68da      	ldr	r2, [r3, #12]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f042 0204 	orr.w	r2, r2, #4
 8003f06:	60da      	str	r2, [r3, #12]
      break;
 8003f08:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f042 0201 	orr.w	r2, r2, #1
 8003f18:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3710      	adds	r7, #16
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d122      	bne.n	8003f80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d11b      	bne.n	8003f80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f06f 0202 	mvn.w	r2, #2
 8003f50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2201      	movs	r2, #1
 8003f56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	f003 0303 	and.w	r3, r3, #3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d003      	beq.n	8003f6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f7fc fb04 	bl	8000574 <HAL_TIM_IC_CaptureCallback>
 8003f6c:	e005      	b.n	8003f7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 fa73 	bl	800445a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 fa7a 	bl	800446e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	f003 0304 	and.w	r3, r3, #4
 8003f8a:	2b04      	cmp	r3, #4
 8003f8c:	d122      	bne.n	8003fd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	f003 0304 	and.w	r3, r3, #4
 8003f98:	2b04      	cmp	r3, #4
 8003f9a:	d11b      	bne.n	8003fd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f06f 0204 	mvn.w	r2, #4
 8003fa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2202      	movs	r2, #2
 8003faa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d003      	beq.n	8003fc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7fc fada 	bl	8000574 <HAL_TIM_IC_CaptureCallback>
 8003fc0:	e005      	b.n	8003fce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 fa49 	bl	800445a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 fa50 	bl	800446e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	f003 0308 	and.w	r3, r3, #8
 8003fde:	2b08      	cmp	r3, #8
 8003fe0:	d122      	bne.n	8004028 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	f003 0308 	and.w	r3, r3, #8
 8003fec:	2b08      	cmp	r3, #8
 8003fee:	d11b      	bne.n	8004028 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f06f 0208 	mvn.w	r2, #8
 8003ff8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2204      	movs	r2, #4
 8003ffe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	69db      	ldr	r3, [r3, #28]
 8004006:	f003 0303 	and.w	r3, r3, #3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d003      	beq.n	8004016 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f7fc fab0 	bl	8000574 <HAL_TIM_IC_CaptureCallback>
 8004014:	e005      	b.n	8004022 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 fa1f 	bl	800445a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 fa26 	bl	800446e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	f003 0310 	and.w	r3, r3, #16
 8004032:	2b10      	cmp	r3, #16
 8004034:	d122      	bne.n	800407c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	f003 0310 	and.w	r3, r3, #16
 8004040:	2b10      	cmp	r3, #16
 8004042:	d11b      	bne.n	800407c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f06f 0210 	mvn.w	r2, #16
 800404c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2208      	movs	r2, #8
 8004052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	69db      	ldr	r3, [r3, #28]
 800405a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800405e:	2b00      	cmp	r3, #0
 8004060:	d003      	beq.n	800406a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7fc fa86 	bl	8000574 <HAL_TIM_IC_CaptureCallback>
 8004068:	e005      	b.n	8004076 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f9f5 	bl	800445a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 f9fc 	bl	800446e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b01      	cmp	r3, #1
 8004088:	d10e      	bne.n	80040a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	f003 0301 	and.w	r3, r3, #1
 8004094:	2b01      	cmp	r3, #1
 8004096:	d107      	bne.n	80040a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f06f 0201 	mvn.w	r2, #1
 80040a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f9cf 	bl	8004446 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040b2:	2b80      	cmp	r3, #128	; 0x80
 80040b4:	d10e      	bne.n	80040d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040c0:	2b80      	cmp	r3, #128	; 0x80
 80040c2:	d107      	bne.n	80040d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 fdca 	bl	8004c68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040de:	2b40      	cmp	r3, #64	; 0x40
 80040e0:	d10e      	bne.n	8004100 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ec:	2b40      	cmp	r3, #64	; 0x40
 80040ee:	d107      	bne.n	8004100 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f9c1 	bl	8004482 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	f003 0320 	and.w	r3, r3, #32
 800410a:	2b20      	cmp	r3, #32
 800410c:	d10e      	bne.n	800412c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	f003 0320 	and.w	r3, r3, #32
 8004118:	2b20      	cmp	r3, #32
 800411a:	d107      	bne.n	800412c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f06f 0220 	mvn.w	r2, #32
 8004124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 fd94 	bl	8004c54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800412c:	bf00      	nop
 800412e:	3708      	adds	r7, #8
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b086      	sub	sp, #24
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004140:	2300      	movs	r3, #0
 8004142:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800414a:	2b01      	cmp	r3, #1
 800414c:	d101      	bne.n	8004152 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800414e:	2302      	movs	r3, #2
 8004150:	e0ae      	b.n	80042b0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2b0c      	cmp	r3, #12
 800415e:	f200 809f 	bhi.w	80042a0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004162:	a201      	add	r2, pc, #4	; (adr r2, 8004168 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004168:	0800419d 	.word	0x0800419d
 800416c:	080042a1 	.word	0x080042a1
 8004170:	080042a1 	.word	0x080042a1
 8004174:	080042a1 	.word	0x080042a1
 8004178:	080041dd 	.word	0x080041dd
 800417c:	080042a1 	.word	0x080042a1
 8004180:	080042a1 	.word	0x080042a1
 8004184:	080042a1 	.word	0x080042a1
 8004188:	0800421f 	.word	0x0800421f
 800418c:	080042a1 	.word	0x080042a1
 8004190:	080042a1 	.word	0x080042a1
 8004194:	080042a1 	.word	0x080042a1
 8004198:	0800425f 	.word	0x0800425f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68b9      	ldr	r1, [r7, #8]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f000 fa18 	bl	80045d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	699a      	ldr	r2, [r3, #24]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f042 0208 	orr.w	r2, r2, #8
 80041b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	699a      	ldr	r2, [r3, #24]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f022 0204 	bic.w	r2, r2, #4
 80041c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	6999      	ldr	r1, [r3, #24]
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	691a      	ldr	r2, [r3, #16]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	430a      	orrs	r2, r1
 80041d8:	619a      	str	r2, [r3, #24]
      break;
 80041da:	e064      	b.n	80042a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68b9      	ldr	r1, [r7, #8]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f000 fa68 	bl	80046b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	699a      	ldr	r2, [r3, #24]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	699a      	ldr	r2, [r3, #24]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004206:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	6999      	ldr	r1, [r3, #24]
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	021a      	lsls	r2, r3, #8
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	430a      	orrs	r2, r1
 800421a:	619a      	str	r2, [r3, #24]
      break;
 800421c:	e043      	b.n	80042a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68b9      	ldr	r1, [r7, #8]
 8004224:	4618      	mov	r0, r3
 8004226:	f000 fabd 	bl	80047a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	69da      	ldr	r2, [r3, #28]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f042 0208 	orr.w	r2, r2, #8
 8004238:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	69da      	ldr	r2, [r3, #28]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 0204 	bic.w	r2, r2, #4
 8004248:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	69d9      	ldr	r1, [r3, #28]
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	691a      	ldr	r2, [r3, #16]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	430a      	orrs	r2, r1
 800425a:	61da      	str	r2, [r3, #28]
      break;
 800425c:	e023      	b.n	80042a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68b9      	ldr	r1, [r7, #8]
 8004264:	4618      	mov	r0, r3
 8004266:	f000 fb11 	bl	800488c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	69da      	ldr	r2, [r3, #28]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004278:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	69da      	ldr	r2, [r3, #28]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004288:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	69d9      	ldr	r1, [r3, #28]
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	021a      	lsls	r2, r3, #8
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	430a      	orrs	r2, r1
 800429c:	61da      	str	r2, [r3, #28]
      break;
 800429e:	e002      	b.n	80042a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	75fb      	strb	r3, [r7, #23]
      break;
 80042a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80042ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3718      	adds	r7, #24
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042c2:	2300      	movs	r3, #0
 80042c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d101      	bne.n	80042d4 <HAL_TIM_ConfigClockSource+0x1c>
 80042d0:	2302      	movs	r3, #2
 80042d2:	e0b4      	b.n	800443e <HAL_TIM_ConfigClockSource+0x186>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2202      	movs	r2, #2
 80042e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80042f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68ba      	ldr	r2, [r7, #8]
 8004302:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800430c:	d03e      	beq.n	800438c <HAL_TIM_ConfigClockSource+0xd4>
 800430e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004312:	f200 8087 	bhi.w	8004424 <HAL_TIM_ConfigClockSource+0x16c>
 8004316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800431a:	f000 8086 	beq.w	800442a <HAL_TIM_ConfigClockSource+0x172>
 800431e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004322:	d87f      	bhi.n	8004424 <HAL_TIM_ConfigClockSource+0x16c>
 8004324:	2b70      	cmp	r3, #112	; 0x70
 8004326:	d01a      	beq.n	800435e <HAL_TIM_ConfigClockSource+0xa6>
 8004328:	2b70      	cmp	r3, #112	; 0x70
 800432a:	d87b      	bhi.n	8004424 <HAL_TIM_ConfigClockSource+0x16c>
 800432c:	2b60      	cmp	r3, #96	; 0x60
 800432e:	d050      	beq.n	80043d2 <HAL_TIM_ConfigClockSource+0x11a>
 8004330:	2b60      	cmp	r3, #96	; 0x60
 8004332:	d877      	bhi.n	8004424 <HAL_TIM_ConfigClockSource+0x16c>
 8004334:	2b50      	cmp	r3, #80	; 0x50
 8004336:	d03c      	beq.n	80043b2 <HAL_TIM_ConfigClockSource+0xfa>
 8004338:	2b50      	cmp	r3, #80	; 0x50
 800433a:	d873      	bhi.n	8004424 <HAL_TIM_ConfigClockSource+0x16c>
 800433c:	2b40      	cmp	r3, #64	; 0x40
 800433e:	d058      	beq.n	80043f2 <HAL_TIM_ConfigClockSource+0x13a>
 8004340:	2b40      	cmp	r3, #64	; 0x40
 8004342:	d86f      	bhi.n	8004424 <HAL_TIM_ConfigClockSource+0x16c>
 8004344:	2b30      	cmp	r3, #48	; 0x30
 8004346:	d064      	beq.n	8004412 <HAL_TIM_ConfigClockSource+0x15a>
 8004348:	2b30      	cmp	r3, #48	; 0x30
 800434a:	d86b      	bhi.n	8004424 <HAL_TIM_ConfigClockSource+0x16c>
 800434c:	2b20      	cmp	r3, #32
 800434e:	d060      	beq.n	8004412 <HAL_TIM_ConfigClockSource+0x15a>
 8004350:	2b20      	cmp	r3, #32
 8004352:	d867      	bhi.n	8004424 <HAL_TIM_ConfigClockSource+0x16c>
 8004354:	2b00      	cmp	r3, #0
 8004356:	d05c      	beq.n	8004412 <HAL_TIM_ConfigClockSource+0x15a>
 8004358:	2b10      	cmp	r3, #16
 800435a:	d05a      	beq.n	8004412 <HAL_TIM_ConfigClockSource+0x15a>
 800435c:	e062      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6818      	ldr	r0, [r3, #0]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	6899      	ldr	r1, [r3, #8]
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	685a      	ldr	r2, [r3, #4]
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	f000 fb5d 	bl	8004a2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004380:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68ba      	ldr	r2, [r7, #8]
 8004388:	609a      	str	r2, [r3, #8]
      break;
 800438a:	e04f      	b.n	800442c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6818      	ldr	r0, [r3, #0]
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	6899      	ldr	r1, [r3, #8]
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	f000 fb46 	bl	8004a2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	689a      	ldr	r2, [r3, #8]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043ae:	609a      	str	r2, [r3, #8]
      break;
 80043b0:	e03c      	b.n	800442c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6818      	ldr	r0, [r3, #0]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	6859      	ldr	r1, [r3, #4]
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	461a      	mov	r2, r3
 80043c0:	f000 faba 	bl	8004938 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2150      	movs	r1, #80	; 0x50
 80043ca:	4618      	mov	r0, r3
 80043cc:	f000 fb13 	bl	80049f6 <TIM_ITRx_SetConfig>
      break;
 80043d0:	e02c      	b.n	800442c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6818      	ldr	r0, [r3, #0]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	6859      	ldr	r1, [r3, #4]
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	461a      	mov	r2, r3
 80043e0:	f000 fad9 	bl	8004996 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2160      	movs	r1, #96	; 0x60
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 fb03 	bl	80049f6 <TIM_ITRx_SetConfig>
      break;
 80043f0:	e01c      	b.n	800442c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6818      	ldr	r0, [r3, #0]
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	6859      	ldr	r1, [r3, #4]
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	461a      	mov	r2, r3
 8004400:	f000 fa9a 	bl	8004938 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2140      	movs	r1, #64	; 0x40
 800440a:	4618      	mov	r0, r3
 800440c:	f000 faf3 	bl	80049f6 <TIM_ITRx_SetConfig>
      break;
 8004410:	e00c      	b.n	800442c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4619      	mov	r1, r3
 800441c:	4610      	mov	r0, r2
 800441e:	f000 faea 	bl	80049f6 <TIM_ITRx_SetConfig>
      break;
 8004422:	e003      	b.n	800442c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	73fb      	strb	r3, [r7, #15]
      break;
 8004428:	e000      	b.n	800442c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800442a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800443c:	7bfb      	ldrb	r3, [r7, #15]
}
 800443e:	4618      	mov	r0, r3
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004446:	b480      	push	{r7}
 8004448:	b083      	sub	sp, #12
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800444e:	bf00      	nop
 8004450:	370c      	adds	r7, #12
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr

0800445a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800445a:	b480      	push	{r7}
 800445c:	b083      	sub	sp, #12
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004462:	bf00      	nop
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr

0800446e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800446e:	b480      	push	{r7}
 8004470:	b083      	sub	sp, #12
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004476:	bf00      	nop
 8004478:	370c      	adds	r7, #12
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr

08004482 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004482:	b480      	push	{r7}
 8004484:	b083      	sub	sp, #12
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800448a:	bf00      	nop
 800448c:	370c      	adds	r7, #12
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
	...

08004498 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a40      	ldr	r2, [pc, #256]	; (80045ac <TIM_Base_SetConfig+0x114>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d013      	beq.n	80044d8 <TIM_Base_SetConfig+0x40>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044b6:	d00f      	beq.n	80044d8 <TIM_Base_SetConfig+0x40>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a3d      	ldr	r2, [pc, #244]	; (80045b0 <TIM_Base_SetConfig+0x118>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d00b      	beq.n	80044d8 <TIM_Base_SetConfig+0x40>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a3c      	ldr	r2, [pc, #240]	; (80045b4 <TIM_Base_SetConfig+0x11c>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d007      	beq.n	80044d8 <TIM_Base_SetConfig+0x40>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a3b      	ldr	r2, [pc, #236]	; (80045b8 <TIM_Base_SetConfig+0x120>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d003      	beq.n	80044d8 <TIM_Base_SetConfig+0x40>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a3a      	ldr	r2, [pc, #232]	; (80045bc <TIM_Base_SetConfig+0x124>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d108      	bne.n	80044ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a2f      	ldr	r2, [pc, #188]	; (80045ac <TIM_Base_SetConfig+0x114>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d02b      	beq.n	800454a <TIM_Base_SetConfig+0xb2>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044f8:	d027      	beq.n	800454a <TIM_Base_SetConfig+0xb2>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a2c      	ldr	r2, [pc, #176]	; (80045b0 <TIM_Base_SetConfig+0x118>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d023      	beq.n	800454a <TIM_Base_SetConfig+0xb2>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a2b      	ldr	r2, [pc, #172]	; (80045b4 <TIM_Base_SetConfig+0x11c>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d01f      	beq.n	800454a <TIM_Base_SetConfig+0xb2>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a2a      	ldr	r2, [pc, #168]	; (80045b8 <TIM_Base_SetConfig+0x120>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d01b      	beq.n	800454a <TIM_Base_SetConfig+0xb2>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a29      	ldr	r2, [pc, #164]	; (80045bc <TIM_Base_SetConfig+0x124>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d017      	beq.n	800454a <TIM_Base_SetConfig+0xb2>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a28      	ldr	r2, [pc, #160]	; (80045c0 <TIM_Base_SetConfig+0x128>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d013      	beq.n	800454a <TIM_Base_SetConfig+0xb2>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a27      	ldr	r2, [pc, #156]	; (80045c4 <TIM_Base_SetConfig+0x12c>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d00f      	beq.n	800454a <TIM_Base_SetConfig+0xb2>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a26      	ldr	r2, [pc, #152]	; (80045c8 <TIM_Base_SetConfig+0x130>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d00b      	beq.n	800454a <TIM_Base_SetConfig+0xb2>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a25      	ldr	r2, [pc, #148]	; (80045cc <TIM_Base_SetConfig+0x134>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d007      	beq.n	800454a <TIM_Base_SetConfig+0xb2>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a24      	ldr	r2, [pc, #144]	; (80045d0 <TIM_Base_SetConfig+0x138>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d003      	beq.n	800454a <TIM_Base_SetConfig+0xb2>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a23      	ldr	r2, [pc, #140]	; (80045d4 <TIM_Base_SetConfig+0x13c>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d108      	bne.n	800455c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004550:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	4313      	orrs	r3, r2
 800455a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	4313      	orrs	r3, r2
 8004568:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	689a      	ldr	r2, [r3, #8]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a0a      	ldr	r2, [pc, #40]	; (80045ac <TIM_Base_SetConfig+0x114>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d003      	beq.n	8004590 <TIM_Base_SetConfig+0xf8>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a0c      	ldr	r2, [pc, #48]	; (80045bc <TIM_Base_SetConfig+0x124>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d103      	bne.n	8004598 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	691a      	ldr	r2, [r3, #16]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	615a      	str	r2, [r3, #20]
}
 800459e:	bf00      	nop
 80045a0:	3714      	adds	r7, #20
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	40010000 	.word	0x40010000
 80045b0:	40000400 	.word	0x40000400
 80045b4:	40000800 	.word	0x40000800
 80045b8:	40000c00 	.word	0x40000c00
 80045bc:	40010400 	.word	0x40010400
 80045c0:	40014000 	.word	0x40014000
 80045c4:	40014400 	.word	0x40014400
 80045c8:	40014800 	.word	0x40014800
 80045cc:	40001800 	.word	0x40001800
 80045d0:	40001c00 	.word	0x40001c00
 80045d4:	40002000 	.word	0x40002000

080045d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045d8:	b480      	push	{r7}
 80045da:	b087      	sub	sp, #28
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	f023 0201 	bic.w	r2, r3, #1
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a1b      	ldr	r3, [r3, #32]
 80045f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004606:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f023 0303 	bic.w	r3, r3, #3
 800460e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	4313      	orrs	r3, r2
 8004618:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	f023 0302 	bic.w	r3, r3, #2
 8004620:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	697a      	ldr	r2, [r7, #20]
 8004628:	4313      	orrs	r3, r2
 800462a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a20      	ldr	r2, [pc, #128]	; (80046b0 <TIM_OC1_SetConfig+0xd8>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d003      	beq.n	800463c <TIM_OC1_SetConfig+0x64>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a1f      	ldr	r2, [pc, #124]	; (80046b4 <TIM_OC1_SetConfig+0xdc>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d10c      	bne.n	8004656 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	f023 0308 	bic.w	r3, r3, #8
 8004642:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	697a      	ldr	r2, [r7, #20]
 800464a:	4313      	orrs	r3, r2
 800464c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	f023 0304 	bic.w	r3, r3, #4
 8004654:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a15      	ldr	r2, [pc, #84]	; (80046b0 <TIM_OC1_SetConfig+0xd8>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d003      	beq.n	8004666 <TIM_OC1_SetConfig+0x8e>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a14      	ldr	r2, [pc, #80]	; (80046b4 <TIM_OC1_SetConfig+0xdc>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d111      	bne.n	800468a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800466c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004674:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	4313      	orrs	r3, r2
 800467e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	699b      	ldr	r3, [r3, #24]
 8004684:	693a      	ldr	r2, [r7, #16]
 8004686:	4313      	orrs	r3, r2
 8004688:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	685a      	ldr	r2, [r3, #4]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	697a      	ldr	r2, [r7, #20]
 80046a2:	621a      	str	r2, [r3, #32]
}
 80046a4:	bf00      	nop
 80046a6:	371c      	adds	r7, #28
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr
 80046b0:	40010000 	.word	0x40010000
 80046b4:	40010400 	.word	0x40010400

080046b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b087      	sub	sp, #28
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a1b      	ldr	r3, [r3, #32]
 80046c6:	f023 0210 	bic.w	r2, r3, #16
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	021b      	lsls	r3, r3, #8
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	f023 0320 	bic.w	r3, r3, #32
 8004702:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	011b      	lsls	r3, r3, #4
 800470a:	697a      	ldr	r2, [r7, #20]
 800470c:	4313      	orrs	r3, r2
 800470e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a22      	ldr	r2, [pc, #136]	; (800479c <TIM_OC2_SetConfig+0xe4>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d003      	beq.n	8004720 <TIM_OC2_SetConfig+0x68>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a21      	ldr	r2, [pc, #132]	; (80047a0 <TIM_OC2_SetConfig+0xe8>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d10d      	bne.n	800473c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004726:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	011b      	lsls	r3, r3, #4
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	4313      	orrs	r3, r2
 8004732:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800473a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a17      	ldr	r2, [pc, #92]	; (800479c <TIM_OC2_SetConfig+0xe4>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d003      	beq.n	800474c <TIM_OC2_SetConfig+0x94>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a16      	ldr	r2, [pc, #88]	; (80047a0 <TIM_OC2_SetConfig+0xe8>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d113      	bne.n	8004774 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004752:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800475a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	695b      	ldr	r3, [r3, #20]
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	693a      	ldr	r2, [r7, #16]
 8004764:	4313      	orrs	r3, r2
 8004766:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	699b      	ldr	r3, [r3, #24]
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	693a      	ldr	r2, [r7, #16]
 8004770:	4313      	orrs	r3, r2
 8004772:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	693a      	ldr	r2, [r7, #16]
 8004778:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	685a      	ldr	r2, [r3, #4]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	697a      	ldr	r2, [r7, #20]
 800478c:	621a      	str	r2, [r3, #32]
}
 800478e:	bf00      	nop
 8004790:	371c      	adds	r7, #28
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	40010000 	.word	0x40010000
 80047a0:	40010400 	.word	0x40010400

080047a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b087      	sub	sp, #28
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a1b      	ldr	r3, [r3, #32]
 80047be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	69db      	ldr	r3, [r3, #28]
 80047ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f023 0303 	bic.w	r3, r3, #3
 80047da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	021b      	lsls	r3, r3, #8
 80047f4:	697a      	ldr	r2, [r7, #20]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a21      	ldr	r2, [pc, #132]	; (8004884 <TIM_OC3_SetConfig+0xe0>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d003      	beq.n	800480a <TIM_OC3_SetConfig+0x66>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a20      	ldr	r2, [pc, #128]	; (8004888 <TIM_OC3_SetConfig+0xe4>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d10d      	bne.n	8004826 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004810:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	021b      	lsls	r3, r3, #8
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	4313      	orrs	r3, r2
 800481c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004824:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a16      	ldr	r2, [pc, #88]	; (8004884 <TIM_OC3_SetConfig+0xe0>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d003      	beq.n	8004836 <TIM_OC3_SetConfig+0x92>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a15      	ldr	r2, [pc, #84]	; (8004888 <TIM_OC3_SetConfig+0xe4>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d113      	bne.n	800485e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800483c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004844:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	011b      	lsls	r3, r3, #4
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	4313      	orrs	r3, r2
 8004850:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	699b      	ldr	r3, [r3, #24]
 8004856:	011b      	lsls	r3, r3, #4
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	4313      	orrs	r3, r2
 800485c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	685a      	ldr	r2, [r3, #4]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	697a      	ldr	r2, [r7, #20]
 8004876:	621a      	str	r2, [r3, #32]
}
 8004878:	bf00      	nop
 800487a:	371c      	adds	r7, #28
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr
 8004884:	40010000 	.word	0x40010000
 8004888:	40010400 	.word	0x40010400

0800488c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800488c:	b480      	push	{r7}
 800488e:	b087      	sub	sp, #28
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	69db      	ldr	r3, [r3, #28]
 80048b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	021b      	lsls	r3, r3, #8
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	031b      	lsls	r3, r3, #12
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a12      	ldr	r2, [pc, #72]	; (8004930 <TIM_OC4_SetConfig+0xa4>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d003      	beq.n	80048f4 <TIM_OC4_SetConfig+0x68>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a11      	ldr	r2, [pc, #68]	; (8004934 <TIM_OC4_SetConfig+0xa8>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d109      	bne.n	8004908 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	695b      	ldr	r3, [r3, #20]
 8004900:	019b      	lsls	r3, r3, #6
 8004902:	697a      	ldr	r2, [r7, #20]
 8004904:	4313      	orrs	r3, r2
 8004906:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	685a      	ldr	r2, [r3, #4]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	621a      	str	r2, [r3, #32]
}
 8004922:	bf00      	nop
 8004924:	371c      	adds	r7, #28
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	40010000 	.word	0x40010000
 8004934:	40010400 	.word	0x40010400

08004938 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004938:	b480      	push	{r7}
 800493a:	b087      	sub	sp, #28
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6a1b      	ldr	r3, [r3, #32]
 8004948:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6a1b      	ldr	r3, [r3, #32]
 800494e:	f023 0201 	bic.w	r2, r3, #1
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004962:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	011b      	lsls	r3, r3, #4
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	4313      	orrs	r3, r2
 800496c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	f023 030a 	bic.w	r3, r3, #10
 8004974:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004976:	697a      	ldr	r2, [r7, #20]
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	4313      	orrs	r3, r2
 800497c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	697a      	ldr	r2, [r7, #20]
 8004988:	621a      	str	r2, [r3, #32]
}
 800498a:	bf00      	nop
 800498c:	371c      	adds	r7, #28
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004996:	b480      	push	{r7}
 8004998:	b087      	sub	sp, #28
 800499a:	af00      	add	r7, sp, #0
 800499c:	60f8      	str	r0, [r7, #12]
 800499e:	60b9      	str	r1, [r7, #8]
 80049a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	f023 0210 	bic.w	r2, r3, #16
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6a1b      	ldr	r3, [r3, #32]
 80049b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	031b      	lsls	r3, r3, #12
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80049d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	011b      	lsls	r3, r3, #4
 80049d8:	693a      	ldr	r2, [r7, #16]
 80049da:	4313      	orrs	r3, r2
 80049dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	697a      	ldr	r2, [r7, #20]
 80049e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	693a      	ldr	r2, [r7, #16]
 80049e8:	621a      	str	r2, [r3, #32]
}
 80049ea:	bf00      	nop
 80049ec:	371c      	adds	r7, #28
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr

080049f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049f6:	b480      	push	{r7}
 80049f8:	b085      	sub	sp, #20
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
 80049fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a0e:	683a      	ldr	r2, [r7, #0]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	f043 0307 	orr.w	r3, r3, #7
 8004a18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	609a      	str	r2, [r3, #8]
}
 8004a20:	bf00      	nop
 8004a22:	3714      	adds	r7, #20
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b087      	sub	sp, #28
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
 8004a38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	021a      	lsls	r2, r3, #8
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	431a      	orrs	r2, r3
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	697a      	ldr	r2, [r7, #20]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	697a      	ldr	r2, [r7, #20]
 8004a5e:	609a      	str	r2, [r3, #8]
}
 8004a60:	bf00      	nop
 8004a62:	371c      	adds	r7, #28
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b087      	sub	sp, #28
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	f003 031f 	and.w	r3, r3, #31
 8004a7e:	2201      	movs	r2, #1
 8004a80:	fa02 f303 	lsl.w	r3, r2, r3
 8004a84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6a1a      	ldr	r2, [r3, #32]
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	43db      	mvns	r3, r3
 8004a8e:	401a      	ands	r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6a1a      	ldr	r2, [r3, #32]
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	f003 031f 	and.w	r3, r3, #31
 8004a9e:	6879      	ldr	r1, [r7, #4]
 8004aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8004aa4:	431a      	orrs	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	621a      	str	r2, [r3, #32]
}
 8004aaa:	bf00      	nop
 8004aac:	371c      	adds	r7, #28
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
	...

08004ab8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b085      	sub	sp, #20
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d101      	bne.n	8004ad0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004acc:	2302      	movs	r3, #2
 8004ace:	e05a      	b.n	8004b86 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2202      	movs	r2, #2
 8004adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004af6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a21      	ldr	r2, [pc, #132]	; (8004b94 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d022      	beq.n	8004b5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b1c:	d01d      	beq.n	8004b5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a1d      	ldr	r2, [pc, #116]	; (8004b98 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d018      	beq.n	8004b5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a1b      	ldr	r2, [pc, #108]	; (8004b9c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d013      	beq.n	8004b5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a1a      	ldr	r2, [pc, #104]	; (8004ba0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d00e      	beq.n	8004b5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a18      	ldr	r2, [pc, #96]	; (8004ba4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d009      	beq.n	8004b5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a17      	ldr	r2, [pc, #92]	; (8004ba8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d004      	beq.n	8004b5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a15      	ldr	r2, [pc, #84]	; (8004bac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d10c      	bne.n	8004b74 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	68ba      	ldr	r2, [r7, #8]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68ba      	ldr	r2, [r7, #8]
 8004b72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3714      	adds	r7, #20
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	40010000 	.word	0x40010000
 8004b98:	40000400 	.word	0x40000400
 8004b9c:	40000800 	.word	0x40000800
 8004ba0:	40000c00 	.word	0x40000c00
 8004ba4:	40010400 	.word	0x40010400
 8004ba8:	40014000 	.word	0x40014000
 8004bac:	40001800 	.word	0x40001800

08004bb0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d101      	bne.n	8004bcc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004bc8:	2302      	movs	r3, #2
 8004bca:	e03d      	b.n	8004c48 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	695b      	ldr	r3, [r3, #20]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	69db      	ldr	r3, [r3, #28]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3714      	adds	r7, #20
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e03f      	b.n	8004d0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d106      	bne.n	8004ca8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f7fd fae2 	bl	800226c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2224      	movs	r2, #36	; 0x24
 8004cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68da      	ldr	r2, [r3, #12]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 fd7b 	bl	80057bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	691a      	ldr	r2, [r3, #16]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	695a      	ldr	r2, [r3, #20]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ce4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68da      	ldr	r2, [r3, #12]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cf4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2220      	movs	r2, #32
 8004d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2220      	movs	r2, #32
 8004d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3708      	adds	r7, #8
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}

08004d16 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b08a      	sub	sp, #40	; 0x28
 8004d1a:	af02      	add	r7, sp, #8
 8004d1c:	60f8      	str	r0, [r7, #12]
 8004d1e:	60b9      	str	r1, [r7, #8]
 8004d20:	603b      	str	r3, [r7, #0]
 8004d22:	4613      	mov	r3, r2
 8004d24:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d26:	2300      	movs	r3, #0
 8004d28:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b20      	cmp	r3, #32
 8004d34:	d17c      	bne.n	8004e30 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d002      	beq.n	8004d42 <HAL_UART_Transmit+0x2c>
 8004d3c:	88fb      	ldrh	r3, [r7, #6]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e075      	b.n	8004e32 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d101      	bne.n	8004d54 <HAL_UART_Transmit+0x3e>
 8004d50:	2302      	movs	r3, #2
 8004d52:	e06e      	b.n	8004e32 <HAL_UART_Transmit+0x11c>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2221      	movs	r2, #33	; 0x21
 8004d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d6a:	f7fd fc57 	bl	800261c <HAL_GetTick>
 8004d6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	88fa      	ldrh	r2, [r7, #6]
 8004d74:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	88fa      	ldrh	r2, [r7, #6]
 8004d7a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d84:	d108      	bne.n	8004d98 <HAL_UART_Transmit+0x82>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d104      	bne.n	8004d98 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	61bb      	str	r3, [r7, #24]
 8004d96:	e003      	b.n	8004da0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004da8:	e02a      	b.n	8004e00 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	9300      	str	r3, [sp, #0]
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	2200      	movs	r2, #0
 8004db2:	2180      	movs	r1, #128	; 0x80
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	f000 faf9 	bl	80053ac <UART_WaitOnFlagUntilTimeout>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d001      	beq.n	8004dc4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e036      	b.n	8004e32 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10b      	bne.n	8004de2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	881b      	ldrh	r3, [r3, #0]
 8004dce:	461a      	mov	r2, r3
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dd8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	3302      	adds	r3, #2
 8004dde:	61bb      	str	r3, [r7, #24]
 8004de0:	e007      	b.n	8004df2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	781a      	ldrb	r2, [r3, #0]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	3301      	adds	r3, #1
 8004df0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	b29a      	uxth	r2, r3
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1cf      	bne.n	8004daa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	9300      	str	r3, [sp, #0]
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	2200      	movs	r2, #0
 8004e12:	2140      	movs	r1, #64	; 0x40
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	f000 fac9 	bl	80053ac <UART_WaitOnFlagUntilTimeout>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d001      	beq.n	8004e24 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e006      	b.n	8004e32 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2220      	movs	r2, #32
 8004e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	e000      	b.n	8004e32 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004e30:	2302      	movs	r3, #2
  }
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3720      	adds	r7, #32
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
	...

08004e3c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b0ba      	sub	sp, #232	; 0xe8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004e62:	2300      	movs	r3, #0
 8004e64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e72:	f003 030f 	and.w	r3, r3, #15
 8004e76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004e7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d10f      	bne.n	8004ea2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e86:	f003 0320 	and.w	r3, r3, #32
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d009      	beq.n	8004ea2 <HAL_UART_IRQHandler+0x66>
 8004e8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e92:	f003 0320 	and.w	r3, r3, #32
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d003      	beq.n	8004ea2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 fbd3 	bl	8005646 <UART_Receive_IT>
      return;
 8004ea0:	e256      	b.n	8005350 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004ea2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	f000 80de 	beq.w	8005068 <HAL_UART_IRQHandler+0x22c>
 8004eac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004eb0:	f003 0301 	and.w	r3, r3, #1
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d106      	bne.n	8004ec6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004eb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ebc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	f000 80d1 	beq.w	8005068 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eca:	f003 0301 	and.w	r3, r3, #1
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00b      	beq.n	8004eea <HAL_UART_IRQHandler+0xae>
 8004ed2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d005      	beq.n	8004eea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee2:	f043 0201 	orr.w	r2, r3, #1
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eee:	f003 0304 	and.w	r3, r3, #4
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00b      	beq.n	8004f0e <HAL_UART_IRQHandler+0xd2>
 8004ef6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004efa:	f003 0301 	and.w	r3, r3, #1
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d005      	beq.n	8004f0e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f06:	f043 0202 	orr.w	r2, r3, #2
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f12:	f003 0302 	and.w	r3, r3, #2
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00b      	beq.n	8004f32 <HAL_UART_IRQHandler+0xf6>
 8004f1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f1e:	f003 0301 	and.w	r3, r3, #1
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d005      	beq.n	8004f32 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2a:	f043 0204 	orr.w	r2, r3, #4
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f36:	f003 0308 	and.w	r3, r3, #8
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d011      	beq.n	8004f62 <HAL_UART_IRQHandler+0x126>
 8004f3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f42:	f003 0320 	and.w	r3, r3, #32
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d105      	bne.n	8004f56 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004f4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f4e:	f003 0301 	and.w	r3, r3, #1
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d005      	beq.n	8004f62 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5a:	f043 0208 	orr.w	r2, r3, #8
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	f000 81ed 	beq.w	8005346 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f70:	f003 0320 	and.w	r3, r3, #32
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d008      	beq.n	8004f8a <HAL_UART_IRQHandler+0x14e>
 8004f78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f7c:	f003 0320 	and.w	r3, r3, #32
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d002      	beq.n	8004f8a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f000 fb5e 	bl	8005646 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	695b      	ldr	r3, [r3, #20]
 8004f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f94:	2b40      	cmp	r3, #64	; 0x40
 8004f96:	bf0c      	ite	eq
 8004f98:	2301      	moveq	r3, #1
 8004f9a:	2300      	movne	r3, #0
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa6:	f003 0308 	and.w	r3, r3, #8
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d103      	bne.n	8004fb6 <HAL_UART_IRQHandler+0x17a>
 8004fae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d04f      	beq.n	8005056 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 fa66 	bl	8005488 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc6:	2b40      	cmp	r3, #64	; 0x40
 8004fc8:	d141      	bne.n	800504e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	3314      	adds	r3, #20
 8004fd0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004fd8:	e853 3f00 	ldrex	r3, [r3]
 8004fdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004fe0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004fe4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fe8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	3314      	adds	r3, #20
 8004ff2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004ff6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004ffa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ffe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005002:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005006:	e841 2300 	strex	r3, r2, [r1]
 800500a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800500e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1d9      	bne.n	8004fca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501a:	2b00      	cmp	r3, #0
 800501c:	d013      	beq.n	8005046 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005022:	4a7d      	ldr	r2, [pc, #500]	; (8005218 <HAL_UART_IRQHandler+0x3dc>)
 8005024:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502a:	4618      	mov	r0, r3
 800502c:	f7fd fca7 	bl	800297e <HAL_DMA_Abort_IT>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d016      	beq.n	8005064 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005040:	4610      	mov	r0, r2
 8005042:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005044:	e00e      	b.n	8005064 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 f99a 	bl	8005380 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800504c:	e00a      	b.n	8005064 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 f996 	bl	8005380 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005054:	e006      	b.n	8005064 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 f992 	bl	8005380 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005062:	e170      	b.n	8005346 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005064:	bf00      	nop
    return;
 8005066:	e16e      	b.n	8005346 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800506c:	2b01      	cmp	r3, #1
 800506e:	f040 814a 	bne.w	8005306 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005076:	f003 0310 	and.w	r3, r3, #16
 800507a:	2b00      	cmp	r3, #0
 800507c:	f000 8143 	beq.w	8005306 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005084:	f003 0310 	and.w	r3, r3, #16
 8005088:	2b00      	cmp	r3, #0
 800508a:	f000 813c 	beq.w	8005306 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800508e:	2300      	movs	r3, #0
 8005090:	60bb      	str	r3, [r7, #8]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	60bb      	str	r3, [r7, #8]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	60bb      	str	r3, [r7, #8]
 80050a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ae:	2b40      	cmp	r3, #64	; 0x40
 80050b0:	f040 80b4 	bne.w	800521c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80050c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	f000 8140 	beq.w	800534a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80050ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80050d2:	429a      	cmp	r2, r3
 80050d4:	f080 8139 	bcs.w	800534a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80050de:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e4:	69db      	ldr	r3, [r3, #28]
 80050e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050ea:	f000 8088 	beq.w	80051fe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	330c      	adds	r3, #12
 80050f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80050fc:	e853 3f00 	ldrex	r3, [r3]
 8005100:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005104:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005108:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800510c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	330c      	adds	r3, #12
 8005116:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800511a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800511e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005122:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005126:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800512a:	e841 2300 	strex	r3, r2, [r1]
 800512e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005132:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1d9      	bne.n	80050ee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	3314      	adds	r3, #20
 8005140:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005142:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005144:	e853 3f00 	ldrex	r3, [r3]
 8005148:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800514a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800514c:	f023 0301 	bic.w	r3, r3, #1
 8005150:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	3314      	adds	r3, #20
 800515a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800515e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005162:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005164:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005166:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800516a:	e841 2300 	strex	r3, r2, [r1]
 800516e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005170:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1e1      	bne.n	800513a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	3314      	adds	r3, #20
 800517c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800517e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005180:	e853 3f00 	ldrex	r3, [r3]
 8005184:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005186:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005188:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800518c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	3314      	adds	r3, #20
 8005196:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800519a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800519c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800519e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80051a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80051a2:	e841 2300 	strex	r3, r2, [r1]
 80051a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80051a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1e3      	bne.n	8005176 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2220      	movs	r2, #32
 80051b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	330c      	adds	r3, #12
 80051c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051c6:	e853 3f00 	ldrex	r3, [r3]
 80051ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80051cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051ce:	f023 0310 	bic.w	r3, r3, #16
 80051d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	330c      	adds	r3, #12
 80051dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80051e0:	65ba      	str	r2, [r7, #88]	; 0x58
 80051e2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80051e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80051e8:	e841 2300 	strex	r3, r2, [r1]
 80051ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80051ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d1e3      	bne.n	80051bc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f8:	4618      	mov	r0, r3
 80051fa:	f7fd fb50 	bl	800289e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005206:	b29b      	uxth	r3, r3
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	b29b      	uxth	r3, r3
 800520c:	4619      	mov	r1, r3
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 f8c0 	bl	8005394 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005214:	e099      	b.n	800534a <HAL_UART_IRQHandler+0x50e>
 8005216:	bf00      	nop
 8005218:	0800554f 	.word	0x0800554f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005224:	b29b      	uxth	r3, r3
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005230:	b29b      	uxth	r3, r3
 8005232:	2b00      	cmp	r3, #0
 8005234:	f000 808b 	beq.w	800534e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005238:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800523c:	2b00      	cmp	r3, #0
 800523e:	f000 8086 	beq.w	800534e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	330c      	adds	r3, #12
 8005248:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800524a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800524c:	e853 3f00 	ldrex	r3, [r3]
 8005250:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005254:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005258:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	330c      	adds	r3, #12
 8005262:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005266:	647a      	str	r2, [r7, #68]	; 0x44
 8005268:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800526c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800526e:	e841 2300 	strex	r3, r2, [r1]
 8005272:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1e3      	bne.n	8005242 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	3314      	adds	r3, #20
 8005280:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005284:	e853 3f00 	ldrex	r3, [r3]
 8005288:	623b      	str	r3, [r7, #32]
   return(result);
 800528a:	6a3b      	ldr	r3, [r7, #32]
 800528c:	f023 0301 	bic.w	r3, r3, #1
 8005290:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	3314      	adds	r3, #20
 800529a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800529e:	633a      	str	r2, [r7, #48]	; 0x30
 80052a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80052a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052a6:	e841 2300 	strex	r3, r2, [r1]
 80052aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80052ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1e3      	bne.n	800527a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2220      	movs	r2, #32
 80052b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	330c      	adds	r3, #12
 80052c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	e853 3f00 	ldrex	r3, [r3]
 80052ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f023 0310 	bic.w	r3, r3, #16
 80052d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	330c      	adds	r3, #12
 80052e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80052e4:	61fa      	str	r2, [r7, #28]
 80052e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e8:	69b9      	ldr	r1, [r7, #24]
 80052ea:	69fa      	ldr	r2, [r7, #28]
 80052ec:	e841 2300 	strex	r3, r2, [r1]
 80052f0:	617b      	str	r3, [r7, #20]
   return(result);
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d1e3      	bne.n	80052c0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80052f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80052fc:	4619      	mov	r1, r3
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 f848 	bl	8005394 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005304:	e023      	b.n	800534e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800530a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800530e:	2b00      	cmp	r3, #0
 8005310:	d009      	beq.n	8005326 <HAL_UART_IRQHandler+0x4ea>
 8005312:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800531a:	2b00      	cmp	r3, #0
 800531c:	d003      	beq.n	8005326 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 f929 	bl	8005576 <UART_Transmit_IT>
    return;
 8005324:	e014      	b.n	8005350 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800532a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00e      	beq.n	8005350 <HAL_UART_IRQHandler+0x514>
 8005332:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800533a:	2b00      	cmp	r3, #0
 800533c:	d008      	beq.n	8005350 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 f969 	bl	8005616 <UART_EndTransmit_IT>
    return;
 8005344:	e004      	b.n	8005350 <HAL_UART_IRQHandler+0x514>
    return;
 8005346:	bf00      	nop
 8005348:	e002      	b.n	8005350 <HAL_UART_IRQHandler+0x514>
      return;
 800534a:	bf00      	nop
 800534c:	e000      	b.n	8005350 <HAL_UART_IRQHandler+0x514>
      return;
 800534e:	bf00      	nop
  }
}
 8005350:	37e8      	adds	r7, #232	; 0xe8
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop

08005358 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005360:	bf00      	nop
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005374:	bf00      	nop
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	460b      	mov	r3, r1
 800539e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b090      	sub	sp, #64	; 0x40
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	603b      	str	r3, [r7, #0]
 80053b8:	4613      	mov	r3, r2
 80053ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053bc:	e050      	b.n	8005460 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c4:	d04c      	beq.n	8005460 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80053c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d007      	beq.n	80053dc <UART_WaitOnFlagUntilTimeout+0x30>
 80053cc:	f7fd f926 	bl	800261c <HAL_GetTick>
 80053d0:	4602      	mov	r2, r0
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053d8:	429a      	cmp	r2, r3
 80053da:	d241      	bcs.n	8005460 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	330c      	adds	r3, #12
 80053e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e6:	e853 3f00 	ldrex	r3, [r3]
 80053ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80053f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	330c      	adds	r3, #12
 80053fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80053fc:	637a      	str	r2, [r7, #52]	; 0x34
 80053fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005400:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005402:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005404:	e841 2300 	strex	r3, r2, [r1]
 8005408:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800540a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800540c:	2b00      	cmp	r3, #0
 800540e:	d1e5      	bne.n	80053dc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	3314      	adds	r3, #20
 8005416:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	e853 3f00 	ldrex	r3, [r3]
 800541e:	613b      	str	r3, [r7, #16]
   return(result);
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	f023 0301 	bic.w	r3, r3, #1
 8005426:	63bb      	str	r3, [r7, #56]	; 0x38
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	3314      	adds	r3, #20
 800542e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005430:	623a      	str	r2, [r7, #32]
 8005432:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005434:	69f9      	ldr	r1, [r7, #28]
 8005436:	6a3a      	ldr	r2, [r7, #32]
 8005438:	e841 2300 	strex	r3, r2, [r1]
 800543c:	61bb      	str	r3, [r7, #24]
   return(result);
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d1e5      	bne.n	8005410 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2220      	movs	r2, #32
 8005448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2220      	movs	r2, #32
 8005450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e00f      	b.n	8005480 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	4013      	ands	r3, r2
 800546a:	68ba      	ldr	r2, [r7, #8]
 800546c:	429a      	cmp	r2, r3
 800546e:	bf0c      	ite	eq
 8005470:	2301      	moveq	r3, #1
 8005472:	2300      	movne	r3, #0
 8005474:	b2db      	uxtb	r3, r3
 8005476:	461a      	mov	r2, r3
 8005478:	79fb      	ldrb	r3, [r7, #7]
 800547a:	429a      	cmp	r2, r3
 800547c:	d09f      	beq.n	80053be <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3740      	adds	r7, #64	; 0x40
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005488:	b480      	push	{r7}
 800548a:	b095      	sub	sp, #84	; 0x54
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	330c      	adds	r3, #12
 8005496:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800549a:	e853 3f00 	ldrex	r3, [r3]
 800549e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80054a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	330c      	adds	r3, #12
 80054ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80054b0:	643a      	str	r2, [r7, #64]	; 0x40
 80054b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80054b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054b8:	e841 2300 	strex	r3, r2, [r1]
 80054bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1e5      	bne.n	8005490 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	3314      	adds	r3, #20
 80054ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054cc:	6a3b      	ldr	r3, [r7, #32]
 80054ce:	e853 3f00 	ldrex	r3, [r3]
 80054d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	f023 0301 	bic.w	r3, r3, #1
 80054da:	64bb      	str	r3, [r7, #72]	; 0x48
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	3314      	adds	r3, #20
 80054e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054ec:	e841 2300 	strex	r3, r2, [r1]
 80054f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d1e5      	bne.n	80054c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d119      	bne.n	8005534 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	330c      	adds	r3, #12
 8005506:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	e853 3f00 	ldrex	r3, [r3]
 800550e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	f023 0310 	bic.w	r3, r3, #16
 8005516:	647b      	str	r3, [r7, #68]	; 0x44
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	330c      	adds	r3, #12
 800551e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005520:	61ba      	str	r2, [r7, #24]
 8005522:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005524:	6979      	ldr	r1, [r7, #20]
 8005526:	69ba      	ldr	r2, [r7, #24]
 8005528:	e841 2300 	strex	r3, r2, [r1]
 800552c:	613b      	str	r3, [r7, #16]
   return(result);
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d1e5      	bne.n	8005500 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2220      	movs	r2, #32
 8005538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005542:	bf00      	nop
 8005544:	3754      	adds	r7, #84	; 0x54
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr

0800554e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800554e:	b580      	push	{r7, lr}
 8005550:	b084      	sub	sp, #16
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800555a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2200      	movs	r2, #0
 8005566:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	f7ff ff09 	bl	8005380 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800556e:	bf00      	nop
 8005570:	3710      	adds	r7, #16
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}

08005576 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005576:	b480      	push	{r7}
 8005578:	b085      	sub	sp, #20
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2b21      	cmp	r3, #33	; 0x21
 8005588:	d13e      	bne.n	8005608 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005592:	d114      	bne.n	80055be <UART_Transmit_IT+0x48>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d110      	bne.n	80055be <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a1b      	ldr	r3, [r3, #32]
 80055a0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	881b      	ldrh	r3, [r3, #0]
 80055a6:	461a      	mov	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055b0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a1b      	ldr	r3, [r3, #32]
 80055b6:	1c9a      	adds	r2, r3, #2
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	621a      	str	r2, [r3, #32]
 80055bc:	e008      	b.n	80055d0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a1b      	ldr	r3, [r3, #32]
 80055c2:	1c59      	adds	r1, r3, #1
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	6211      	str	r1, [r2, #32]
 80055c8:	781a      	ldrb	r2, [r3, #0]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	3b01      	subs	r3, #1
 80055d8:	b29b      	uxth	r3, r3
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	4619      	mov	r1, r3
 80055de:	84d1      	strh	r1, [r2, #38]	; 0x26
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d10f      	bne.n	8005604 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68da      	ldr	r2, [r3, #12]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055f2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68da      	ldr	r2, [r3, #12]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005602:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005604:	2300      	movs	r3, #0
 8005606:	e000      	b.n	800560a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005608:	2302      	movs	r3, #2
  }
}
 800560a:	4618      	mov	r0, r3
 800560c:	3714      	adds	r7, #20
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr

08005616 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005616:	b580      	push	{r7, lr}
 8005618:	b082      	sub	sp, #8
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68da      	ldr	r2, [r3, #12]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800562c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2220      	movs	r2, #32
 8005632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f7ff fe8e 	bl	8005358 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800563c:	2300      	movs	r3, #0
}
 800563e:	4618      	mov	r0, r3
 8005640:	3708      	adds	r7, #8
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}

08005646 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005646:	b580      	push	{r7, lr}
 8005648:	b08c      	sub	sp, #48	; 0x30
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005654:	b2db      	uxtb	r3, r3
 8005656:	2b22      	cmp	r3, #34	; 0x22
 8005658:	f040 80ab 	bne.w	80057b2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005664:	d117      	bne.n	8005696 <UART_Receive_IT+0x50>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d113      	bne.n	8005696 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800566e:	2300      	movs	r3, #0
 8005670:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005676:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	b29b      	uxth	r3, r3
 8005680:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005684:	b29a      	uxth	r2, r3
 8005686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005688:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800568e:	1c9a      	adds	r2, r3, #2
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	629a      	str	r2, [r3, #40]	; 0x28
 8005694:	e026      	b.n	80056e4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800569a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800569c:	2300      	movs	r3, #0
 800569e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056a8:	d007      	beq.n	80056ba <UART_Receive_IT+0x74>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d10a      	bne.n	80056c8 <UART_Receive_IT+0x82>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d106      	bne.n	80056c8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	b2da      	uxtb	r2, r3
 80056c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c4:	701a      	strb	r2, [r3, #0]
 80056c6:	e008      	b.n	80056da <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056d4:	b2da      	uxtb	r2, r3
 80056d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056de:	1c5a      	adds	r2, r3, #1
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	3b01      	subs	r3, #1
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	4619      	mov	r1, r3
 80056f2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d15a      	bne.n	80057ae <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68da      	ldr	r2, [r3, #12]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f022 0220 	bic.w	r2, r2, #32
 8005706:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68da      	ldr	r2, [r3, #12]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005716:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	695a      	ldr	r2, [r3, #20]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f022 0201 	bic.w	r2, r2, #1
 8005726:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2220      	movs	r2, #32
 800572c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005734:	2b01      	cmp	r3, #1
 8005736:	d135      	bne.n	80057a4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	330c      	adds	r3, #12
 8005744:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	e853 3f00 	ldrex	r3, [r3]
 800574c:	613b      	str	r3, [r7, #16]
   return(result);
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	f023 0310 	bic.w	r3, r3, #16
 8005754:	627b      	str	r3, [r7, #36]	; 0x24
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	330c      	adds	r3, #12
 800575c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800575e:	623a      	str	r2, [r7, #32]
 8005760:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005762:	69f9      	ldr	r1, [r7, #28]
 8005764:	6a3a      	ldr	r2, [r7, #32]
 8005766:	e841 2300 	strex	r3, r2, [r1]
 800576a:	61bb      	str	r3, [r7, #24]
   return(result);
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1e5      	bne.n	800573e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 0310 	and.w	r3, r3, #16
 800577c:	2b10      	cmp	r3, #16
 800577e:	d10a      	bne.n	8005796 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005780:	2300      	movs	r3, #0
 8005782:	60fb      	str	r3, [r7, #12]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	60fb      	str	r3, [r7, #12]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	60fb      	str	r3, [r7, #12]
 8005794:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800579a:	4619      	mov	r1, r3
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f7ff fdf9 	bl	8005394 <HAL_UARTEx_RxEventCallback>
 80057a2:	e002      	b.n	80057aa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f7ff fde1 	bl	800536c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80057aa:	2300      	movs	r3, #0
 80057ac:	e002      	b.n	80057b4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80057ae:	2300      	movs	r3, #0
 80057b0:	e000      	b.n	80057b4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80057b2:	2302      	movs	r3, #2
  }
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3730      	adds	r7, #48	; 0x30
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057c0:	b0c0      	sub	sp, #256	; 0x100
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80057d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057d8:	68d9      	ldr	r1, [r3, #12]
 80057da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	ea40 0301 	orr.w	r3, r0, r1
 80057e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80057e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057ea:	689a      	ldr	r2, [r3, #8]
 80057ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	431a      	orrs	r2, r3
 80057f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057f8:	695b      	ldr	r3, [r3, #20]
 80057fa:	431a      	orrs	r2, r3
 80057fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005800:	69db      	ldr	r3, [r3, #28]
 8005802:	4313      	orrs	r3, r2
 8005804:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005814:	f021 010c 	bic.w	r1, r1, #12
 8005818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005822:	430b      	orrs	r3, r1
 8005824:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	695b      	ldr	r3, [r3, #20]
 800582e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005836:	6999      	ldr	r1, [r3, #24]
 8005838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	ea40 0301 	orr.w	r3, r0, r1
 8005842:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	4b8f      	ldr	r3, [pc, #572]	; (8005a88 <UART_SetConfig+0x2cc>)
 800584c:	429a      	cmp	r2, r3
 800584e:	d005      	beq.n	800585c <UART_SetConfig+0xa0>
 8005850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	4b8d      	ldr	r3, [pc, #564]	; (8005a8c <UART_SetConfig+0x2d0>)
 8005858:	429a      	cmp	r2, r3
 800585a:	d104      	bne.n	8005866 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800585c:	f7fe f88a 	bl	8003974 <HAL_RCC_GetPCLK2Freq>
 8005860:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005864:	e003      	b.n	800586e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005866:	f7fe f871 	bl	800394c <HAL_RCC_GetPCLK1Freq>
 800586a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800586e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005872:	69db      	ldr	r3, [r3, #28]
 8005874:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005878:	f040 810c 	bne.w	8005a94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800587c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005880:	2200      	movs	r2, #0
 8005882:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005886:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800588a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800588e:	4622      	mov	r2, r4
 8005890:	462b      	mov	r3, r5
 8005892:	1891      	adds	r1, r2, r2
 8005894:	65b9      	str	r1, [r7, #88]	; 0x58
 8005896:	415b      	adcs	r3, r3
 8005898:	65fb      	str	r3, [r7, #92]	; 0x5c
 800589a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800589e:	4621      	mov	r1, r4
 80058a0:	eb12 0801 	adds.w	r8, r2, r1
 80058a4:	4629      	mov	r1, r5
 80058a6:	eb43 0901 	adc.w	r9, r3, r1
 80058aa:	f04f 0200 	mov.w	r2, #0
 80058ae:	f04f 0300 	mov.w	r3, #0
 80058b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80058b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80058ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80058be:	4690      	mov	r8, r2
 80058c0:	4699      	mov	r9, r3
 80058c2:	4623      	mov	r3, r4
 80058c4:	eb18 0303 	adds.w	r3, r8, r3
 80058c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80058cc:	462b      	mov	r3, r5
 80058ce:	eb49 0303 	adc.w	r3, r9, r3
 80058d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80058d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80058e2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80058e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80058ea:	460b      	mov	r3, r1
 80058ec:	18db      	adds	r3, r3, r3
 80058ee:	653b      	str	r3, [r7, #80]	; 0x50
 80058f0:	4613      	mov	r3, r2
 80058f2:	eb42 0303 	adc.w	r3, r2, r3
 80058f6:	657b      	str	r3, [r7, #84]	; 0x54
 80058f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80058fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005900:	f7fa fcb6 	bl	8000270 <__aeabi_uldivmod>
 8005904:	4602      	mov	r2, r0
 8005906:	460b      	mov	r3, r1
 8005908:	4b61      	ldr	r3, [pc, #388]	; (8005a90 <UART_SetConfig+0x2d4>)
 800590a:	fba3 2302 	umull	r2, r3, r3, r2
 800590e:	095b      	lsrs	r3, r3, #5
 8005910:	011c      	lsls	r4, r3, #4
 8005912:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005916:	2200      	movs	r2, #0
 8005918:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800591c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005920:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005924:	4642      	mov	r2, r8
 8005926:	464b      	mov	r3, r9
 8005928:	1891      	adds	r1, r2, r2
 800592a:	64b9      	str	r1, [r7, #72]	; 0x48
 800592c:	415b      	adcs	r3, r3
 800592e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005930:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005934:	4641      	mov	r1, r8
 8005936:	eb12 0a01 	adds.w	sl, r2, r1
 800593a:	4649      	mov	r1, r9
 800593c:	eb43 0b01 	adc.w	fp, r3, r1
 8005940:	f04f 0200 	mov.w	r2, #0
 8005944:	f04f 0300 	mov.w	r3, #0
 8005948:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800594c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005950:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005954:	4692      	mov	sl, r2
 8005956:	469b      	mov	fp, r3
 8005958:	4643      	mov	r3, r8
 800595a:	eb1a 0303 	adds.w	r3, sl, r3
 800595e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005962:	464b      	mov	r3, r9
 8005964:	eb4b 0303 	adc.w	r3, fp, r3
 8005968:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800596c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005978:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800597c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005980:	460b      	mov	r3, r1
 8005982:	18db      	adds	r3, r3, r3
 8005984:	643b      	str	r3, [r7, #64]	; 0x40
 8005986:	4613      	mov	r3, r2
 8005988:	eb42 0303 	adc.w	r3, r2, r3
 800598c:	647b      	str	r3, [r7, #68]	; 0x44
 800598e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005992:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005996:	f7fa fc6b 	bl	8000270 <__aeabi_uldivmod>
 800599a:	4602      	mov	r2, r0
 800599c:	460b      	mov	r3, r1
 800599e:	4611      	mov	r1, r2
 80059a0:	4b3b      	ldr	r3, [pc, #236]	; (8005a90 <UART_SetConfig+0x2d4>)
 80059a2:	fba3 2301 	umull	r2, r3, r3, r1
 80059a6:	095b      	lsrs	r3, r3, #5
 80059a8:	2264      	movs	r2, #100	; 0x64
 80059aa:	fb02 f303 	mul.w	r3, r2, r3
 80059ae:	1acb      	subs	r3, r1, r3
 80059b0:	00db      	lsls	r3, r3, #3
 80059b2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80059b6:	4b36      	ldr	r3, [pc, #216]	; (8005a90 <UART_SetConfig+0x2d4>)
 80059b8:	fba3 2302 	umull	r2, r3, r3, r2
 80059bc:	095b      	lsrs	r3, r3, #5
 80059be:	005b      	lsls	r3, r3, #1
 80059c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80059c4:	441c      	add	r4, r3
 80059c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059ca:	2200      	movs	r2, #0
 80059cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059d0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80059d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80059d8:	4642      	mov	r2, r8
 80059da:	464b      	mov	r3, r9
 80059dc:	1891      	adds	r1, r2, r2
 80059de:	63b9      	str	r1, [r7, #56]	; 0x38
 80059e0:	415b      	adcs	r3, r3
 80059e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80059e8:	4641      	mov	r1, r8
 80059ea:	1851      	adds	r1, r2, r1
 80059ec:	6339      	str	r1, [r7, #48]	; 0x30
 80059ee:	4649      	mov	r1, r9
 80059f0:	414b      	adcs	r3, r1
 80059f2:	637b      	str	r3, [r7, #52]	; 0x34
 80059f4:	f04f 0200 	mov.w	r2, #0
 80059f8:	f04f 0300 	mov.w	r3, #0
 80059fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005a00:	4659      	mov	r1, fp
 8005a02:	00cb      	lsls	r3, r1, #3
 8005a04:	4651      	mov	r1, sl
 8005a06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a0a:	4651      	mov	r1, sl
 8005a0c:	00ca      	lsls	r2, r1, #3
 8005a0e:	4610      	mov	r0, r2
 8005a10:	4619      	mov	r1, r3
 8005a12:	4603      	mov	r3, r0
 8005a14:	4642      	mov	r2, r8
 8005a16:	189b      	adds	r3, r3, r2
 8005a18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a1c:	464b      	mov	r3, r9
 8005a1e:	460a      	mov	r2, r1
 8005a20:	eb42 0303 	adc.w	r3, r2, r3
 8005a24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005a34:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005a38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	18db      	adds	r3, r3, r3
 8005a40:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a42:	4613      	mov	r3, r2
 8005a44:	eb42 0303 	adc.w	r3, r2, r3
 8005a48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005a52:	f7fa fc0d 	bl	8000270 <__aeabi_uldivmod>
 8005a56:	4602      	mov	r2, r0
 8005a58:	460b      	mov	r3, r1
 8005a5a:	4b0d      	ldr	r3, [pc, #52]	; (8005a90 <UART_SetConfig+0x2d4>)
 8005a5c:	fba3 1302 	umull	r1, r3, r3, r2
 8005a60:	095b      	lsrs	r3, r3, #5
 8005a62:	2164      	movs	r1, #100	; 0x64
 8005a64:	fb01 f303 	mul.w	r3, r1, r3
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	00db      	lsls	r3, r3, #3
 8005a6c:	3332      	adds	r3, #50	; 0x32
 8005a6e:	4a08      	ldr	r2, [pc, #32]	; (8005a90 <UART_SetConfig+0x2d4>)
 8005a70:	fba2 2303 	umull	r2, r3, r2, r3
 8005a74:	095b      	lsrs	r3, r3, #5
 8005a76:	f003 0207 	and.w	r2, r3, #7
 8005a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4422      	add	r2, r4
 8005a82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005a84:	e105      	b.n	8005c92 <UART_SetConfig+0x4d6>
 8005a86:	bf00      	nop
 8005a88:	40011000 	.word	0x40011000
 8005a8c:	40011400 	.word	0x40011400
 8005a90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005a9e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005aa2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005aa6:	4642      	mov	r2, r8
 8005aa8:	464b      	mov	r3, r9
 8005aaa:	1891      	adds	r1, r2, r2
 8005aac:	6239      	str	r1, [r7, #32]
 8005aae:	415b      	adcs	r3, r3
 8005ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ab2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ab6:	4641      	mov	r1, r8
 8005ab8:	1854      	adds	r4, r2, r1
 8005aba:	4649      	mov	r1, r9
 8005abc:	eb43 0501 	adc.w	r5, r3, r1
 8005ac0:	f04f 0200 	mov.w	r2, #0
 8005ac4:	f04f 0300 	mov.w	r3, #0
 8005ac8:	00eb      	lsls	r3, r5, #3
 8005aca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ace:	00e2      	lsls	r2, r4, #3
 8005ad0:	4614      	mov	r4, r2
 8005ad2:	461d      	mov	r5, r3
 8005ad4:	4643      	mov	r3, r8
 8005ad6:	18e3      	adds	r3, r4, r3
 8005ad8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005adc:	464b      	mov	r3, r9
 8005ade:	eb45 0303 	adc.w	r3, r5, r3
 8005ae2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005af2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005af6:	f04f 0200 	mov.w	r2, #0
 8005afa:	f04f 0300 	mov.w	r3, #0
 8005afe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005b02:	4629      	mov	r1, r5
 8005b04:	008b      	lsls	r3, r1, #2
 8005b06:	4621      	mov	r1, r4
 8005b08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b0c:	4621      	mov	r1, r4
 8005b0e:	008a      	lsls	r2, r1, #2
 8005b10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005b14:	f7fa fbac 	bl	8000270 <__aeabi_uldivmod>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	4b60      	ldr	r3, [pc, #384]	; (8005ca0 <UART_SetConfig+0x4e4>)
 8005b1e:	fba3 2302 	umull	r2, r3, r3, r2
 8005b22:	095b      	lsrs	r3, r3, #5
 8005b24:	011c      	lsls	r4, r3, #4
 8005b26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005b30:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005b34:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005b38:	4642      	mov	r2, r8
 8005b3a:	464b      	mov	r3, r9
 8005b3c:	1891      	adds	r1, r2, r2
 8005b3e:	61b9      	str	r1, [r7, #24]
 8005b40:	415b      	adcs	r3, r3
 8005b42:	61fb      	str	r3, [r7, #28]
 8005b44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b48:	4641      	mov	r1, r8
 8005b4a:	1851      	adds	r1, r2, r1
 8005b4c:	6139      	str	r1, [r7, #16]
 8005b4e:	4649      	mov	r1, r9
 8005b50:	414b      	adcs	r3, r1
 8005b52:	617b      	str	r3, [r7, #20]
 8005b54:	f04f 0200 	mov.w	r2, #0
 8005b58:	f04f 0300 	mov.w	r3, #0
 8005b5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b60:	4659      	mov	r1, fp
 8005b62:	00cb      	lsls	r3, r1, #3
 8005b64:	4651      	mov	r1, sl
 8005b66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b6a:	4651      	mov	r1, sl
 8005b6c:	00ca      	lsls	r2, r1, #3
 8005b6e:	4610      	mov	r0, r2
 8005b70:	4619      	mov	r1, r3
 8005b72:	4603      	mov	r3, r0
 8005b74:	4642      	mov	r2, r8
 8005b76:	189b      	adds	r3, r3, r2
 8005b78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005b7c:	464b      	mov	r3, r9
 8005b7e:	460a      	mov	r2, r1
 8005b80:	eb42 0303 	adc.w	r3, r2, r3
 8005b84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	67bb      	str	r3, [r7, #120]	; 0x78
 8005b92:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005b94:	f04f 0200 	mov.w	r2, #0
 8005b98:	f04f 0300 	mov.w	r3, #0
 8005b9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005ba0:	4649      	mov	r1, r9
 8005ba2:	008b      	lsls	r3, r1, #2
 8005ba4:	4641      	mov	r1, r8
 8005ba6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005baa:	4641      	mov	r1, r8
 8005bac:	008a      	lsls	r2, r1, #2
 8005bae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005bb2:	f7fa fb5d 	bl	8000270 <__aeabi_uldivmod>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	460b      	mov	r3, r1
 8005bba:	4b39      	ldr	r3, [pc, #228]	; (8005ca0 <UART_SetConfig+0x4e4>)
 8005bbc:	fba3 1302 	umull	r1, r3, r3, r2
 8005bc0:	095b      	lsrs	r3, r3, #5
 8005bc2:	2164      	movs	r1, #100	; 0x64
 8005bc4:	fb01 f303 	mul.w	r3, r1, r3
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	011b      	lsls	r3, r3, #4
 8005bcc:	3332      	adds	r3, #50	; 0x32
 8005bce:	4a34      	ldr	r2, [pc, #208]	; (8005ca0 <UART_SetConfig+0x4e4>)
 8005bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd4:	095b      	lsrs	r3, r3, #5
 8005bd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bda:	441c      	add	r4, r3
 8005bdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005be0:	2200      	movs	r2, #0
 8005be2:	673b      	str	r3, [r7, #112]	; 0x70
 8005be4:	677a      	str	r2, [r7, #116]	; 0x74
 8005be6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005bea:	4642      	mov	r2, r8
 8005bec:	464b      	mov	r3, r9
 8005bee:	1891      	adds	r1, r2, r2
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	415b      	adcs	r3, r3
 8005bf4:	60fb      	str	r3, [r7, #12]
 8005bf6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005bfa:	4641      	mov	r1, r8
 8005bfc:	1851      	adds	r1, r2, r1
 8005bfe:	6039      	str	r1, [r7, #0]
 8005c00:	4649      	mov	r1, r9
 8005c02:	414b      	adcs	r3, r1
 8005c04:	607b      	str	r3, [r7, #4]
 8005c06:	f04f 0200 	mov.w	r2, #0
 8005c0a:	f04f 0300 	mov.w	r3, #0
 8005c0e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005c12:	4659      	mov	r1, fp
 8005c14:	00cb      	lsls	r3, r1, #3
 8005c16:	4651      	mov	r1, sl
 8005c18:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c1c:	4651      	mov	r1, sl
 8005c1e:	00ca      	lsls	r2, r1, #3
 8005c20:	4610      	mov	r0, r2
 8005c22:	4619      	mov	r1, r3
 8005c24:	4603      	mov	r3, r0
 8005c26:	4642      	mov	r2, r8
 8005c28:	189b      	adds	r3, r3, r2
 8005c2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c2c:	464b      	mov	r3, r9
 8005c2e:	460a      	mov	r2, r1
 8005c30:	eb42 0303 	adc.w	r3, r2, r3
 8005c34:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	663b      	str	r3, [r7, #96]	; 0x60
 8005c40:	667a      	str	r2, [r7, #100]	; 0x64
 8005c42:	f04f 0200 	mov.w	r2, #0
 8005c46:	f04f 0300 	mov.w	r3, #0
 8005c4a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005c4e:	4649      	mov	r1, r9
 8005c50:	008b      	lsls	r3, r1, #2
 8005c52:	4641      	mov	r1, r8
 8005c54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c58:	4641      	mov	r1, r8
 8005c5a:	008a      	lsls	r2, r1, #2
 8005c5c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005c60:	f7fa fb06 	bl	8000270 <__aeabi_uldivmod>
 8005c64:	4602      	mov	r2, r0
 8005c66:	460b      	mov	r3, r1
 8005c68:	4b0d      	ldr	r3, [pc, #52]	; (8005ca0 <UART_SetConfig+0x4e4>)
 8005c6a:	fba3 1302 	umull	r1, r3, r3, r2
 8005c6e:	095b      	lsrs	r3, r3, #5
 8005c70:	2164      	movs	r1, #100	; 0x64
 8005c72:	fb01 f303 	mul.w	r3, r1, r3
 8005c76:	1ad3      	subs	r3, r2, r3
 8005c78:	011b      	lsls	r3, r3, #4
 8005c7a:	3332      	adds	r3, #50	; 0x32
 8005c7c:	4a08      	ldr	r2, [pc, #32]	; (8005ca0 <UART_SetConfig+0x4e4>)
 8005c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c82:	095b      	lsrs	r3, r3, #5
 8005c84:	f003 020f 	and.w	r2, r3, #15
 8005c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4422      	add	r2, r4
 8005c90:	609a      	str	r2, [r3, #8]
}
 8005c92:	bf00      	nop
 8005c94:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c9e:	bf00      	nop
 8005ca0:	51eb851f 	.word	0x51eb851f

08005ca4 <__errno>:
 8005ca4:	4b01      	ldr	r3, [pc, #4]	; (8005cac <__errno+0x8>)
 8005ca6:	6818      	ldr	r0, [r3, #0]
 8005ca8:	4770      	bx	lr
 8005caa:	bf00      	nop
 8005cac:	20000014 	.word	0x20000014

08005cb0 <__libc_init_array>:
 8005cb0:	b570      	push	{r4, r5, r6, lr}
 8005cb2:	4d0d      	ldr	r5, [pc, #52]	; (8005ce8 <__libc_init_array+0x38>)
 8005cb4:	4c0d      	ldr	r4, [pc, #52]	; (8005cec <__libc_init_array+0x3c>)
 8005cb6:	1b64      	subs	r4, r4, r5
 8005cb8:	10a4      	asrs	r4, r4, #2
 8005cba:	2600      	movs	r6, #0
 8005cbc:	42a6      	cmp	r6, r4
 8005cbe:	d109      	bne.n	8005cd4 <__libc_init_array+0x24>
 8005cc0:	4d0b      	ldr	r5, [pc, #44]	; (8005cf0 <__libc_init_array+0x40>)
 8005cc2:	4c0c      	ldr	r4, [pc, #48]	; (8005cf4 <__libc_init_array+0x44>)
 8005cc4:	f000 fc8e 	bl	80065e4 <_init>
 8005cc8:	1b64      	subs	r4, r4, r5
 8005cca:	10a4      	asrs	r4, r4, #2
 8005ccc:	2600      	movs	r6, #0
 8005cce:	42a6      	cmp	r6, r4
 8005cd0:	d105      	bne.n	8005cde <__libc_init_array+0x2e>
 8005cd2:	bd70      	pop	{r4, r5, r6, pc}
 8005cd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cd8:	4798      	blx	r3
 8005cda:	3601      	adds	r6, #1
 8005cdc:	e7ee      	b.n	8005cbc <__libc_init_array+0xc>
 8005cde:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ce2:	4798      	blx	r3
 8005ce4:	3601      	adds	r6, #1
 8005ce6:	e7f2      	b.n	8005cce <__libc_init_array+0x1e>
 8005ce8:	080071a4 	.word	0x080071a4
 8005cec:	080071a4 	.word	0x080071a4
 8005cf0:	080071a4 	.word	0x080071a4
 8005cf4:	080071a8 	.word	0x080071a8

08005cf8 <memset>:
 8005cf8:	4402      	add	r2, r0
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d100      	bne.n	8005d02 <memset+0xa>
 8005d00:	4770      	bx	lr
 8005d02:	f803 1b01 	strb.w	r1, [r3], #1
 8005d06:	e7f9      	b.n	8005cfc <memset+0x4>

08005d08 <siprintf>:
 8005d08:	b40e      	push	{r1, r2, r3}
 8005d0a:	b500      	push	{lr}
 8005d0c:	b09c      	sub	sp, #112	; 0x70
 8005d0e:	ab1d      	add	r3, sp, #116	; 0x74
 8005d10:	9002      	str	r0, [sp, #8]
 8005d12:	9006      	str	r0, [sp, #24]
 8005d14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005d18:	4809      	ldr	r0, [pc, #36]	; (8005d40 <siprintf+0x38>)
 8005d1a:	9107      	str	r1, [sp, #28]
 8005d1c:	9104      	str	r1, [sp, #16]
 8005d1e:	4909      	ldr	r1, [pc, #36]	; (8005d44 <siprintf+0x3c>)
 8005d20:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d24:	9105      	str	r1, [sp, #20]
 8005d26:	6800      	ldr	r0, [r0, #0]
 8005d28:	9301      	str	r3, [sp, #4]
 8005d2a:	a902      	add	r1, sp, #8
 8005d2c:	f000 f868 	bl	8005e00 <_svfiprintf_r>
 8005d30:	9b02      	ldr	r3, [sp, #8]
 8005d32:	2200      	movs	r2, #0
 8005d34:	701a      	strb	r2, [r3, #0]
 8005d36:	b01c      	add	sp, #112	; 0x70
 8005d38:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d3c:	b003      	add	sp, #12
 8005d3e:	4770      	bx	lr
 8005d40:	20000014 	.word	0x20000014
 8005d44:	ffff0208 	.word	0xffff0208

08005d48 <__ssputs_r>:
 8005d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d4c:	688e      	ldr	r6, [r1, #8]
 8005d4e:	429e      	cmp	r6, r3
 8005d50:	4682      	mov	sl, r0
 8005d52:	460c      	mov	r4, r1
 8005d54:	4690      	mov	r8, r2
 8005d56:	461f      	mov	r7, r3
 8005d58:	d838      	bhi.n	8005dcc <__ssputs_r+0x84>
 8005d5a:	898a      	ldrh	r2, [r1, #12]
 8005d5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005d60:	d032      	beq.n	8005dc8 <__ssputs_r+0x80>
 8005d62:	6825      	ldr	r5, [r4, #0]
 8005d64:	6909      	ldr	r1, [r1, #16]
 8005d66:	eba5 0901 	sub.w	r9, r5, r1
 8005d6a:	6965      	ldr	r5, [r4, #20]
 8005d6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005d74:	3301      	adds	r3, #1
 8005d76:	444b      	add	r3, r9
 8005d78:	106d      	asrs	r5, r5, #1
 8005d7a:	429d      	cmp	r5, r3
 8005d7c:	bf38      	it	cc
 8005d7e:	461d      	movcc	r5, r3
 8005d80:	0553      	lsls	r3, r2, #21
 8005d82:	d531      	bpl.n	8005de8 <__ssputs_r+0xa0>
 8005d84:	4629      	mov	r1, r5
 8005d86:	f000 fb63 	bl	8006450 <_malloc_r>
 8005d8a:	4606      	mov	r6, r0
 8005d8c:	b950      	cbnz	r0, 8005da4 <__ssputs_r+0x5c>
 8005d8e:	230c      	movs	r3, #12
 8005d90:	f8ca 3000 	str.w	r3, [sl]
 8005d94:	89a3      	ldrh	r3, [r4, #12]
 8005d96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d9a:	81a3      	strh	r3, [r4, #12]
 8005d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005da4:	6921      	ldr	r1, [r4, #16]
 8005da6:	464a      	mov	r2, r9
 8005da8:	f000 fabe 	bl	8006328 <memcpy>
 8005dac:	89a3      	ldrh	r3, [r4, #12]
 8005dae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005db2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005db6:	81a3      	strh	r3, [r4, #12]
 8005db8:	6126      	str	r6, [r4, #16]
 8005dba:	6165      	str	r5, [r4, #20]
 8005dbc:	444e      	add	r6, r9
 8005dbe:	eba5 0509 	sub.w	r5, r5, r9
 8005dc2:	6026      	str	r6, [r4, #0]
 8005dc4:	60a5      	str	r5, [r4, #8]
 8005dc6:	463e      	mov	r6, r7
 8005dc8:	42be      	cmp	r6, r7
 8005dca:	d900      	bls.n	8005dce <__ssputs_r+0x86>
 8005dcc:	463e      	mov	r6, r7
 8005dce:	6820      	ldr	r0, [r4, #0]
 8005dd0:	4632      	mov	r2, r6
 8005dd2:	4641      	mov	r1, r8
 8005dd4:	f000 fab6 	bl	8006344 <memmove>
 8005dd8:	68a3      	ldr	r3, [r4, #8]
 8005dda:	1b9b      	subs	r3, r3, r6
 8005ddc:	60a3      	str	r3, [r4, #8]
 8005dde:	6823      	ldr	r3, [r4, #0]
 8005de0:	4433      	add	r3, r6
 8005de2:	6023      	str	r3, [r4, #0]
 8005de4:	2000      	movs	r0, #0
 8005de6:	e7db      	b.n	8005da0 <__ssputs_r+0x58>
 8005de8:	462a      	mov	r2, r5
 8005dea:	f000 fba5 	bl	8006538 <_realloc_r>
 8005dee:	4606      	mov	r6, r0
 8005df0:	2800      	cmp	r0, #0
 8005df2:	d1e1      	bne.n	8005db8 <__ssputs_r+0x70>
 8005df4:	6921      	ldr	r1, [r4, #16]
 8005df6:	4650      	mov	r0, sl
 8005df8:	f000 fabe 	bl	8006378 <_free_r>
 8005dfc:	e7c7      	b.n	8005d8e <__ssputs_r+0x46>
	...

08005e00 <_svfiprintf_r>:
 8005e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e04:	4698      	mov	r8, r3
 8005e06:	898b      	ldrh	r3, [r1, #12]
 8005e08:	061b      	lsls	r3, r3, #24
 8005e0a:	b09d      	sub	sp, #116	; 0x74
 8005e0c:	4607      	mov	r7, r0
 8005e0e:	460d      	mov	r5, r1
 8005e10:	4614      	mov	r4, r2
 8005e12:	d50e      	bpl.n	8005e32 <_svfiprintf_r+0x32>
 8005e14:	690b      	ldr	r3, [r1, #16]
 8005e16:	b963      	cbnz	r3, 8005e32 <_svfiprintf_r+0x32>
 8005e18:	2140      	movs	r1, #64	; 0x40
 8005e1a:	f000 fb19 	bl	8006450 <_malloc_r>
 8005e1e:	6028      	str	r0, [r5, #0]
 8005e20:	6128      	str	r0, [r5, #16]
 8005e22:	b920      	cbnz	r0, 8005e2e <_svfiprintf_r+0x2e>
 8005e24:	230c      	movs	r3, #12
 8005e26:	603b      	str	r3, [r7, #0]
 8005e28:	f04f 30ff 	mov.w	r0, #4294967295
 8005e2c:	e0d1      	b.n	8005fd2 <_svfiprintf_r+0x1d2>
 8005e2e:	2340      	movs	r3, #64	; 0x40
 8005e30:	616b      	str	r3, [r5, #20]
 8005e32:	2300      	movs	r3, #0
 8005e34:	9309      	str	r3, [sp, #36]	; 0x24
 8005e36:	2320      	movs	r3, #32
 8005e38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e40:	2330      	movs	r3, #48	; 0x30
 8005e42:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005fec <_svfiprintf_r+0x1ec>
 8005e46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e4a:	f04f 0901 	mov.w	r9, #1
 8005e4e:	4623      	mov	r3, r4
 8005e50:	469a      	mov	sl, r3
 8005e52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e56:	b10a      	cbz	r2, 8005e5c <_svfiprintf_r+0x5c>
 8005e58:	2a25      	cmp	r2, #37	; 0x25
 8005e5a:	d1f9      	bne.n	8005e50 <_svfiprintf_r+0x50>
 8005e5c:	ebba 0b04 	subs.w	fp, sl, r4
 8005e60:	d00b      	beq.n	8005e7a <_svfiprintf_r+0x7a>
 8005e62:	465b      	mov	r3, fp
 8005e64:	4622      	mov	r2, r4
 8005e66:	4629      	mov	r1, r5
 8005e68:	4638      	mov	r0, r7
 8005e6a:	f7ff ff6d 	bl	8005d48 <__ssputs_r>
 8005e6e:	3001      	adds	r0, #1
 8005e70:	f000 80aa 	beq.w	8005fc8 <_svfiprintf_r+0x1c8>
 8005e74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e76:	445a      	add	r2, fp
 8005e78:	9209      	str	r2, [sp, #36]	; 0x24
 8005e7a:	f89a 3000 	ldrb.w	r3, [sl]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	f000 80a2 	beq.w	8005fc8 <_svfiprintf_r+0x1c8>
 8005e84:	2300      	movs	r3, #0
 8005e86:	f04f 32ff 	mov.w	r2, #4294967295
 8005e8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e8e:	f10a 0a01 	add.w	sl, sl, #1
 8005e92:	9304      	str	r3, [sp, #16]
 8005e94:	9307      	str	r3, [sp, #28]
 8005e96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e9a:	931a      	str	r3, [sp, #104]	; 0x68
 8005e9c:	4654      	mov	r4, sl
 8005e9e:	2205      	movs	r2, #5
 8005ea0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ea4:	4851      	ldr	r0, [pc, #324]	; (8005fec <_svfiprintf_r+0x1ec>)
 8005ea6:	f7fa f993 	bl	80001d0 <memchr>
 8005eaa:	9a04      	ldr	r2, [sp, #16]
 8005eac:	b9d8      	cbnz	r0, 8005ee6 <_svfiprintf_r+0xe6>
 8005eae:	06d0      	lsls	r0, r2, #27
 8005eb0:	bf44      	itt	mi
 8005eb2:	2320      	movmi	r3, #32
 8005eb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005eb8:	0711      	lsls	r1, r2, #28
 8005eba:	bf44      	itt	mi
 8005ebc:	232b      	movmi	r3, #43	; 0x2b
 8005ebe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ec2:	f89a 3000 	ldrb.w	r3, [sl]
 8005ec6:	2b2a      	cmp	r3, #42	; 0x2a
 8005ec8:	d015      	beq.n	8005ef6 <_svfiprintf_r+0xf6>
 8005eca:	9a07      	ldr	r2, [sp, #28]
 8005ecc:	4654      	mov	r4, sl
 8005ece:	2000      	movs	r0, #0
 8005ed0:	f04f 0c0a 	mov.w	ip, #10
 8005ed4:	4621      	mov	r1, r4
 8005ed6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005eda:	3b30      	subs	r3, #48	; 0x30
 8005edc:	2b09      	cmp	r3, #9
 8005ede:	d94e      	bls.n	8005f7e <_svfiprintf_r+0x17e>
 8005ee0:	b1b0      	cbz	r0, 8005f10 <_svfiprintf_r+0x110>
 8005ee2:	9207      	str	r2, [sp, #28]
 8005ee4:	e014      	b.n	8005f10 <_svfiprintf_r+0x110>
 8005ee6:	eba0 0308 	sub.w	r3, r0, r8
 8005eea:	fa09 f303 	lsl.w	r3, r9, r3
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	9304      	str	r3, [sp, #16]
 8005ef2:	46a2      	mov	sl, r4
 8005ef4:	e7d2      	b.n	8005e9c <_svfiprintf_r+0x9c>
 8005ef6:	9b03      	ldr	r3, [sp, #12]
 8005ef8:	1d19      	adds	r1, r3, #4
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	9103      	str	r1, [sp, #12]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	bfbb      	ittet	lt
 8005f02:	425b      	neglt	r3, r3
 8005f04:	f042 0202 	orrlt.w	r2, r2, #2
 8005f08:	9307      	strge	r3, [sp, #28]
 8005f0a:	9307      	strlt	r3, [sp, #28]
 8005f0c:	bfb8      	it	lt
 8005f0e:	9204      	strlt	r2, [sp, #16]
 8005f10:	7823      	ldrb	r3, [r4, #0]
 8005f12:	2b2e      	cmp	r3, #46	; 0x2e
 8005f14:	d10c      	bne.n	8005f30 <_svfiprintf_r+0x130>
 8005f16:	7863      	ldrb	r3, [r4, #1]
 8005f18:	2b2a      	cmp	r3, #42	; 0x2a
 8005f1a:	d135      	bne.n	8005f88 <_svfiprintf_r+0x188>
 8005f1c:	9b03      	ldr	r3, [sp, #12]
 8005f1e:	1d1a      	adds	r2, r3, #4
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	9203      	str	r2, [sp, #12]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	bfb8      	it	lt
 8005f28:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f2c:	3402      	adds	r4, #2
 8005f2e:	9305      	str	r3, [sp, #20]
 8005f30:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005ffc <_svfiprintf_r+0x1fc>
 8005f34:	7821      	ldrb	r1, [r4, #0]
 8005f36:	2203      	movs	r2, #3
 8005f38:	4650      	mov	r0, sl
 8005f3a:	f7fa f949 	bl	80001d0 <memchr>
 8005f3e:	b140      	cbz	r0, 8005f52 <_svfiprintf_r+0x152>
 8005f40:	2340      	movs	r3, #64	; 0x40
 8005f42:	eba0 000a 	sub.w	r0, r0, sl
 8005f46:	fa03 f000 	lsl.w	r0, r3, r0
 8005f4a:	9b04      	ldr	r3, [sp, #16]
 8005f4c:	4303      	orrs	r3, r0
 8005f4e:	3401      	adds	r4, #1
 8005f50:	9304      	str	r3, [sp, #16]
 8005f52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f56:	4826      	ldr	r0, [pc, #152]	; (8005ff0 <_svfiprintf_r+0x1f0>)
 8005f58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f5c:	2206      	movs	r2, #6
 8005f5e:	f7fa f937 	bl	80001d0 <memchr>
 8005f62:	2800      	cmp	r0, #0
 8005f64:	d038      	beq.n	8005fd8 <_svfiprintf_r+0x1d8>
 8005f66:	4b23      	ldr	r3, [pc, #140]	; (8005ff4 <_svfiprintf_r+0x1f4>)
 8005f68:	bb1b      	cbnz	r3, 8005fb2 <_svfiprintf_r+0x1b2>
 8005f6a:	9b03      	ldr	r3, [sp, #12]
 8005f6c:	3307      	adds	r3, #7
 8005f6e:	f023 0307 	bic.w	r3, r3, #7
 8005f72:	3308      	adds	r3, #8
 8005f74:	9303      	str	r3, [sp, #12]
 8005f76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f78:	4433      	add	r3, r6
 8005f7a:	9309      	str	r3, [sp, #36]	; 0x24
 8005f7c:	e767      	b.n	8005e4e <_svfiprintf_r+0x4e>
 8005f7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f82:	460c      	mov	r4, r1
 8005f84:	2001      	movs	r0, #1
 8005f86:	e7a5      	b.n	8005ed4 <_svfiprintf_r+0xd4>
 8005f88:	2300      	movs	r3, #0
 8005f8a:	3401      	adds	r4, #1
 8005f8c:	9305      	str	r3, [sp, #20]
 8005f8e:	4619      	mov	r1, r3
 8005f90:	f04f 0c0a 	mov.w	ip, #10
 8005f94:	4620      	mov	r0, r4
 8005f96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f9a:	3a30      	subs	r2, #48	; 0x30
 8005f9c:	2a09      	cmp	r2, #9
 8005f9e:	d903      	bls.n	8005fa8 <_svfiprintf_r+0x1a8>
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d0c5      	beq.n	8005f30 <_svfiprintf_r+0x130>
 8005fa4:	9105      	str	r1, [sp, #20]
 8005fa6:	e7c3      	b.n	8005f30 <_svfiprintf_r+0x130>
 8005fa8:	fb0c 2101 	mla	r1, ip, r1, r2
 8005fac:	4604      	mov	r4, r0
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e7f0      	b.n	8005f94 <_svfiprintf_r+0x194>
 8005fb2:	ab03      	add	r3, sp, #12
 8005fb4:	9300      	str	r3, [sp, #0]
 8005fb6:	462a      	mov	r2, r5
 8005fb8:	4b0f      	ldr	r3, [pc, #60]	; (8005ff8 <_svfiprintf_r+0x1f8>)
 8005fba:	a904      	add	r1, sp, #16
 8005fbc:	4638      	mov	r0, r7
 8005fbe:	f3af 8000 	nop.w
 8005fc2:	1c42      	adds	r2, r0, #1
 8005fc4:	4606      	mov	r6, r0
 8005fc6:	d1d6      	bne.n	8005f76 <_svfiprintf_r+0x176>
 8005fc8:	89ab      	ldrh	r3, [r5, #12]
 8005fca:	065b      	lsls	r3, r3, #25
 8005fcc:	f53f af2c 	bmi.w	8005e28 <_svfiprintf_r+0x28>
 8005fd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005fd2:	b01d      	add	sp, #116	; 0x74
 8005fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fd8:	ab03      	add	r3, sp, #12
 8005fda:	9300      	str	r3, [sp, #0]
 8005fdc:	462a      	mov	r2, r5
 8005fde:	4b06      	ldr	r3, [pc, #24]	; (8005ff8 <_svfiprintf_r+0x1f8>)
 8005fe0:	a904      	add	r1, sp, #16
 8005fe2:	4638      	mov	r0, r7
 8005fe4:	f000 f87a 	bl	80060dc <_printf_i>
 8005fe8:	e7eb      	b.n	8005fc2 <_svfiprintf_r+0x1c2>
 8005fea:	bf00      	nop
 8005fec:	08007168 	.word	0x08007168
 8005ff0:	08007172 	.word	0x08007172
 8005ff4:	00000000 	.word	0x00000000
 8005ff8:	08005d49 	.word	0x08005d49
 8005ffc:	0800716e 	.word	0x0800716e

08006000 <_printf_common>:
 8006000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006004:	4616      	mov	r6, r2
 8006006:	4699      	mov	r9, r3
 8006008:	688a      	ldr	r2, [r1, #8]
 800600a:	690b      	ldr	r3, [r1, #16]
 800600c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006010:	4293      	cmp	r3, r2
 8006012:	bfb8      	it	lt
 8006014:	4613      	movlt	r3, r2
 8006016:	6033      	str	r3, [r6, #0]
 8006018:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800601c:	4607      	mov	r7, r0
 800601e:	460c      	mov	r4, r1
 8006020:	b10a      	cbz	r2, 8006026 <_printf_common+0x26>
 8006022:	3301      	adds	r3, #1
 8006024:	6033      	str	r3, [r6, #0]
 8006026:	6823      	ldr	r3, [r4, #0]
 8006028:	0699      	lsls	r1, r3, #26
 800602a:	bf42      	ittt	mi
 800602c:	6833      	ldrmi	r3, [r6, #0]
 800602e:	3302      	addmi	r3, #2
 8006030:	6033      	strmi	r3, [r6, #0]
 8006032:	6825      	ldr	r5, [r4, #0]
 8006034:	f015 0506 	ands.w	r5, r5, #6
 8006038:	d106      	bne.n	8006048 <_printf_common+0x48>
 800603a:	f104 0a19 	add.w	sl, r4, #25
 800603e:	68e3      	ldr	r3, [r4, #12]
 8006040:	6832      	ldr	r2, [r6, #0]
 8006042:	1a9b      	subs	r3, r3, r2
 8006044:	42ab      	cmp	r3, r5
 8006046:	dc26      	bgt.n	8006096 <_printf_common+0x96>
 8006048:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800604c:	1e13      	subs	r3, r2, #0
 800604e:	6822      	ldr	r2, [r4, #0]
 8006050:	bf18      	it	ne
 8006052:	2301      	movne	r3, #1
 8006054:	0692      	lsls	r2, r2, #26
 8006056:	d42b      	bmi.n	80060b0 <_printf_common+0xb0>
 8006058:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800605c:	4649      	mov	r1, r9
 800605e:	4638      	mov	r0, r7
 8006060:	47c0      	blx	r8
 8006062:	3001      	adds	r0, #1
 8006064:	d01e      	beq.n	80060a4 <_printf_common+0xa4>
 8006066:	6823      	ldr	r3, [r4, #0]
 8006068:	68e5      	ldr	r5, [r4, #12]
 800606a:	6832      	ldr	r2, [r6, #0]
 800606c:	f003 0306 	and.w	r3, r3, #6
 8006070:	2b04      	cmp	r3, #4
 8006072:	bf08      	it	eq
 8006074:	1aad      	subeq	r5, r5, r2
 8006076:	68a3      	ldr	r3, [r4, #8]
 8006078:	6922      	ldr	r2, [r4, #16]
 800607a:	bf0c      	ite	eq
 800607c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006080:	2500      	movne	r5, #0
 8006082:	4293      	cmp	r3, r2
 8006084:	bfc4      	itt	gt
 8006086:	1a9b      	subgt	r3, r3, r2
 8006088:	18ed      	addgt	r5, r5, r3
 800608a:	2600      	movs	r6, #0
 800608c:	341a      	adds	r4, #26
 800608e:	42b5      	cmp	r5, r6
 8006090:	d11a      	bne.n	80060c8 <_printf_common+0xc8>
 8006092:	2000      	movs	r0, #0
 8006094:	e008      	b.n	80060a8 <_printf_common+0xa8>
 8006096:	2301      	movs	r3, #1
 8006098:	4652      	mov	r2, sl
 800609a:	4649      	mov	r1, r9
 800609c:	4638      	mov	r0, r7
 800609e:	47c0      	blx	r8
 80060a0:	3001      	adds	r0, #1
 80060a2:	d103      	bne.n	80060ac <_printf_common+0xac>
 80060a4:	f04f 30ff 	mov.w	r0, #4294967295
 80060a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060ac:	3501      	adds	r5, #1
 80060ae:	e7c6      	b.n	800603e <_printf_common+0x3e>
 80060b0:	18e1      	adds	r1, r4, r3
 80060b2:	1c5a      	adds	r2, r3, #1
 80060b4:	2030      	movs	r0, #48	; 0x30
 80060b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80060ba:	4422      	add	r2, r4
 80060bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80060c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80060c4:	3302      	adds	r3, #2
 80060c6:	e7c7      	b.n	8006058 <_printf_common+0x58>
 80060c8:	2301      	movs	r3, #1
 80060ca:	4622      	mov	r2, r4
 80060cc:	4649      	mov	r1, r9
 80060ce:	4638      	mov	r0, r7
 80060d0:	47c0      	blx	r8
 80060d2:	3001      	adds	r0, #1
 80060d4:	d0e6      	beq.n	80060a4 <_printf_common+0xa4>
 80060d6:	3601      	adds	r6, #1
 80060d8:	e7d9      	b.n	800608e <_printf_common+0x8e>
	...

080060dc <_printf_i>:
 80060dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060e0:	7e0f      	ldrb	r7, [r1, #24]
 80060e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80060e4:	2f78      	cmp	r7, #120	; 0x78
 80060e6:	4691      	mov	r9, r2
 80060e8:	4680      	mov	r8, r0
 80060ea:	460c      	mov	r4, r1
 80060ec:	469a      	mov	sl, r3
 80060ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80060f2:	d807      	bhi.n	8006104 <_printf_i+0x28>
 80060f4:	2f62      	cmp	r7, #98	; 0x62
 80060f6:	d80a      	bhi.n	800610e <_printf_i+0x32>
 80060f8:	2f00      	cmp	r7, #0
 80060fa:	f000 80d8 	beq.w	80062ae <_printf_i+0x1d2>
 80060fe:	2f58      	cmp	r7, #88	; 0x58
 8006100:	f000 80a3 	beq.w	800624a <_printf_i+0x16e>
 8006104:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006108:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800610c:	e03a      	b.n	8006184 <_printf_i+0xa8>
 800610e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006112:	2b15      	cmp	r3, #21
 8006114:	d8f6      	bhi.n	8006104 <_printf_i+0x28>
 8006116:	a101      	add	r1, pc, #4	; (adr r1, 800611c <_printf_i+0x40>)
 8006118:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800611c:	08006175 	.word	0x08006175
 8006120:	08006189 	.word	0x08006189
 8006124:	08006105 	.word	0x08006105
 8006128:	08006105 	.word	0x08006105
 800612c:	08006105 	.word	0x08006105
 8006130:	08006105 	.word	0x08006105
 8006134:	08006189 	.word	0x08006189
 8006138:	08006105 	.word	0x08006105
 800613c:	08006105 	.word	0x08006105
 8006140:	08006105 	.word	0x08006105
 8006144:	08006105 	.word	0x08006105
 8006148:	08006295 	.word	0x08006295
 800614c:	080061b9 	.word	0x080061b9
 8006150:	08006277 	.word	0x08006277
 8006154:	08006105 	.word	0x08006105
 8006158:	08006105 	.word	0x08006105
 800615c:	080062b7 	.word	0x080062b7
 8006160:	08006105 	.word	0x08006105
 8006164:	080061b9 	.word	0x080061b9
 8006168:	08006105 	.word	0x08006105
 800616c:	08006105 	.word	0x08006105
 8006170:	0800627f 	.word	0x0800627f
 8006174:	682b      	ldr	r3, [r5, #0]
 8006176:	1d1a      	adds	r2, r3, #4
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	602a      	str	r2, [r5, #0]
 800617c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006180:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006184:	2301      	movs	r3, #1
 8006186:	e0a3      	b.n	80062d0 <_printf_i+0x1f4>
 8006188:	6820      	ldr	r0, [r4, #0]
 800618a:	6829      	ldr	r1, [r5, #0]
 800618c:	0606      	lsls	r6, r0, #24
 800618e:	f101 0304 	add.w	r3, r1, #4
 8006192:	d50a      	bpl.n	80061aa <_printf_i+0xce>
 8006194:	680e      	ldr	r6, [r1, #0]
 8006196:	602b      	str	r3, [r5, #0]
 8006198:	2e00      	cmp	r6, #0
 800619a:	da03      	bge.n	80061a4 <_printf_i+0xc8>
 800619c:	232d      	movs	r3, #45	; 0x2d
 800619e:	4276      	negs	r6, r6
 80061a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061a4:	485e      	ldr	r0, [pc, #376]	; (8006320 <_printf_i+0x244>)
 80061a6:	230a      	movs	r3, #10
 80061a8:	e019      	b.n	80061de <_printf_i+0x102>
 80061aa:	680e      	ldr	r6, [r1, #0]
 80061ac:	602b      	str	r3, [r5, #0]
 80061ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80061b2:	bf18      	it	ne
 80061b4:	b236      	sxthne	r6, r6
 80061b6:	e7ef      	b.n	8006198 <_printf_i+0xbc>
 80061b8:	682b      	ldr	r3, [r5, #0]
 80061ba:	6820      	ldr	r0, [r4, #0]
 80061bc:	1d19      	adds	r1, r3, #4
 80061be:	6029      	str	r1, [r5, #0]
 80061c0:	0601      	lsls	r1, r0, #24
 80061c2:	d501      	bpl.n	80061c8 <_printf_i+0xec>
 80061c4:	681e      	ldr	r6, [r3, #0]
 80061c6:	e002      	b.n	80061ce <_printf_i+0xf2>
 80061c8:	0646      	lsls	r6, r0, #25
 80061ca:	d5fb      	bpl.n	80061c4 <_printf_i+0xe8>
 80061cc:	881e      	ldrh	r6, [r3, #0]
 80061ce:	4854      	ldr	r0, [pc, #336]	; (8006320 <_printf_i+0x244>)
 80061d0:	2f6f      	cmp	r7, #111	; 0x6f
 80061d2:	bf0c      	ite	eq
 80061d4:	2308      	moveq	r3, #8
 80061d6:	230a      	movne	r3, #10
 80061d8:	2100      	movs	r1, #0
 80061da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80061de:	6865      	ldr	r5, [r4, #4]
 80061e0:	60a5      	str	r5, [r4, #8]
 80061e2:	2d00      	cmp	r5, #0
 80061e4:	bfa2      	ittt	ge
 80061e6:	6821      	ldrge	r1, [r4, #0]
 80061e8:	f021 0104 	bicge.w	r1, r1, #4
 80061ec:	6021      	strge	r1, [r4, #0]
 80061ee:	b90e      	cbnz	r6, 80061f4 <_printf_i+0x118>
 80061f0:	2d00      	cmp	r5, #0
 80061f2:	d04d      	beq.n	8006290 <_printf_i+0x1b4>
 80061f4:	4615      	mov	r5, r2
 80061f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80061fa:	fb03 6711 	mls	r7, r3, r1, r6
 80061fe:	5dc7      	ldrb	r7, [r0, r7]
 8006200:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006204:	4637      	mov	r7, r6
 8006206:	42bb      	cmp	r3, r7
 8006208:	460e      	mov	r6, r1
 800620a:	d9f4      	bls.n	80061f6 <_printf_i+0x11a>
 800620c:	2b08      	cmp	r3, #8
 800620e:	d10b      	bne.n	8006228 <_printf_i+0x14c>
 8006210:	6823      	ldr	r3, [r4, #0]
 8006212:	07de      	lsls	r6, r3, #31
 8006214:	d508      	bpl.n	8006228 <_printf_i+0x14c>
 8006216:	6923      	ldr	r3, [r4, #16]
 8006218:	6861      	ldr	r1, [r4, #4]
 800621a:	4299      	cmp	r1, r3
 800621c:	bfde      	ittt	le
 800621e:	2330      	movle	r3, #48	; 0x30
 8006220:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006224:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006228:	1b52      	subs	r2, r2, r5
 800622a:	6122      	str	r2, [r4, #16]
 800622c:	f8cd a000 	str.w	sl, [sp]
 8006230:	464b      	mov	r3, r9
 8006232:	aa03      	add	r2, sp, #12
 8006234:	4621      	mov	r1, r4
 8006236:	4640      	mov	r0, r8
 8006238:	f7ff fee2 	bl	8006000 <_printf_common>
 800623c:	3001      	adds	r0, #1
 800623e:	d14c      	bne.n	80062da <_printf_i+0x1fe>
 8006240:	f04f 30ff 	mov.w	r0, #4294967295
 8006244:	b004      	add	sp, #16
 8006246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800624a:	4835      	ldr	r0, [pc, #212]	; (8006320 <_printf_i+0x244>)
 800624c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006250:	6829      	ldr	r1, [r5, #0]
 8006252:	6823      	ldr	r3, [r4, #0]
 8006254:	f851 6b04 	ldr.w	r6, [r1], #4
 8006258:	6029      	str	r1, [r5, #0]
 800625a:	061d      	lsls	r5, r3, #24
 800625c:	d514      	bpl.n	8006288 <_printf_i+0x1ac>
 800625e:	07df      	lsls	r7, r3, #31
 8006260:	bf44      	itt	mi
 8006262:	f043 0320 	orrmi.w	r3, r3, #32
 8006266:	6023      	strmi	r3, [r4, #0]
 8006268:	b91e      	cbnz	r6, 8006272 <_printf_i+0x196>
 800626a:	6823      	ldr	r3, [r4, #0]
 800626c:	f023 0320 	bic.w	r3, r3, #32
 8006270:	6023      	str	r3, [r4, #0]
 8006272:	2310      	movs	r3, #16
 8006274:	e7b0      	b.n	80061d8 <_printf_i+0xfc>
 8006276:	6823      	ldr	r3, [r4, #0]
 8006278:	f043 0320 	orr.w	r3, r3, #32
 800627c:	6023      	str	r3, [r4, #0]
 800627e:	2378      	movs	r3, #120	; 0x78
 8006280:	4828      	ldr	r0, [pc, #160]	; (8006324 <_printf_i+0x248>)
 8006282:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006286:	e7e3      	b.n	8006250 <_printf_i+0x174>
 8006288:	0659      	lsls	r1, r3, #25
 800628a:	bf48      	it	mi
 800628c:	b2b6      	uxthmi	r6, r6
 800628e:	e7e6      	b.n	800625e <_printf_i+0x182>
 8006290:	4615      	mov	r5, r2
 8006292:	e7bb      	b.n	800620c <_printf_i+0x130>
 8006294:	682b      	ldr	r3, [r5, #0]
 8006296:	6826      	ldr	r6, [r4, #0]
 8006298:	6961      	ldr	r1, [r4, #20]
 800629a:	1d18      	adds	r0, r3, #4
 800629c:	6028      	str	r0, [r5, #0]
 800629e:	0635      	lsls	r5, r6, #24
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	d501      	bpl.n	80062a8 <_printf_i+0x1cc>
 80062a4:	6019      	str	r1, [r3, #0]
 80062a6:	e002      	b.n	80062ae <_printf_i+0x1d2>
 80062a8:	0670      	lsls	r0, r6, #25
 80062aa:	d5fb      	bpl.n	80062a4 <_printf_i+0x1c8>
 80062ac:	8019      	strh	r1, [r3, #0]
 80062ae:	2300      	movs	r3, #0
 80062b0:	6123      	str	r3, [r4, #16]
 80062b2:	4615      	mov	r5, r2
 80062b4:	e7ba      	b.n	800622c <_printf_i+0x150>
 80062b6:	682b      	ldr	r3, [r5, #0]
 80062b8:	1d1a      	adds	r2, r3, #4
 80062ba:	602a      	str	r2, [r5, #0]
 80062bc:	681d      	ldr	r5, [r3, #0]
 80062be:	6862      	ldr	r2, [r4, #4]
 80062c0:	2100      	movs	r1, #0
 80062c2:	4628      	mov	r0, r5
 80062c4:	f7f9 ff84 	bl	80001d0 <memchr>
 80062c8:	b108      	cbz	r0, 80062ce <_printf_i+0x1f2>
 80062ca:	1b40      	subs	r0, r0, r5
 80062cc:	6060      	str	r0, [r4, #4]
 80062ce:	6863      	ldr	r3, [r4, #4]
 80062d0:	6123      	str	r3, [r4, #16]
 80062d2:	2300      	movs	r3, #0
 80062d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062d8:	e7a8      	b.n	800622c <_printf_i+0x150>
 80062da:	6923      	ldr	r3, [r4, #16]
 80062dc:	462a      	mov	r2, r5
 80062de:	4649      	mov	r1, r9
 80062e0:	4640      	mov	r0, r8
 80062e2:	47d0      	blx	sl
 80062e4:	3001      	adds	r0, #1
 80062e6:	d0ab      	beq.n	8006240 <_printf_i+0x164>
 80062e8:	6823      	ldr	r3, [r4, #0]
 80062ea:	079b      	lsls	r3, r3, #30
 80062ec:	d413      	bmi.n	8006316 <_printf_i+0x23a>
 80062ee:	68e0      	ldr	r0, [r4, #12]
 80062f0:	9b03      	ldr	r3, [sp, #12]
 80062f2:	4298      	cmp	r0, r3
 80062f4:	bfb8      	it	lt
 80062f6:	4618      	movlt	r0, r3
 80062f8:	e7a4      	b.n	8006244 <_printf_i+0x168>
 80062fa:	2301      	movs	r3, #1
 80062fc:	4632      	mov	r2, r6
 80062fe:	4649      	mov	r1, r9
 8006300:	4640      	mov	r0, r8
 8006302:	47d0      	blx	sl
 8006304:	3001      	adds	r0, #1
 8006306:	d09b      	beq.n	8006240 <_printf_i+0x164>
 8006308:	3501      	adds	r5, #1
 800630a:	68e3      	ldr	r3, [r4, #12]
 800630c:	9903      	ldr	r1, [sp, #12]
 800630e:	1a5b      	subs	r3, r3, r1
 8006310:	42ab      	cmp	r3, r5
 8006312:	dcf2      	bgt.n	80062fa <_printf_i+0x21e>
 8006314:	e7eb      	b.n	80062ee <_printf_i+0x212>
 8006316:	2500      	movs	r5, #0
 8006318:	f104 0619 	add.w	r6, r4, #25
 800631c:	e7f5      	b.n	800630a <_printf_i+0x22e>
 800631e:	bf00      	nop
 8006320:	08007179 	.word	0x08007179
 8006324:	0800718a 	.word	0x0800718a

08006328 <memcpy>:
 8006328:	440a      	add	r2, r1
 800632a:	4291      	cmp	r1, r2
 800632c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006330:	d100      	bne.n	8006334 <memcpy+0xc>
 8006332:	4770      	bx	lr
 8006334:	b510      	push	{r4, lr}
 8006336:	f811 4b01 	ldrb.w	r4, [r1], #1
 800633a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800633e:	4291      	cmp	r1, r2
 8006340:	d1f9      	bne.n	8006336 <memcpy+0xe>
 8006342:	bd10      	pop	{r4, pc}

08006344 <memmove>:
 8006344:	4288      	cmp	r0, r1
 8006346:	b510      	push	{r4, lr}
 8006348:	eb01 0402 	add.w	r4, r1, r2
 800634c:	d902      	bls.n	8006354 <memmove+0x10>
 800634e:	4284      	cmp	r4, r0
 8006350:	4623      	mov	r3, r4
 8006352:	d807      	bhi.n	8006364 <memmove+0x20>
 8006354:	1e43      	subs	r3, r0, #1
 8006356:	42a1      	cmp	r1, r4
 8006358:	d008      	beq.n	800636c <memmove+0x28>
 800635a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800635e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006362:	e7f8      	b.n	8006356 <memmove+0x12>
 8006364:	4402      	add	r2, r0
 8006366:	4601      	mov	r1, r0
 8006368:	428a      	cmp	r2, r1
 800636a:	d100      	bne.n	800636e <memmove+0x2a>
 800636c:	bd10      	pop	{r4, pc}
 800636e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006372:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006376:	e7f7      	b.n	8006368 <memmove+0x24>

08006378 <_free_r>:
 8006378:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800637a:	2900      	cmp	r1, #0
 800637c:	d044      	beq.n	8006408 <_free_r+0x90>
 800637e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006382:	9001      	str	r0, [sp, #4]
 8006384:	2b00      	cmp	r3, #0
 8006386:	f1a1 0404 	sub.w	r4, r1, #4
 800638a:	bfb8      	it	lt
 800638c:	18e4      	addlt	r4, r4, r3
 800638e:	f000 f913 	bl	80065b8 <__malloc_lock>
 8006392:	4a1e      	ldr	r2, [pc, #120]	; (800640c <_free_r+0x94>)
 8006394:	9801      	ldr	r0, [sp, #4]
 8006396:	6813      	ldr	r3, [r2, #0]
 8006398:	b933      	cbnz	r3, 80063a8 <_free_r+0x30>
 800639a:	6063      	str	r3, [r4, #4]
 800639c:	6014      	str	r4, [r2, #0]
 800639e:	b003      	add	sp, #12
 80063a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80063a4:	f000 b90e 	b.w	80065c4 <__malloc_unlock>
 80063a8:	42a3      	cmp	r3, r4
 80063aa:	d908      	bls.n	80063be <_free_r+0x46>
 80063ac:	6825      	ldr	r5, [r4, #0]
 80063ae:	1961      	adds	r1, r4, r5
 80063b0:	428b      	cmp	r3, r1
 80063b2:	bf01      	itttt	eq
 80063b4:	6819      	ldreq	r1, [r3, #0]
 80063b6:	685b      	ldreq	r3, [r3, #4]
 80063b8:	1949      	addeq	r1, r1, r5
 80063ba:	6021      	streq	r1, [r4, #0]
 80063bc:	e7ed      	b.n	800639a <_free_r+0x22>
 80063be:	461a      	mov	r2, r3
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	b10b      	cbz	r3, 80063c8 <_free_r+0x50>
 80063c4:	42a3      	cmp	r3, r4
 80063c6:	d9fa      	bls.n	80063be <_free_r+0x46>
 80063c8:	6811      	ldr	r1, [r2, #0]
 80063ca:	1855      	adds	r5, r2, r1
 80063cc:	42a5      	cmp	r5, r4
 80063ce:	d10b      	bne.n	80063e8 <_free_r+0x70>
 80063d0:	6824      	ldr	r4, [r4, #0]
 80063d2:	4421      	add	r1, r4
 80063d4:	1854      	adds	r4, r2, r1
 80063d6:	42a3      	cmp	r3, r4
 80063d8:	6011      	str	r1, [r2, #0]
 80063da:	d1e0      	bne.n	800639e <_free_r+0x26>
 80063dc:	681c      	ldr	r4, [r3, #0]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	6053      	str	r3, [r2, #4]
 80063e2:	4421      	add	r1, r4
 80063e4:	6011      	str	r1, [r2, #0]
 80063e6:	e7da      	b.n	800639e <_free_r+0x26>
 80063e8:	d902      	bls.n	80063f0 <_free_r+0x78>
 80063ea:	230c      	movs	r3, #12
 80063ec:	6003      	str	r3, [r0, #0]
 80063ee:	e7d6      	b.n	800639e <_free_r+0x26>
 80063f0:	6825      	ldr	r5, [r4, #0]
 80063f2:	1961      	adds	r1, r4, r5
 80063f4:	428b      	cmp	r3, r1
 80063f6:	bf04      	itt	eq
 80063f8:	6819      	ldreq	r1, [r3, #0]
 80063fa:	685b      	ldreq	r3, [r3, #4]
 80063fc:	6063      	str	r3, [r4, #4]
 80063fe:	bf04      	itt	eq
 8006400:	1949      	addeq	r1, r1, r5
 8006402:	6021      	streq	r1, [r4, #0]
 8006404:	6054      	str	r4, [r2, #4]
 8006406:	e7ca      	b.n	800639e <_free_r+0x26>
 8006408:	b003      	add	sp, #12
 800640a:	bd30      	pop	{r4, r5, pc}
 800640c:	200007d8 	.word	0x200007d8

08006410 <sbrk_aligned>:
 8006410:	b570      	push	{r4, r5, r6, lr}
 8006412:	4e0e      	ldr	r6, [pc, #56]	; (800644c <sbrk_aligned+0x3c>)
 8006414:	460c      	mov	r4, r1
 8006416:	6831      	ldr	r1, [r6, #0]
 8006418:	4605      	mov	r5, r0
 800641a:	b911      	cbnz	r1, 8006422 <sbrk_aligned+0x12>
 800641c:	f000 f8bc 	bl	8006598 <_sbrk_r>
 8006420:	6030      	str	r0, [r6, #0]
 8006422:	4621      	mov	r1, r4
 8006424:	4628      	mov	r0, r5
 8006426:	f000 f8b7 	bl	8006598 <_sbrk_r>
 800642a:	1c43      	adds	r3, r0, #1
 800642c:	d00a      	beq.n	8006444 <sbrk_aligned+0x34>
 800642e:	1cc4      	adds	r4, r0, #3
 8006430:	f024 0403 	bic.w	r4, r4, #3
 8006434:	42a0      	cmp	r0, r4
 8006436:	d007      	beq.n	8006448 <sbrk_aligned+0x38>
 8006438:	1a21      	subs	r1, r4, r0
 800643a:	4628      	mov	r0, r5
 800643c:	f000 f8ac 	bl	8006598 <_sbrk_r>
 8006440:	3001      	adds	r0, #1
 8006442:	d101      	bne.n	8006448 <sbrk_aligned+0x38>
 8006444:	f04f 34ff 	mov.w	r4, #4294967295
 8006448:	4620      	mov	r0, r4
 800644a:	bd70      	pop	{r4, r5, r6, pc}
 800644c:	200007dc 	.word	0x200007dc

08006450 <_malloc_r>:
 8006450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006454:	1ccd      	adds	r5, r1, #3
 8006456:	f025 0503 	bic.w	r5, r5, #3
 800645a:	3508      	adds	r5, #8
 800645c:	2d0c      	cmp	r5, #12
 800645e:	bf38      	it	cc
 8006460:	250c      	movcc	r5, #12
 8006462:	2d00      	cmp	r5, #0
 8006464:	4607      	mov	r7, r0
 8006466:	db01      	blt.n	800646c <_malloc_r+0x1c>
 8006468:	42a9      	cmp	r1, r5
 800646a:	d905      	bls.n	8006478 <_malloc_r+0x28>
 800646c:	230c      	movs	r3, #12
 800646e:	603b      	str	r3, [r7, #0]
 8006470:	2600      	movs	r6, #0
 8006472:	4630      	mov	r0, r6
 8006474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006478:	4e2e      	ldr	r6, [pc, #184]	; (8006534 <_malloc_r+0xe4>)
 800647a:	f000 f89d 	bl	80065b8 <__malloc_lock>
 800647e:	6833      	ldr	r3, [r6, #0]
 8006480:	461c      	mov	r4, r3
 8006482:	bb34      	cbnz	r4, 80064d2 <_malloc_r+0x82>
 8006484:	4629      	mov	r1, r5
 8006486:	4638      	mov	r0, r7
 8006488:	f7ff ffc2 	bl	8006410 <sbrk_aligned>
 800648c:	1c43      	adds	r3, r0, #1
 800648e:	4604      	mov	r4, r0
 8006490:	d14d      	bne.n	800652e <_malloc_r+0xde>
 8006492:	6834      	ldr	r4, [r6, #0]
 8006494:	4626      	mov	r6, r4
 8006496:	2e00      	cmp	r6, #0
 8006498:	d140      	bne.n	800651c <_malloc_r+0xcc>
 800649a:	6823      	ldr	r3, [r4, #0]
 800649c:	4631      	mov	r1, r6
 800649e:	4638      	mov	r0, r7
 80064a0:	eb04 0803 	add.w	r8, r4, r3
 80064a4:	f000 f878 	bl	8006598 <_sbrk_r>
 80064a8:	4580      	cmp	r8, r0
 80064aa:	d13a      	bne.n	8006522 <_malloc_r+0xd2>
 80064ac:	6821      	ldr	r1, [r4, #0]
 80064ae:	3503      	adds	r5, #3
 80064b0:	1a6d      	subs	r5, r5, r1
 80064b2:	f025 0503 	bic.w	r5, r5, #3
 80064b6:	3508      	adds	r5, #8
 80064b8:	2d0c      	cmp	r5, #12
 80064ba:	bf38      	it	cc
 80064bc:	250c      	movcc	r5, #12
 80064be:	4629      	mov	r1, r5
 80064c0:	4638      	mov	r0, r7
 80064c2:	f7ff ffa5 	bl	8006410 <sbrk_aligned>
 80064c6:	3001      	adds	r0, #1
 80064c8:	d02b      	beq.n	8006522 <_malloc_r+0xd2>
 80064ca:	6823      	ldr	r3, [r4, #0]
 80064cc:	442b      	add	r3, r5
 80064ce:	6023      	str	r3, [r4, #0]
 80064d0:	e00e      	b.n	80064f0 <_malloc_r+0xa0>
 80064d2:	6822      	ldr	r2, [r4, #0]
 80064d4:	1b52      	subs	r2, r2, r5
 80064d6:	d41e      	bmi.n	8006516 <_malloc_r+0xc6>
 80064d8:	2a0b      	cmp	r2, #11
 80064da:	d916      	bls.n	800650a <_malloc_r+0xba>
 80064dc:	1961      	adds	r1, r4, r5
 80064de:	42a3      	cmp	r3, r4
 80064e0:	6025      	str	r5, [r4, #0]
 80064e2:	bf18      	it	ne
 80064e4:	6059      	strne	r1, [r3, #4]
 80064e6:	6863      	ldr	r3, [r4, #4]
 80064e8:	bf08      	it	eq
 80064ea:	6031      	streq	r1, [r6, #0]
 80064ec:	5162      	str	r2, [r4, r5]
 80064ee:	604b      	str	r3, [r1, #4]
 80064f0:	4638      	mov	r0, r7
 80064f2:	f104 060b 	add.w	r6, r4, #11
 80064f6:	f000 f865 	bl	80065c4 <__malloc_unlock>
 80064fa:	f026 0607 	bic.w	r6, r6, #7
 80064fe:	1d23      	adds	r3, r4, #4
 8006500:	1af2      	subs	r2, r6, r3
 8006502:	d0b6      	beq.n	8006472 <_malloc_r+0x22>
 8006504:	1b9b      	subs	r3, r3, r6
 8006506:	50a3      	str	r3, [r4, r2]
 8006508:	e7b3      	b.n	8006472 <_malloc_r+0x22>
 800650a:	6862      	ldr	r2, [r4, #4]
 800650c:	42a3      	cmp	r3, r4
 800650e:	bf0c      	ite	eq
 8006510:	6032      	streq	r2, [r6, #0]
 8006512:	605a      	strne	r2, [r3, #4]
 8006514:	e7ec      	b.n	80064f0 <_malloc_r+0xa0>
 8006516:	4623      	mov	r3, r4
 8006518:	6864      	ldr	r4, [r4, #4]
 800651a:	e7b2      	b.n	8006482 <_malloc_r+0x32>
 800651c:	4634      	mov	r4, r6
 800651e:	6876      	ldr	r6, [r6, #4]
 8006520:	e7b9      	b.n	8006496 <_malloc_r+0x46>
 8006522:	230c      	movs	r3, #12
 8006524:	603b      	str	r3, [r7, #0]
 8006526:	4638      	mov	r0, r7
 8006528:	f000 f84c 	bl	80065c4 <__malloc_unlock>
 800652c:	e7a1      	b.n	8006472 <_malloc_r+0x22>
 800652e:	6025      	str	r5, [r4, #0]
 8006530:	e7de      	b.n	80064f0 <_malloc_r+0xa0>
 8006532:	bf00      	nop
 8006534:	200007d8 	.word	0x200007d8

08006538 <_realloc_r>:
 8006538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800653c:	4680      	mov	r8, r0
 800653e:	4614      	mov	r4, r2
 8006540:	460e      	mov	r6, r1
 8006542:	b921      	cbnz	r1, 800654e <_realloc_r+0x16>
 8006544:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006548:	4611      	mov	r1, r2
 800654a:	f7ff bf81 	b.w	8006450 <_malloc_r>
 800654e:	b92a      	cbnz	r2, 800655c <_realloc_r+0x24>
 8006550:	f7ff ff12 	bl	8006378 <_free_r>
 8006554:	4625      	mov	r5, r4
 8006556:	4628      	mov	r0, r5
 8006558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800655c:	f000 f838 	bl	80065d0 <_malloc_usable_size_r>
 8006560:	4284      	cmp	r4, r0
 8006562:	4607      	mov	r7, r0
 8006564:	d802      	bhi.n	800656c <_realloc_r+0x34>
 8006566:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800656a:	d812      	bhi.n	8006592 <_realloc_r+0x5a>
 800656c:	4621      	mov	r1, r4
 800656e:	4640      	mov	r0, r8
 8006570:	f7ff ff6e 	bl	8006450 <_malloc_r>
 8006574:	4605      	mov	r5, r0
 8006576:	2800      	cmp	r0, #0
 8006578:	d0ed      	beq.n	8006556 <_realloc_r+0x1e>
 800657a:	42bc      	cmp	r4, r7
 800657c:	4622      	mov	r2, r4
 800657e:	4631      	mov	r1, r6
 8006580:	bf28      	it	cs
 8006582:	463a      	movcs	r2, r7
 8006584:	f7ff fed0 	bl	8006328 <memcpy>
 8006588:	4631      	mov	r1, r6
 800658a:	4640      	mov	r0, r8
 800658c:	f7ff fef4 	bl	8006378 <_free_r>
 8006590:	e7e1      	b.n	8006556 <_realloc_r+0x1e>
 8006592:	4635      	mov	r5, r6
 8006594:	e7df      	b.n	8006556 <_realloc_r+0x1e>
	...

08006598 <_sbrk_r>:
 8006598:	b538      	push	{r3, r4, r5, lr}
 800659a:	4d06      	ldr	r5, [pc, #24]	; (80065b4 <_sbrk_r+0x1c>)
 800659c:	2300      	movs	r3, #0
 800659e:	4604      	mov	r4, r0
 80065a0:	4608      	mov	r0, r1
 80065a2:	602b      	str	r3, [r5, #0]
 80065a4:	f7fb ff62 	bl	800246c <_sbrk>
 80065a8:	1c43      	adds	r3, r0, #1
 80065aa:	d102      	bne.n	80065b2 <_sbrk_r+0x1a>
 80065ac:	682b      	ldr	r3, [r5, #0]
 80065ae:	b103      	cbz	r3, 80065b2 <_sbrk_r+0x1a>
 80065b0:	6023      	str	r3, [r4, #0]
 80065b2:	bd38      	pop	{r3, r4, r5, pc}
 80065b4:	200007e0 	.word	0x200007e0

080065b8 <__malloc_lock>:
 80065b8:	4801      	ldr	r0, [pc, #4]	; (80065c0 <__malloc_lock+0x8>)
 80065ba:	f000 b811 	b.w	80065e0 <__retarget_lock_acquire_recursive>
 80065be:	bf00      	nop
 80065c0:	200007e4 	.word	0x200007e4

080065c4 <__malloc_unlock>:
 80065c4:	4801      	ldr	r0, [pc, #4]	; (80065cc <__malloc_unlock+0x8>)
 80065c6:	f000 b80c 	b.w	80065e2 <__retarget_lock_release_recursive>
 80065ca:	bf00      	nop
 80065cc:	200007e4 	.word	0x200007e4

080065d0 <_malloc_usable_size_r>:
 80065d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065d4:	1f18      	subs	r0, r3, #4
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	bfbc      	itt	lt
 80065da:	580b      	ldrlt	r3, [r1, r0]
 80065dc:	18c0      	addlt	r0, r0, r3
 80065de:	4770      	bx	lr

080065e0 <__retarget_lock_acquire_recursive>:
 80065e0:	4770      	bx	lr

080065e2 <__retarget_lock_release_recursive>:
 80065e2:	4770      	bx	lr

080065e4 <_init>:
 80065e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065e6:	bf00      	nop
 80065e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ea:	bc08      	pop	{r3}
 80065ec:	469e      	mov	lr, r3
 80065ee:	4770      	bx	lr

080065f0 <_fini>:
 80065f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065f2:	bf00      	nop
 80065f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065f6:	bc08      	pop	{r3}
 80065f8:	469e      	mov	lr, r3
 80065fa:	4770      	bx	lr
